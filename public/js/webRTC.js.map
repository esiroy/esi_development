{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/js/webRTC.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","myVideoStream","myAudioStream","myId","socket","io","peer","Peer","videoGrid","document","getElementById","myvideo","createElement","setAttribute","muted","console","log","user","mySharedVideo","audioInputSelect","querySelector","audioOutputSelect","videoSelect","selectors","gotDevices","deviceInfos","values","map","select","forEach","firstChild","removeChild","length","deviceInfo","option","deviceId","kind","text","label","appendChild","selectorIndex","Array","slice","childNodes","some","changeAudioDestination","element","sinkId","audioDestination","setSinkId","then","error","message","selectedIndex","warn","gotStream","stream","addVideo","connectClientVideo","keys","peerConnections","peerID","on","err","userStream","vid","remove","navigator","mediaDevices","enumerateDevices","disabled","HTMLMediaElement","handleMediaError","getUserMedia","video","audio","audioElement","addAudio","alert","createUserMedia","window","getTracks","track","stop","audioSource","videoSource","constraints","exact","undefined","conn","isSharedScreen","stopSharing","answer","shareScreen","getDisplayMedia","sharedScreen","getVideoTracks","onended","connect","send","newcall","srcObject","addEventListener","play","append","replaceVideo","onchange","data","id","roomID","emit","type","close","readyState","enabled","getAudioTracks"],"mappings":"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","file":"/js/webRTC.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","const socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nconst peer = new Peer();\nlet myVideoStream;\nlet myAudioStream;\n\nlet myId;\nvar videoGrid = document.getElementById('videoGrid')\n\n//My video is going to be muted for feedback suppression while playing\nvar myvideo = document.createElement('video');\nmyvideo.setAttribute(\"id\", \"myVideo\")\nmyvideo.muted = true;\n\n\n\n\n\nconsole.log(\"user\", user);\n\n//My Shared video will be muted for feedback suppression while playing\nvar mySharedVideo = document.createElement('video');\nmySharedVideo.setAttribute(\"id\", \"sharedVideo\");\nmySharedVideo.muted = true;\n\n\n//When loading shared video is always hidden and false\nlet isSharedVideo = false;\n\n\nconst audioInputSelect = document.querySelector('select#audioSource');\nconst audioOutputSelect = document.querySelector('select#audioOutput');\nconst videoSelect = document.querySelector('select#videoSource');\nconst selectors = [audioInputSelect, audioOutputSelect, videoSelect];\n\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleMediaError);\n\nfunction gotDevices(deviceInfos) {\n    // Handles being called several times to update labels. Preserve values.\n    const values = selectors.map(select => select.value);\n    selectors.forEach(select => {\n        while (select.firstChild) {\n            select.removeChild(select.firstChild);\n        }\n    });\n    for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n        if (deviceInfo.kind === 'audioinput') {\n            option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;\n            audioInputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'audiooutput') {\n            option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;\n            audioOutputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'videoinput') {\n            option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;\n            videoSelect.appendChild(option);\n        } else {\n            console.log('Some other kind of source/device: ', deviceInfo);\n        }\n    }\n    selectors.forEach((select, selectorIndex) => {\n        if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {\n            select.value = values[selectorIndex];\n        }\n    });\n}\n\n\n// Attach audio output device to video element using device/sink ID.\nfunction attachSinkId(element, sinkId) {\n    if (typeof element.sinkId !== 'undefined') {\n        element.setSinkId(sinkId)\n            .then(() => {\n                console.log(`Success, audio output device attached: ${sinkId}`);\n            })\n            .catch(error => {\n                let errorMessage = error;\n                if (error.name === 'SecurityError') {\n                    errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\n                }\n                //console.error(errorMessage);\n\n                console.log(error.message + \" : \" + error.name);\n\n                // Jump back to first output device in the list as it's the default.\n                audioOutputSelect.selectedIndex = 0;\n            });\n    } else {\n        console.warn('Browser does not support output device selection.');\n    }\n}\n\nfunction changeAudioDestination() {\n    const audioDestination = audioOutputSelect.value;\n    console.log(\"my audio destination:\", audioDestination);\n    attachSinkId(myvideo, audioDestination);\n}\n\nfunction gotStream(stream) {\n    //Register the Video\n    myVideoStream = stream;\n\n    addVideo(myvideo, myVideoStream);\n\n    connectClientVideo(myVideoStream);\n\n    Object.keys(peerConnections).forEach(function(peerID) {\n        if (myId !== peerID) {\n\n            peer.call(peerID, myVideoStream);\n\n            if (call) {\n                call.on('error', (err) => {\n                    console.log(err);\n                })\n                call.on('stream', userStream => {\n                    // addVideo(vid, userStream);\n                })\n                call.on('close', () => {\n                    vid.remove();\n                    console.log(\"user disconected\")\n                });\n            }\n        }\n    });\n\n\n    return navigator.mediaDevices.enumerateDevices();\n}\n\n\n\n\nconst peerConnections = {}\n\nsocket.on(\"connect\", () => {\n    audioInputSelect.onchange = createUserMedia;\n    audioOutputSelect.onchange = changeAudioDestination;\n    videoSelect.onchange = createUserMedia;\n    createUserMedia();\n});\n\n\n\n\nsocket.on('userJoined', (data) => {\n\n    let id = data.id;\n    let roomID = data.roomID;\n    let user = data.user;\n\n    console.log(\"new user joined\", data);\n\n    const call = peer.call(id, myVideoStream);\n\n    const vid = document.createElement('video');\n    vid.setAttribute(\"id\", \"userVid\");\n    vid.muted = true;\n\n    if (call) {\n        call.on('error', (err) => {\n            console.log(err);\n        })\n        call.on('stream', userStream => {\n            addVideo(vid, userStream);\n        })\n        call.on('close', () => {\n            vid.remove();\n            console.log(\"user disconected\")\n        });\n\n        peerConnections[id] = call;\n    }\n});\n\n\nfunction handleMediaError(error) {\n    if (error.name == \"NotFoundError\") {\n        createUserAudio();\n\n    } else {\n        console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\n    }\n}\n\nfunction createUserMedia() {\n    if (window.stream) {\n        window.stream.getTracks().forEach(track => {\n            track.stop();\n        });\n    }\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n    navigator.mediaDevices.getUserMedia(constraints).\n    then(gotStream).\n    then(gotDevices).\n    catch((err) => {\n        handleMediaError(err)\n    });\n}\n\n\nfunction createUserAudio() {\n\n    console.log(\"creating audi only\");\n\n    //media device only\n    navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: true,\n    }).then((stream) => {\n\n        myAudioStream = stream;\n\n        var audioElement = document.createElement('audio');\n        audioElement.setAttribute(\"id\", \"myAudio\");\n        audioElement.setAttribute(\"controls\", \"controls\");\n        audioElement.muted = false;\n\n        addAudio(audioElement, myAudioStream);\n\n        connectClientVideo(myAudioStream);\n\n    }).catch(err => {\n\n        alert(\"Can't create audio\");\n    });\n}\n\n\nfunction connectClientAudio(stream) {\n\n    console.log(\"connect client Audio stream\");\n\n    var audioElement = document.createElement('audio');\n    audioElement.setAttribute(\"id\", \"callerAudio\");\n    audioElement.setAttribute(\"controls\", \"controls\");\n    audioElement.muted = false;\n\n    peer.on('connection', function(conn) {\n        conn.on('data', function(isSharedScreen) {\n            if (isSharedScreen == true) {\n                vid = document.createElement('video');\n                vid.setAttribute(\"id\", \"sharedVideo\");\n\n            } else {\n                stopSharing();\n                return false;\n            }\n            console.log(isSharedScreen);\n        });\n    });\n\n    peer.on('close', function(conn) {\n        console.log(\"close\")\n    });\n\n    peer.on('call', call => {\n\n        if (stream == null) {\n            call.answer();\n        } else {\n            call.answer(stream);\n        }\n\n        call.on('stream', userStream => {\n            addAudio(audioElement, userStream);\n        });\n\n        call.on('finish', function() {\n            console.log(\"called finish\")\n        });\n\n        call.on('error', (err) => {\n            alert(err)\n        });\n\n        call.on(\"close\", () => {\n            audioElement.remove();\n        });\n\n        peerConnections[call.peer] = call;\n    });\n\n}\n\n\nfunction connectClientVideo(stream) {\n\n\n    var vid = document.createElement('video');\n    vid.setAttribute(\"id\", \"callerVideo\");\n    vid.muted = false;\n\n    peer.on('connection', function(conn) {\n\n        conn.on('data', function(isSharedScreen) {\n\n            if (isSharedScreen == true) {\n                vid = document.createElement('video');\n                vid.setAttribute(\"id\", \"sharedVideo\");\n\n            } else {\n                stopSharing();\n                return false;\n            }\n            console.log(isSharedScreen);\n        });\n    });\n\n    peer.on('close', function(conn) {\n        console.log(\"close\")\n    });\n\n    peer.on('call', call => {\n\n        if (stream == null) {\n            call.answer();\n        } else {\n            call.answer(stream);\n        }\n\n        call.on('stream', userStream => {\n            addVideo(vid, userStream);\n        });\n\n        call.on('finish', function() {\n            console.log(\"called finish\")\n        });\n\n        call.on('error', (err) => {\n            alert(err)\n        });\n\n        call.on(\"close\", () => {\n            console.log(vid);\n            vid.remove();\n        });\n\n        peerConnections[call.peer] = call;\n    });\n\n}\n\n\n\npeer.on('open', (id) => {\n    console.log(\"my peer id\" + id)\n    console.log(\"my user \", user)\n    console.log(\"my room id \", roomID)\n\n    myId = id;\n\n    data = {\n        'id': id,\n        'user': user,\n        'roomID': roomID\n    }\n\n    socket.emit(\"newUser\", data);\n});\n\npeer.on('error', (err) => {\n    console.log(err + \" : \" + err.type)\n});\n\n\nsocket.on('userShared', (roomID, stream) => {\n\n    /*\n    console.log(\"user shared :\" + myId);\n    const call = peer.call(myId, stream);\n\n    call.on(\"stream\", (remoteStream) => {\n        // Show stream in some <video> element.\n    });\n    */\n\n});\n\n\n\n//user end stop sharing\nfunction stopSharing() {\n    document.getElementById(\"sharedVideo\").remove();\n}\n\n\nfunction shareScreen() {\n\n    navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true\n    }).then((stream) => {\n\n        sharedScreen = stream;\n\n        //The screen record is stopped by myself\n        sharedScreen.getVideoTracks()[0].onended = function() {\n            document.getElementById(\"sharedVideo\").remove();\n\n            //send this shared screen false to stop peer\n            Object.keys(peerConnections).forEach(function(peerID) {\n                var conn = peer.connect(peerID);\n                conn.on('open', () => {\n                    let isSharedScreen = false;\n                    conn.send(isSharedScreen);\n                });\n            })\n        };\n\n        //Connect to peers\n        Object.keys(peerConnections).forEach(function(peerID) {\n            //connect and send\n            var conn = peer.connect(peerID);\n\n            conn.on('open', () => {\n                let isSharedScreen = true;\n                conn.send(isSharedScreen);\n                const vid = document.createElement('video');\n                vid.setAttribute(\"id\", \"vid\");\n\n                const newcall = peer.call(peerID, sharedScreen);\n\n                newcall.on('error', (err) => {\n                    console.log(err)\n                });\n\n                newcall.on('stream', userStream => {\n                    // addVideo(vid, userStream);\n                });\n\n                newcall.on('close', () => {\n                    vid.remove();\n                    console.log(\"user disconect\")\n                });\n\n            });\n\n        });\n\n        replaceVideo(mySharedVideo, sharedScreen);\n\n        //socket.emit(\"userShare\", roomID, sharedScreen);\n\n    });\n}\n\n\n\n\n\n\nsocket.on('userDisconnect', id => {\n    if (peerConnections[id]) {\n        peerConnections[id].close();\n    }\n});\n\n\nfunction replaceVideo(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n    videoGrid.append(video);\n\n}\n\nfunction addAudio(audio, stream) {\n    audio.srcObject = stream;\n    audio.addEventListener('loadedmetadata', () => {\n        audio.play()\n    })\n    videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n    videoGrid.append(video);\n}\n\n\nfunction stopCam() {\n    myVideoStream.getVideoTracks().forEach((track) => {\n        if (track.readyState == 'live') {\n            track.stop();\n        } else {\n            console.log(\"video broadcasting live\");\n        }\n    });\n\n    myVideoStream.getTracks().forEach((track) => {\n        if (track.readyState == 'live') {\n            track.stop();\n        } else {\n            console.log(\"audio not broadcasting live\");\n        }\n    });\n}\n\n// stop only camera\nfunction stopVideoOnly(stream) {\n    stream.getTracks().forEach(function(track) {\n        if (track.readyState == 'live' && track.kind === 'video') {\n            track.stop();\n        }\n    });\n}\n\n// stop only mic\nfunction stopAudioOnly(stream) {\n    stream.getTracks().forEach(function(track) {\n        if (track.readyState == 'live' && track.kind === 'audio') {\n            track.stop();\n        }\n    });\n}\n\nfunction muteCam() {\n    myVideoStream.getVideoTracks().forEach((track) => {\n        track.enabled = !track.enabled\n        console.log(track)\n    });\n}\n\nfunction muteMic() {\n    myVideoStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);\n}\n\n//DOM Execution\ndocument.getElementById(\"stopCamera\").addEventListener(\"click\", function() {\n    stopCam();\n});\n\ndocument.getElementById(\"toggleCamera\").addEventListener(\"click\", function() {\n    muteCam();\n});\n\ndocument.getElementById(\"toggleAudio\").addEventListener(\"click\", function() {\n    muteMic();\n});\n\ndocument.getElementById(\"shareScreen\").addEventListener(\"click\", function() {\n    shareScreen();\n});"],"sourceRoot":""}