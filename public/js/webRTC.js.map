{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/js/webRTC.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","videoElement","audioElement","socket","io","peer","Peer","initiator","trickle","myVideoStream","myAudioStream","sharedScreen","peerConnections","mediaContainer","document","getElementById","videoGrid","audioInputSelect","querySelector","audioOutputSelect","videoSelect","selectors","gotDevices","deviceInfos","values","map","select","forEach","firstChild","removeChild","length","deviceInfo","option","createElement","deviceId","kind","text","label","appendChild","console","log","selectorIndex","Array","slice","childNodes","some","attachSinkId","element","sinkId","muted","setSinkId","then","error","errorMessage","selectedIndex","warn","handleError","data","myId","user","roomID","start","addAudio","audio","stream","srcObject","addEventListener","play","append","addVideo","video","addVideoContent","containerID","containerElement","hideByElementId","elementID","el","style","display","removeElementByID","id","remove","createUserMedia","constraints","navigator","mediaDevices","getUserMedia","window","setAttribute","addMyVideo","addMyAudio","enumerateDevices","err","getTracks","track","stop","audioSource","videoSource","exact","undefined","restart","emit","stopSharing","showElement","removeElement","shareScreen","getDisplayMedia","userStream","sharedVid","keys","peerID","conn","connect","on","send","getVideoTracks","onended","disabled","HTMLMediaElement","onchange","audioDestination","alert","ctr","getAudioTracks","answer","callerElement","mediaStream","callback","audioConstraints","mediaCallStream","close","enabled"],"mappings":"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","file":"/js/webRTC.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/*\r\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n\r\nconst socket = io('https://rtcserver.esuccess-inc.com:40002', {});\r\n\r\nconst peer = new Peer({\r\n    initiator: false,\r\n    trickle: false,\r\n});\r\n\r\n'use strict';\r\nlet myVideoStream = null;\r\nlet myAudioStream = null;\r\n\r\nlet videoElement;\r\nlet audioElement;\r\n\r\n\r\n\r\nlet sharedScreen = false;\r\n\r\nconst peerConnections = {}\r\nlet mediaContainer = document.getElementById('myMediaContainer');\r\n\r\n\r\n\r\n\r\nlet videoGrid = document.getElementById('videoGrid');\r\n\r\nconst audioInputSelect = document.querySelector('select#audioSource');\r\nconst audioOutputSelect = document.querySelector('select#audioOutput');\r\nconst videoSelect = document.querySelector('select#videoSource');\r\nconst selectors = [audioInputSelect, audioOutputSelect, videoSelect];\r\n\r\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\r\n\r\nfunction gotDevices(deviceInfos) {\r\n    // Handles being called several times to update labels. Preserve values.\r\n    const values = selectors.map(select => select.value);\r\n    selectors.forEach(select => {\r\n        while (select.firstChild) {\r\n            select.removeChild(select.firstChild);\r\n        }\r\n    });\r\n    for (let i = 0; i !== deviceInfos.length; ++i) {\r\n        const deviceInfo = deviceInfos[i];\r\n        const option = document.createElement('option');\r\n        option.value = deviceInfo.deviceId;\r\n\r\n        if (deviceInfo.kind === 'audioinput') {\r\n            option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;\r\n            audioInputSelect.appendChild(option);\r\n        } else if (deviceInfo.kind === 'audiooutput') {\r\n            option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;\r\n            audioOutputSelect.appendChild(option);\r\n        } else if (deviceInfo.kind === 'videoinput') {\r\n            option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;\r\n            videoSelect.appendChild(option);\r\n        } else {\r\n            console.log('Some other kind of source/device: ', deviceInfo);\r\n        }\r\n    }\r\n    selectors.forEach((select, selectorIndex) => {\r\n        if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {\r\n            select.value = values[selectorIndex];\r\n        }\r\n    });\r\n}\r\n\r\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);\r\n\r\n// Attach audio output device to video element using device/sink ID.\r\nfunction attachSinkId(element, sinkId) {\r\n\r\n    //(mute element, feedback if false)\r\n    element.muted = true;\r\n\r\n    if (typeof element.sinkId !== 'undefined') {\r\n        element.setSinkId(sinkId)\r\n            .then(() => {\r\n                console.log(`Success, audio output device attached: ${sinkId}`);\r\n            })\r\n            .catch(error => {\r\n                let errorMessage = error;\r\n                if (error.name === 'SecurityError') {\r\n                    errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\r\n                }\r\n                console.error(errorMessage);\r\n                // Jump back to first output device in the list as it's the default.\r\n                audioOutputSelect.selectedIndex = 0;\r\n            });\r\n    } else {\r\n        console.warn('Browser does not support output device selection.');\r\n    }\r\n}\r\n\r\nfunction changeAudioDestination() {\r\n    const audioDestination = audioOutputSelect.value;\r\n\r\n\r\n    if (myVideoStream) {\r\n        attachSinkId(videoElement, audioDestination);\r\n    } else {\r\n        attachSinkId(audioElement, audioDestination);\r\n    }\r\n}\r\n\r\nfunction gotStream(stream) {\r\n    window.stream = stream; // make stream available to console\r\n    videoElement.srcObject = stream;\r\n\r\n    //Register the video stream to my Stream\r\n    myVideoStream = stream;\r\n\r\n    // Refresh button list in case labels have become available\r\n    return navigator.mediaDevices.enumerateDevices();\r\n}\r\n\r\nfunction handleError(error) {\r\n    //start a video with audio connection width data of user\r\n    let video = false;\r\n    let audio = true;\r\n\r\n\r\n    //start audio\r\n    data = {\r\n        'id': myId,\r\n        'user': user,\r\n        'roomID': roomID\r\n    }\r\n    start(video, audio, data);\r\n}\r\n\r\n\r\nfunction addMyAudio(audio, stream) {\r\n    audio.srcObject = stream;\r\n    audio.muted = true;\r\n\r\n    audio.addEventListener('loadedmetadata', () => {\r\n        audio.play()\r\n    })\r\n    mediaContainer.append(audio);\r\n}\r\n\r\n\r\nfunction addMyVideo(video, stream) {\r\n    video.srcObject = stream;\r\n    video.muted = true;\r\n\r\n    video.addEventListener('loadedmetadata', () => {\r\n        video.play()\r\n    })\r\n    mediaContainer.append(video);\r\n}\r\n\r\n\r\nfunction addAudio(audio, stream) {\r\n    audio.srcObject = stream;\r\n    audio.addEventListener('loadedmetadata', () => {\r\n        audio.play()\r\n    })\r\n    videoGrid.append(audio);\r\n}\r\n\r\nfunction addVideo(video, stream) {\r\n    video.srcObject = stream;\r\n    video.addEventListener('loadedmetadata', () => {\r\n        video.play()\r\n    })\r\n    videoGrid.append(video);\r\n}\r\n\r\n\r\nfunction addVideoContent(containerID, video, stream) {\r\n    video.srcObject = stream;\r\n    video.addEventListener('loadedmetadata', () => {\r\n        video.play()\r\n    })\r\n\r\n    let containerElement = document.getElementById(containerID);\r\n    if (containerElement) {\r\n        containerElement.append(video);\r\n    }\r\n}\r\n\r\n\r\nfunction showByElementId(elementID) {\r\n    let el = document.getElementById(elementID);\r\n    if (el) {\r\n        el.style.display = 'block';\r\n    }\r\n}\r\n\r\nfunction hideByElementId(elementID) {\r\n    let el = document.getElementById(elementID);\r\n    if (el) {\r\n        el.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction removeElementByID(id) {\r\n    let element = document.getElementById(id);\r\n    if (element) {\r\n        element.remove();\r\n    }\r\n}\r\n\r\nfunction createUserMedia(video, audio, constraints) {\r\n\r\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\r\n\r\n        removeElementByID(\"myVideo\");\r\n        removeElementByID(\"myAudio\");\r\n\r\n        if (audio == true && video == true) {\r\n            myAudioStream = null;\r\n\r\n            //Register the video stream to my Stream\r\n            myVideoStream = stream;\r\n            window.stream = stream; // make stream available to console     \r\n            /*******\r\n                (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n            *******/\r\n\r\n            videoElement = document.createElement('video');\r\n            videoElement.setAttribute(\"id\", \"myVideo\");\r\n            videoElement.muted = false;\r\n            //videoElement.muted = true;\r\n            addMyVideo(videoElement, stream);\r\n\r\n\r\n            // detectDesktopShared(stream)\r\n        } else {\r\n\r\n\r\n            //Register the video stream to my Stream\r\n            myVideoStream = null;\r\n            window.stream = stream; // make stream available to console       \r\n\r\n            //add to my audio stream\r\n            myAudioStream = stream;\r\n\r\n            console.log(\"this is a audio only\")\r\n\r\n            /*******\r\n                (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n            *******/\r\n            audioElement = document.createElement('audio');\r\n            audioElement.setAttribute(\"id\", \"myAudio\");\r\n            audioElement.setAttribute(\"controls\", \"controls\");\r\n            //audioElement.muted = false;\r\n            audioElement.muted = true;\r\n\r\n            addMyAudio(audioElement, stream);\r\n\r\n            // detectDesktopShared(stream)\r\n\r\n\r\n\r\n        }\r\n\r\n        return navigator.mediaDevices.enumerateDevices();\r\n\r\n\r\n    }).then(gotDevices).catch((err) => {\r\n\r\n        if (video == true && audio == true) {\r\n\r\n            handleError(err);\r\n\r\n        } else {\r\n\r\n            //alert(\"no media detected, please connect and try again\")\r\n        }\r\n    });\r\n\r\n\r\n}\r\n\r\nfunction start(video, audio, data) {\r\n\r\n    if (window.stream) {\r\n        window.stream.getTracks().forEach(track => {\r\n            track.stop();\r\n        });\r\n    }\r\n    const audioSource = audioInputSelect.value;\r\n    const videoSource = videoSelect.value;\r\n\r\n    if (video == true && audio == true) {\r\n\r\n        const constraints = {\r\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n            video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n        };\r\n\r\n        console.log(\"connect video : start\")\r\n\r\n        createUserMedia(video, audio, constraints)\r\n\r\n    } else if (video == false && audio == true) {\r\n\r\n        const constraints = {\r\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n            video: false\r\n        };\r\n\r\n        console.log(\"connect audio : start\")\r\n        createUserMedia(video, audio, constraints)\r\n\r\n    } else {\r\n\r\n        //alert(\"no media detected, please connect and try again\")\r\n    }\r\n\r\n}\r\n\r\nfunction restart() {\r\n\r\n    if (window.stream) {\r\n        window.stream.getTracks().forEach(track => {\r\n            track.stop();\r\n        });\r\n    }\r\n\r\n    const audioSource = audioInputSelect.value;\r\n    const videoSource = videoSelect.value;\r\n    const constraints = {\r\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n    };\r\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\r\n\r\n        console.log(\"restarted\")\r\n\r\n\r\n        window.stream = stream; // make stream available to console\r\n        videoElement.srcObject = stream;\r\n\r\n        //console.log(\"i have muted this\")\r\n        //videoElement.muted = true;\r\n\r\n        //Register the video stream to my Stream\r\n        myVideoStream = stream;\r\n\r\n        data = {\r\n            'id': myId,\r\n            'user': user,\r\n            'roomID': roomID,\r\n            'videoStream': myVideoStream\r\n        }\r\n\r\n\r\n\r\n        socket.emit(\"changeMedia\", data);\r\n\r\n        removeElementByID(myId);\r\n\r\n\r\n    }).catch(handleError);\r\n\r\n}\r\n\r\n\r\n\r\n//user end stop sharing\r\nfunction stopSharing() {\r\n\r\n    let showElement = document.getElementById(\"lessonSlide\");\r\n\r\n    if (showElement) {\r\n        showElement.style.display = 'block';\r\n    }\r\n\r\n    let removeElement = document.getElementById(\"sharedVideo\");\r\n\r\n    if (removeElement) {\r\n        removeElement.remove();\r\n    }\r\n}\r\n\r\nfunction detectDesktopShared(stream) {\r\n\r\n\r\n\r\n    peer.on('connection', function(conn) {\r\n\r\n        conn.on('data', function(data) {\r\n\r\n            if (data.sharedScreen == true) {\r\n                //@toto peer.stream to wait for the\r\n\r\n                sharedScreen = true;\r\n\r\n            } else if (data.sharedScreen == false) {\r\n\r\n                stopSharing();\r\n\r\n                sharedScreen = false;\r\n\r\n                return false;\r\n            } else {\r\n\r\n                alert(\"the stream data\")\r\n            }\r\n\r\n        });\r\n\r\n    });\r\n\r\n\r\n    peer.on('close', function(conn) {\r\n        console.log(\"close\")\r\n    });\r\n\r\n    peer.on('call', call => {\r\n\r\n        if (stream == null) {\r\n\r\n            console.log(\"answer the stream without any stream\", call)\r\n            call.answer();\r\n\r\n        } else {\r\n\r\n            console.log(\"answer the stream\", stream)\r\n\r\n            call.answer(stream);\r\n\r\n            if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\r\n\r\n                alert(\"reciever from sender is a video 11-25 :: (peer)\" + call.peer)\r\n\r\n                removeElementByID(call.peer);\r\n                callerElement = document.createElement('video');\r\n                callerElement.setAttribute(\"id\", call.peer);\r\n                callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\r\n                callerElement.muted = false;\r\n\r\n                addVideo(callerElement, stream);\r\n            } else {\r\n\r\n\r\n                alert(\"reciever from sender is a audio 22-25 :: (peer)\" + call.peer)\r\n\r\n                removeElementByID(call.peer);\r\n                callerElement = document.createElement('audio');\r\n                callerElement.setAttribute(\"id\", call.peer);\r\n                callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\r\n                callerElement.setAttribute(\"controls\", \"controls\");\r\n                callerElement.muted = false;\r\n\r\n                addAudio(callerElement, stream);\r\n\r\n            }\r\n        }\r\n\r\n        call.on('stream', userStream => {\r\n\r\n            if (sharedScreen == true) {\r\n                sharedVid = document.createElement('video');\r\n                sharedVid.setAttribute(\"id\", \"sharedVideo\");\r\n\r\n\r\n                //the lesson shared container must be on the member lesson slider component\r\n                addVideoContent('lessonSharedContainer', sharedVid, userStream);\r\n\r\n                //hide lesson Slide\r\n                hideByElementId(\"lessonSlide\");\r\n            } else {\r\n\r\n                //the user did not\r\n                alert(\"user video \")\r\n\r\n                data = {\r\n                    'id': myId,\r\n                    'user': user,\r\n                    'roomID': roomID,\r\n                    'videoStream': mediaCallStream\r\n                }\r\n\r\n                socket.emit(\"changeMedia\", data);\r\n            }\r\n\r\n        });\r\n\r\n        call.on('finish', function() {\r\n            console.log(\"called finish\")\r\n        });\r\n\r\n        call.on('error', (err) => {\r\n            alert(err)\r\n        });\r\n\r\n        call.on(\"close\", () => {\r\n\r\n            alert(\"closed shared\")\r\n            sharedVid.remove();\r\n        });\r\n\r\n\r\n    });\r\n};\r\n\r\n\r\n\r\nfunction shareScreen() {\r\n\r\n    navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n        audio: true\r\n    }).then((userStream) => {\r\n\r\n        sharedScreen = userStream;\r\n\r\n        //@todo: (hide slide then show the user shared)\r\n        const sharedVid = document.createElement('video');\r\n        sharedVid.setAttribute(\"id\", \"sharedVideo\");\r\n        sharedVid.muted = false;\r\n\r\n        //the lesson shared container must be on the member lesson slider component\r\n        addVideoContent('lessonSharedContainer', sharedVid, userStream);\r\n\r\n        //hide lesson Slide\r\n        hideByElementId(\"lessonSlide\")\r\n\r\n        console.log(peerConnections)\r\n\r\n\r\n\r\n        //Connect to peers\r\n        Object.keys(peerConnections).forEach(function(peerID) {\r\n\r\n            //connect and send\r\n            var conn = peer.connect(peerID);\r\n\r\n            conn.on('open', () => {\r\n\r\n                /*********************               \r\n                    (NEW) share screen data\r\n                *************************/\r\n                let data = {\r\n                    'id': peerID,\r\n                    'sharedScreen': true\r\n                }\r\n\r\n                //add to the connection, and send then call\r\n                conn.send(data);\r\n\r\n                let sharingScreen = peer.call(peerID, sharedScreen);\r\n\r\n            });\r\n\r\n        });\r\n\r\n\r\n        //The screen record is stopped by myself\r\n        sharedScreen.getVideoTracks()[0].onended = function() {\r\n\r\n\r\n            showByElementId(\"lessonSlide\")\r\n\r\n            document.getElementById(\"sharedVideo\").remove();\r\n\r\n            //send this shared screen false to stop peer\r\n            Object.keys(peerConnections).forEach(function(peerID) {\r\n\r\n                var conn = peer.connect(peerID);\r\n\r\n                conn.on('open', () => {\r\n\r\n\r\n                    /*********************               \r\n                        (STOP SHARE) share screen data\r\n                    *************************/\r\n\r\n                    let data = {\r\n                        'id': peerID,\r\n                        'sharedScreen': false\r\n                    }\r\n\r\n                    conn.send(data);\r\n                });\r\n            })\r\n        };\r\n\r\n\r\n\r\n\r\n\r\n        //socket.emit(\"userShare\", roomID, sharedScreen);\r\n\r\n    });\r\n}\r\n\r\naudioInputSelect.onchange = restart;\r\naudioOutputSelect.onchange = changeAudioDestination;\r\nvideoSelect.onchange = restart;\r\n\r\n\r\n\r\n\r\npeer.on('connection', function(conn) {\r\n\r\n    conn.on('data', function(data) {\r\n        console.log(\"peer connected\", data)\r\n\r\n        if (data.sharedScreen == true) {\r\n\r\n            sharedScreen = true;\r\n\r\n        } else if (data.sharedScreen == false) {\r\n\r\n            stopSharing();\r\n\r\n            sharedScreen = false;\r\n\r\n            return false;\r\n        } else {\r\n\r\n            alert(\"the stream data\")\r\n        }\r\n\r\n    });\r\n\r\n    conn.on('close', (conn) => {\r\n        console.log(\"connection of peer has been closed\", conn)\r\n    });\r\n\r\n});\r\n\r\npeer.on('open', (id) => {\r\n\r\n    console.log(\"my peer id\" + id)\r\n    console.log(\"my user \", user)\r\n    console.log(\"my room id \", roomID)\r\n\r\n    myId = id;\r\n\r\n    data = {\r\n        'id': id,\r\n        'user': user,\r\n        'roomID': roomID\r\n    }\r\n\r\n    socket.emit(\"newUser\", data);\r\n\r\n    //start a video with audio connection width data of user\r\n    let video = true;\r\n    let audio = true;\r\n\r\n    //start the my own video camera\r\n\r\n    start(video, audio, data)\r\n\r\n});\r\n\r\n\r\n\r\npeer.on('call', call => {\r\n\r\n    let ctr = 0;\r\n\r\n    console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\r\n\r\n    const audioSource = audioInputSelect.value;\r\n    const videoSource = videoSelect.value;\r\n    const constraints = {\r\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n    };\r\n\r\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\r\n\r\n        if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\r\n            //alert(\"stream from sender is a video 1\")\r\n        } else {\r\n            //alert(\"stream from sender is a audio 2\")\r\n        }\r\n\r\n\r\n        call.answer(stream);\r\n\r\n        call.on('stream', (userStream) => {\r\n\r\n\r\n\r\n            peerConnections[call.peer] = call;\r\n\r\n            console.log(\"recieve video from initiator \", call);\r\n\r\n            if (ctr == 0) {\r\n\r\n                if (sharedScreen == true) {\r\n                    sharedVid = document.createElement('video');\r\n                    sharedVid.setAttribute(\"id\", \"sharedVideo\");\r\n\r\n\r\n                    //the lesson shared container must be on the member lesson slider component\r\n                    addVideoContent('lessonSharedContainer', sharedVid, userStream);\r\n\r\n                    //hide lesson Slide\r\n                    hideByElementId(\"lessonSlide\");\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                    //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\r\n\r\n                    removeElementByID(call.peer);\r\n                    callerElement = document.createElement('video');\r\n                    callerElement.setAttribute(\"id\", call.peer);\r\n                    callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\r\n                    callerElement.muted = false;\r\n\r\n                    addVideo(callerElement, userStream);\r\n                } else {\r\n\r\n\r\n                    //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\r\n\r\n                    removeElementByID(call.peer);\r\n                    callerElement = document.createElement('audio');\r\n                    callerElement.setAttribute(\"id\", call.peer);\r\n                    callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\r\n                    callerElement.setAttribute(\"controls\", \"controls\");\r\n                    callerElement.muted = false;\r\n\r\n                    addAudio(callerElement, userStream);\r\n\r\n                }\r\n            }\r\n            ctr++\r\n        });\r\n\r\n        call.on('close', () => {\r\n            removeElementByID(call.peer);\r\n            console.log(\"user disconected\")\r\n        });\r\n\r\n    }).catch((error) => {\r\n\r\n        console.log(\"recieve audio from initiator\", call);\r\n\r\n\r\n\r\n        const audioSource = audioInputSelect.value;\r\n        const constraints = {\r\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n            video: false,\r\n        };\r\n\r\n        navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\r\n\r\n            if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\r\n\r\n                //alert(\"stream from sender is a video 3\")\r\n\r\n            } else {\r\n\r\n                //alert(\"stream from sender is a audio 4\")\r\n\r\n            }\r\n\r\n\r\n            call.answer(stream);\r\n\r\n            call.on('stream', (userStream) => {\r\n\r\n                peerConnections[call.peer] = call;\r\n\r\n                if (ctr == 0) {\r\n\r\n\r\n                    if (sharedScreen == true) {\r\n                        sharedVid = document.createElement('video');\r\n                        sharedVid.setAttribute(\"id\", \"sharedVideo\");\r\n\r\n\r\n                        //the lesson shared container must be on the member lesson slider component\r\n                        addVideoContent('lessonSharedContainer', sharedVid, userStream);\r\n\r\n                        //hide lesson Slide\r\n                        hideByElementId(\"lessonSlide\");\r\n\r\n                        return false;\r\n                    }\r\n\r\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                        //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\r\n\r\n                        removeElementByID(call.peer);\r\n                        callerElement = document.createElement('video');\r\n                        callerElement.setAttribute(\"id\", call.peer);\r\n                        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\r\n                        callerElement.muted = false;\r\n\r\n                        addVideo(callerElement, userStream);\r\n                    } else {\r\n\r\n                        //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\r\n\r\n                        removeElementByID(call.peer);\r\n                        callerElement = document.createElement('audio');\r\n                        callerElement.setAttribute(\"id\", call.peer);\r\n                        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\r\n                        callerElement.setAttribute(\"controls\", \"controls\");\r\n                        callerElement.muted = false;\r\n\r\n                        addAudio(callerElement, userStream);\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n                ctr++\r\n            });\r\n\r\n            call.on('close', () => {\r\n                removeElementByID(call.peer);\r\n                console.log(\"user disconected\")\r\n            });\r\n\r\n        }).catch((error) => {\r\n            //alert(\"I can't send any video r audio to your contact, please check media\")\r\n        });\r\n\r\n\r\n    });\r\n\r\n\r\n\r\n\r\n});\r\n\r\npeer.on('close', (id) => {\r\n    document.getElementById(id).remove();\r\n});\r\n\r\n\r\nsocket.on('userJoined', (data) => {\r\n\r\n\r\n    peerConnections[data.id] = data;\r\n\r\n    console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\r\n\r\n    const audioSource = audioInputSelect.value;\r\n    const videoSource = videoSelect.value;\r\n    const constraints = {\r\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n    };\r\n\r\n    navigator.mediaDevices.getUserMedia(constraints).then((mediaStream) => {\r\n\r\n        console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\r\n\r\n        callback = peer.call(data.id, mediaStream);\r\n\r\n        if (callback) {\r\n\r\n            peerConnections[callback.peer] = callback;\r\n\r\n            let ctr = 0;\r\n\r\n            callback.on('stream', (userStream) => {\r\n\r\n                if (ctr == 0) {\r\n\r\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                        removeElementByID(data.id);\r\n\r\n                        callerElement = document.createElement('video');\r\n                        callerElement.setAttribute(\"id\", data.id);\r\n                        callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\r\n                        callerElement.muted = false;\r\n\r\n                        addVideo(callerElement, userStream);\r\n\r\n\r\n                    } else {\r\n\r\n                        removeElementByID(data.id);\r\n\r\n                        callerElement = document.createElement('audio');\r\n                        callerElement.setAttribute(\"id\", data.id);\r\n                        callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\r\n                        callerElement.setAttribute(\"controls\", \"controls\");\r\n                        callerElement.muted = false;\r\n\r\n                        addAudio(callerElement, userStream);\r\n\r\n                    }\r\n                }\r\n\r\n\r\n                ctr++;\r\n            });\r\n\r\n            callback.on('close', () => {\r\n                removeElementByID(data.id);\r\n            });\r\n\r\n            callback.on('error', (err) => {\r\n                console.log(err);\r\n            });\r\n\r\n\r\n        }\r\n\r\n\r\n    }).catch((error) => {\r\n\r\n        //I have only audio, send to the audio to my peer\r\n        console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\r\n\r\n\r\n\r\n        const audioConstraints = {\r\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n            video: false,\r\n        };\r\n\r\n        navigator.mediaDevices.getUserMedia(audioConstraints).then((mediaCallStream) => {\r\n\r\n            if (myVideoStream) {\r\n\r\n\r\n                callback = peer.call(data.id, mediaCallStream);\r\n\r\n            } else {\r\n\r\n                data = {\r\n                    'id': myId,\r\n                    'user': user,\r\n                    'roomID': roomID,\r\n                    'videoStream': mediaCallStream\r\n                }\r\n\r\n                socket.emit(\"changeMedia\", data);\r\n\r\n                //never mind callback, i will call change media\r\n                callback = null;\r\n            }\r\n\r\n\r\n\r\n            if (callback) {\r\n\r\n                peerConnections[callback.peer] = callback;\r\n\r\n\r\n                let ctr = 0;\r\n\r\n                callback.on('stream', (userStream) => {\r\n\r\n                    if (ctr == 0) {\r\n\r\n                        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                            //removeElementByID(data.id);\r\n\r\n                            callerElement = document.createElement('video');\r\n                            callerElement.setAttribute(\"id\", data.id);\r\n                            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\r\n                            callerElement.muted = false;\r\n\r\n                            addVideo(callerElement, userStream);\r\n\r\n\r\n                        } else {\r\n\r\n                            removeElementByID(data.id);\r\n\r\n                            callerElement = document.createElement('audio');\r\n                            callerElement.setAttribute(\"id\", data.id);\r\n                            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\r\n                            callerElement.setAttribute(\"controls\", \"controls\");\r\n                            callerElement.muted = false;\r\n\r\n                            addAudio(callerElement, userStream);\r\n\r\n                        }\r\n                    }\r\n\r\n\r\n                    ctr++;\r\n                });\r\n\r\n                callback.on('close', () => {\r\n                    removeElementByID(data.id);\r\n                });\r\n\r\n                callback.on('error', (err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n                peerConnections[data.id] = callback;\r\n\r\n\r\n            }\r\n\r\n\r\n        }).catch((error) => {\r\n\r\n            //alert(\"Please connect audioinput device and try again\");\r\n            console.log(error)\r\n        });\r\n\r\n    });\r\n\r\n    /*\r\n    let id = data.id;\r\n    let roomID = data.roomID;\r\n    let user = data.user;\r\n\r\n    const callback = peer.call(id, myVideoStream);\r\n\r\n    console.log(\"new user joined\", data);\r\n\r\n\r\n    if (callback) {\r\n\r\n        let ctr = 0;\r\n        callback.on('stream', (userStream) => {\r\n\r\n            if (ctr == 1) {\r\n\r\n                removeElementByID(data.id);\r\n\r\n                callerElement = document.createElement('video');\r\n                callerElement.setAttribute(\"id\", data.id);\r\n                callerElement.setAttribute(\"class\", \"callerBackVideo\");\r\n                callerElement.muted = false;\r\n                addVideo(callerElement, userStream);\r\n            }\r\n            ctr++;\r\n        });\r\n\r\n        callback.on('close', () => {\r\n            console.log(\"closing! callback video...\")\r\n            removeElementByID(data.id);\r\n        });\r\n\r\n        callback.on('error', (err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    */\r\n\r\n});\r\n\r\n\r\nsocket.on('mediaChanged', (data) => {\r\n\r\n\r\n    //alert(\"media change\");\r\n\r\n    const audioSource = audioInputSelect.value;\r\n    const videoSource = videoSelect.value;\r\n    const constraints = {\r\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n    };\r\n\r\n    navigator.mediaDevices.getUserMedia(constraints).then((userStream) => {\r\n\r\n        console.log(\"mediaChanged: initiator (recieved)\")\r\n\r\n        callback = peer.call(data.id, userStream);\r\n\r\n        if (callback) {\r\n\r\n            let ctr = 0;\r\n\r\n            callback.on('stream', (userStream) => {\r\n\r\n                if (ctr == 0) {\r\n\r\n\r\n                    console.log(\"repipient callback : video stream\");\r\n\r\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                        removeElementByID(data.id);\r\n\r\n                        callerElement = document.createElement('video');\r\n                        callerElement.setAttribute(\"id\", callback.peer);\r\n                        callerElement.setAttribute(\"class\", \"repipient_video_changed\");\r\n                        callerElement.muted = false;\r\n\r\n                        addVideo(callerElement, userStream);\r\n\r\n\r\n                    } else {\r\n\r\n                        removeElementByID(data.id);\r\n\r\n                        callerElement = document.createElement('audio');\r\n                        callerElement.setAttribute(\"id\", data.id);\r\n                        callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\r\n                        callerElement.setAttribute(\"controls\", \"controls\");\r\n                        callerElement.muted = false;\r\n\r\n                        addAudio(callerElement, userStream);\r\n\r\n                    }\r\n                }\r\n\r\n\r\n                ctr++;\r\n            });\r\n\r\n            callback.on('close', () => {\r\n                removeElementByID(data.id);\r\n            });\r\n\r\n            callback.on('error', (err) => {\r\n                console.log(err);\r\n            });\r\n\r\n            peerConnections[data.id] = callback;\r\n        }\r\n\r\n\r\n    }).catch((error) => {\r\n\r\n        const audioConstraints = {\r\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n            video: false,\r\n        };\r\n\r\n        navigator.mediaDevices.getUserMedia(audioConstraints).then((userStream) => {\r\n\r\n            console.log(\"initiator SENT AND AUDIO\")\r\n\r\n            callback = peer.call(data.id, userStream);\r\n\r\n            if (callback) {\r\n\r\n                let ctr = 0;\r\n\r\n                callback.on('stream', (userStream) => {\r\n\r\n\r\n                    console.log(\"this is for the audio, stream of the initiator\");\r\n\r\n                    if (ctr == 0) {\r\n\r\n                        console.log(userStream.getAudioTracks().length)\r\n                        console.log(userStream.getVideoTracks().length)\r\n\r\n                        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                            console.log(\"user sent a video\")\r\n\r\n                            removeElementByID(callback.peer);\r\n\r\n                            callerElement = document.createElement('video');\r\n                            callerElement.setAttribute(\"id\", callback.peer);\r\n                            callerElement.setAttribute(\"class\", \"callerBackVideo\");\r\n                            callerElement.muted = false;\r\n\r\n                            addVideo(callerElement, userStream);\r\n\r\n\r\n                        } else {\r\n\r\n                            console.log(\"user sent a AUDIO\")\r\n\r\n                            removeElementByID(callback.peer);\r\n\r\n\r\n                            callerElement = document.createElement('audio');\r\n                            callerElement.setAttribute(\"id\", callback.peer);\r\n                            callerElement.setAttribute(\"class\", \"callbackAudio_media\");\r\n                            callerElement.setAttribute(\"controls\", \"controls\");\r\n                            callerElement.muted = false;\r\n\r\n                            addAudio(callerElement, userStream);\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                    ctr++;\r\n                });\r\n\r\n                callback.on('close', () => {\r\n                    removeElementByID(data.id);\r\n                });\r\n\r\n                callback.on('error', (err) => {\r\n                    console.log(err);\r\n                });\r\n\r\n                peerConnections[data.id] = callback;\r\n            }\r\n\r\n\r\n        }).catch((error) => {\r\n\r\n            //alert(\"audio only\");\r\n\r\n\r\n\r\n            console.log(error)\r\n        });\r\n\r\n    });\r\n\r\n\r\n\r\n    /*\r\n    let id = data.id;\r\n    let roomID = data.roomID;\r\n    let user = data.user;\r\n\r\n    let callback = null;\r\n\r\n\r\n\r\n    if (myVideoStream !== null) {\r\n        callback = peer.call(id, myVideoStream);\r\n    } else if (myAudioStream !== null) {\r\n        callback = peer.call(id, myAudioStream);\r\n    }\r\n\r\n    console.log(\"my video\", myVideoStream);\r\n    console.log(\"my video\", myAudioStream);\r\n\r\n\r\n\r\n    if (callback) {\r\n\r\n        let ctr = 0;\r\n\r\n        callback.on('stream', (userStream) => {\r\n\r\n            if (ctr == 0) {\r\n\r\n                console.log(userStream.getAudioTracks().length)\r\n                console.log(userStream.getVideoTracks().length)\r\n\r\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n\r\n                    console.log(\"user sent a video\")\r\n\r\n                    removeElementByID(data.id);\r\n\r\n\r\n                    callerElement = document.createElement('video');\r\n                    callerElement.setAttribute(\"id\", data.id);\r\n                    callerElement.setAttribute(\"class\", \"callerBackVideo\");\r\n                    callerElement.muted = false;\r\n\r\n                    addVideo(callerElement, userStream);\r\n\r\n\r\n                } else {\r\n\r\n                    console.log(\"user sent a AUDIO\")\r\n\r\n                    removeElementByID(data.id);\r\n\r\n\r\n                    callerElement = document.createElement('audio');\r\n                    callerElement.setAttribute(\"id\", data.id);\r\n                    callerElement.setAttribute(\"class\", \"callbackAudio\");\r\n                    callerElement.setAttribute(\"controls\", \"controls\");\r\n                    callerElement.muted = false;\r\n\r\n                    addAudio(callerElement, userStream);\r\n                }\r\n\r\n            }\r\n\r\n\r\n            ctr++;\r\n        });\r\n\r\n        callback.on('close', () => {\r\n            removeElementByID(data.id);\r\n        });\r\n\r\n        callback.on('error', (err) => {\r\n            console.log(err);\r\n        });\r\n\r\n        peerConnections[data.id] = callback;\r\n    }\r\n    */\r\n});\r\n\r\n\r\nsocket.on('userDisconnect', id => {\r\n    console.log(\"userDisconnected\", id);\r\n    removeElementByID(id);\r\n    try {\r\n        peerConnections[id].close();\r\n    } catch (err) {\r\n        console.log(\"error disconnect : \", err)\r\n    }\r\n});\r\n\r\nfunction muteMic() {\r\n\r\n    console.log(\"audio mute mic\")\r\n\r\n    if (myVideoStream != null) {\r\n        console.log(\"muting video\")\r\n        myVideoStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);\r\n    }\r\n\r\n    if (myAudioStream != null) {\r\n        console.log(\"muting myAudioStream\")\r\n        myAudioStream.getAudioTracks().forEach(track => track.enabled = !track.enabled);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ndocument.getElementById(\"btnShareScreen\").addEventListener(\"click\", function() {\r\n    shareScreen();\r\n});\r\n\r\ndocument.getElementById(\"toggleAudio\").addEventListener(\"click\", function() {\r\n    muteMic();\r\n});"],"sourceRoot":""}