{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/js/webRTC.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","videoElement","audioElement","socket","io","myId","peer","Peer","initiator","trickle","myVideoStream","userCallStream","userJoinedStream","sharedScreen","peerConnections","mediaContainer","document","getElementById","videoGrid","audioInputSelect","querySelector","audioOutputSelect","videoSelect","selectors","gotDevices","deviceInfos","values","map","select","forEach","firstChild","removeChild","length","deviceInfo","option","createElement","deviceId","kind","text","label","appendChild","console","log","selectorIndex","Array","slice","childNodes","some","attachSinkId","element","sinkId","muted","setSinkId","then","error","errorMessage","selectedIndex","warn","handleError","data","user","roomID","start","addAudio","audio","stream","srcObject","addEventListener","play","append","addVideo","video","addVideoContent","containerID","containerElement","hideByElementId","elementID","el","style","display","removeElementByID","id","remove","createUserMedia","constraints","navigator","mediaDevices","getUserMedia","window","setAttribute","addMyVideo","addMyAudio","enumerateDevices","err","getTracks","track","stop","audioSource","videoSource","exact","undefined","restart","emit","stopSharing","showElement","removeElement","shareScreen","getDisplayMedia","userStream","sharedVid","keys","peerID","conn","connect","on","send","getVideoTracks","onended","disabled","HTMLMediaElement","onchange","audioDestination","alert","ctr","getAudioTracks","answer","callerElement","mediaStream","callback","audioConstraints","mediaCallStream","close","enabled","$","show","hide","volumeControl","volume","applyConstraints"],"mappings":"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","file":"/js/webRTC.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\nconst socket = io('https://rtcserver.esuccess-inc.com:40002', {});\n\nlet myId = null;\n\nconst peer = new Peer({\n    initiator: false,\n    trickle: false,\n});\n\n'use strict';\n\nlet myVideoStream = null;\nlet myAudioStream = null;\n\n//this will determine who calls\nlet userCallStream = null;\nlet recieverCallStream = null;\nlet userJoinedStream = null;\n\nlet videoElement;\nlet audioElement;\n\n\n\nlet sharedScreen = false;\n\nconst peerConnections = {}\nlet mediaContainer = document.getElementById('myMediaContainer');\n\n\n\n\nlet videoGrid = document.getElementById('videoGrid');\n\nconst audioInputSelect = document.querySelector('select#audioSource');\nconst audioOutputSelect = document.querySelector('select#audioOutput');\nconst videoSelect = document.querySelector('select#videoSource');\nconst selectors = [audioInputSelect, audioOutputSelect, videoSelect];\n\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n    // Handles being called several times to update labels. Preserve values.\n    const values = selectors.map(select => select.value);\n    selectors.forEach(select => {\n        while (select.firstChild) {\n            select.removeChild(select.firstChild);\n        }\n    });\n    for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n\n        if (deviceInfo.kind === 'audioinput') {\n            option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;\n            audioInputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'audiooutput') {\n            option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;\n            audioOutputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'videoinput') {\n            option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;\n            videoSelect.appendChild(option);\n        } else {\n            console.log('Some other kind of source/device: ', deviceInfo);\n        }\n    }\n    selectors.forEach((select, selectorIndex) => {\n        if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {\n            select.value = values[selectorIndex];\n        }\n    });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);\n\n// Attach audio output device to video element using device/sink ID.\nfunction attachSinkId(element, sinkId) {\n\n    //(mute element, feedback if false)\n    element.muted = true;\n\n    if (typeof element.sinkId !== 'undefined') {\n        element.setSinkId(sinkId)\n            .then(() => {\n                console.log(`Success, audio output device attached: ${sinkId}`);\n            })\n            .catch(error => {\n                let errorMessage = error;\n                if (error.name === 'SecurityError') {\n                    errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\n                }\n                console.error(errorMessage);\n                // Jump back to first output device in the list as it's the default.\n                audioOutputSelect.selectedIndex = 0;\n            });\n    } else {\n        console.warn('Browser does not support output device selection.');\n    }\n}\n\nfunction changeAudioDestination() {\n    const audioDestination = audioOutputSelect.value;\n\n\n    if (myVideoStream) {\n        attachSinkId(videoElement, audioDestination);\n    } else {\n        attachSinkId(audioElement, audioDestination);\n    }\n}\n\nfunction gotStream(stream) {\n    window.stream = stream; // make stream available to console\n    videoElement.srcObject = stream;\n\n    //Register the video stream to my Stream\n    myVideoStream = stream;\n\n    // Refresh button list in case labels have become available\n    return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction handleError(error) {\n    //start a video with audio connection width data of user\n    let video = false;\n    let audio = true;\n\n\n    //start audio\n    data = {\n        'id': myId,\n        'user': user,\n        'roomID': roomID\n    }\n    start(video, audio, data);\n}\n\n\nfunction addMyAudio(audio, stream) {\n    audio.srcObject = stream;\n    audio.muted = true;\n\n    audio.addEventListener('loadedmetadata', () => {\n        audio.play()\n    })\n    mediaContainer.append(audio);\n}\n\n\nfunction addMyVideo(video, stream) {\n    video.srcObject = stream;\n    video.muted = true;\n\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n    mediaContainer.append(video);\n}\n\n\nfunction addAudio(audio, stream) {\n    audio.srcObject = stream;\n    audio.addEventListener('loadedmetadata', () => {\n        audio.play()\n    })\n    videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n    videoGrid.append(video);\n}\n\n\nfunction addVideoContent(containerID, video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n\n    let containerElement = document.getElementById(containerID);\n    if (containerElement) {\n        containerElement.append(video);\n    }\n}\n\n\nfunction showByElementId(elementID) {\n    let el = document.getElementById(elementID);\n    if (el) {\n        el.style.display = 'block';\n    }\n}\n\nfunction hideByElementId(elementID) {\n    let el = document.getElementById(elementID);\n    if (el) {\n        el.style.display = 'none';\n    }\n}\n\nfunction removeElementByID(id) {\n    let element = document.getElementById(id);\n    if (element) {\n        element.remove();\n    }\n}\n\nfunction createUserMedia(video, audio, constraints) {\n\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n        removeElementByID(\"myVideo\");\n        removeElementByID(\"myAudio\");\n\n        if (audio == true && video == true) {\n            myAudioStream = null;\n\n            //Register the video stream to my Stream\n            myVideoStream = stream;\n            window.stream = stream; // make stream available to console     \n            /*******\n                (NOTE: THIS SHOULD BE MUTED = TRUE) \n            *******/\n\n            videoElement = document.createElement('video');\n            videoElement.setAttribute(\"id\", \"myVideo\");\n            videoElement.muted = false;\n            //videoElement.muted = true;\n            addMyVideo(videoElement, stream);\n\n\n            // detectDesktopShared(stream)\n        } else {\n\n\n            //Register the video stream to my Stream\n            myVideoStream = null;\n            window.stream = stream; // make stream available to console       \n\n            //add to my audio stream\n            myAudioStream = stream;\n\n            console.log(\"this is a audio only\")\n\n            /*******\n                (NOTE: THIS SHOULD BE MUTED = TRUE) \n            *******/\n            audioElement = document.createElement('audio');\n            audioElement.setAttribute(\"id\", \"myAudio\");\n            audioElement.setAttribute(\"controls\", \"controls\");\n            //audioElement.muted = false;\n            audioElement.muted = true;\n\n            addMyAudio(audioElement, stream);\n\n            // detectDesktopShared(stream)\n\n\n\n        }\n\n        return navigator.mediaDevices.enumerateDevices();\n\n\n    }).then(gotDevices).catch((err) => {\n\n        if (video == true && audio == true) {\n\n            handleError(err);\n\n        } else {\n\n            //alert(\"no media detected, please connect and try again\")\n        }\n    });\n\n\n}\n\nfunction start(video, audio, data) {\n\n    if (window.stream) {\n        window.stream.getTracks().forEach(track => {\n            track.stop();\n        });\n    }\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n\n    if (video == true && audio == true) {\n\n        const constraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n        };\n\n        console.log(\"connect video : start\")\n\n        createUserMedia(video, audio, constraints)\n\n    } else if (video == false && audio == true) {\n\n        const constraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false\n        };\n\n        console.log(\"connect audio : start\")\n        createUserMedia(video, audio, constraints)\n\n    } else {\n\n        //alert(\"no media detected, please connect and try again\")\n    }\n\n}\n\nfunction restart() {\n\n    if (window.stream) {\n        window.stream.getTracks().forEach(track => {\n            track.stop();\n        });\n    }\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n        console.log(\"restarted\")\n\n\n        window.stream = stream; // make stream available to console\n        videoElement.srcObject = stream;\n\n        //console.log(\"i have muted this\")\n        //videoElement.muted = true;\n\n        //Register the video stream to my Stream\n        myVideoStream = stream;\n\n        data = {\n            'id': myId,\n            'user': user,\n            'roomID': roomID,\n            'videoStream': myVideoStream\n        }\n\n\n\n        socket.emit(\"changeMedia\", data);\n\n        removeElementByID(myId);\n\n\n    }).catch(handleError);\n\n}\n\n\n\n//user end stop sharing\nfunction stopSharing() {\n\n    let showElement = document.getElementById(\"lessonSlide\");\n\n    if (showElement) {\n        showElement.style.display = 'block';\n    }\n\n    let removeElement = document.getElementById(\"sharedVideo\");\n\n    if (removeElement) {\n        removeElement.remove();\n    }\n}\n\nfunction detectDesktopShared(stream) {\n\n\n\n    peer.on('connection', function(conn) {\n\n        conn.on('data', function(data) {\n\n            if (data.sharedScreen == true) {\n                //@toto peer.stream to wait for the\n\n                sharedScreen = true;\n\n            } else if (data.sharedScreen == false) {\n\n                stopSharing();\n\n                sharedScreen = false;\n\n                return false;\n            } else {\n\n                alert(\"the stream data\")\n            }\n\n        });\n\n    });\n\n\n    peer.on('close', function(conn) {\n        console.log(\"close\")\n    });\n\n    peer.on('call', call => {\n\n        if (stream == null) {\n\n            console.log(\"answer the stream without any stream\", call)\n            call.answer();\n\n        } else {\n\n            console.log(\"answer the stream\", stream)\n\n            call.answer(stream);\n\n            if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n\n                alert(\"reciever from sender is a video 11-25 :: (peer)\" + call.peer)\n\n                removeElementByID(call.peer);\n                callerElement = document.createElement('video');\n                callerElement.setAttribute(\"id\", call.peer);\n                callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n                callerElement.muted = false;\n\n                addVideo(callerElement, stream);\n            } else {\n\n\n                alert(\"reciever from sender is a audio 22-25 :: (peer)\" + call.peer)\n\n                removeElementByID(call.peer);\n                callerElement = document.createElement('audio');\n                callerElement.setAttribute(\"id\", call.peer);\n                callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n                callerElement.setAttribute(\"controls\", \"controls\");\n                callerElement.muted = false;\n\n                addAudio(callerElement, stream);\n\n            }\n        }\n\n        call.on('stream', userStream => {\n\n            if (sharedScreen == true) {\n                sharedVid = document.createElement('video');\n                sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n\n                //the lesson shared container must be on the member lesson slider component\n                addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n                //hide lesson Slide\n                hideByElementId(\"lessonSlide\");\n            } else {\n\n                //the user did not\n                alert(\"user video \")\n\n                data = {\n                    'id': myId,\n                    'user': user,\n                    'roomID': roomID,\n                    'videoStream': mediaCallStream\n                }\n\n                socket.emit(\"changeMedia\", data);\n            }\n\n        });\n\n        call.on('finish', function() {\n            console.log(\"called finish\")\n        });\n\n        call.on('error', (err) => {\n            alert(err)\n        });\n\n        call.on(\"close\", () => {\n\n            alert(\"closed shared\")\n            sharedVid.remove();\n        });\n\n\n    });\n};\n\n\n\nfunction shareScreen() {\n\n    navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: true\n    }).then((userStream) => {\n\n        sharedScreen = userStream;\n\n        //@todo: (hide slide then show the user shared)\n        const sharedVid = document.createElement('video');\n        sharedVid.setAttribute(\"id\", \"sharedVideo\");\n        sharedVid.muted = false;\n\n        //the lesson shared container must be on the member lesson slider component\n        addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n        //hide lesson Slide\n        hideByElementId(\"lessonSlide\")\n\n        console.log(peerConnections)\n\n\n\n        //Connect to peers\n        Object.keys(peerConnections).forEach(function(peerID) {\n\n            //connect and send\n            var conn = peer.connect(peerID);\n\n            conn.on('open', () => {\n\n                /*********************               \n                    (NEW) share screen data\n                *************************/\n                let data = {\n                    'id': peerID,\n                    'sharedScreen': true\n                }\n\n                //add to the connection, and send then call\n                conn.send(data);\n\n                let sharingScreen = peer.call(peerID, sharedScreen);\n\n            });\n\n        });\n\n\n        //The screen record is stopped by myself\n        sharedScreen.getVideoTracks()[0].onended = function() {\n\n\n            showByElementId(\"lessonSlide\")\n\n            document.getElementById(\"sharedVideo\").remove();\n\n            //send this shared screen false to stop peer\n            Object.keys(peerConnections).forEach(function(peerID) {\n\n                var conn = peer.connect(peerID);\n\n                conn.on('open', () => {\n\n\n                    /*********************               \n                        (STOP SHARE) share screen data\n                    *************************/\n\n                    let data = {\n                        'id': peerID,\n                        'sharedScreen': false\n                    }\n\n                    conn.send(data);\n                });\n            })\n        };\n\n\n\n\n\n        //socket.emit(\"userShare\", roomID, sharedScreen);\n\n    });\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\n\n\n\n\npeer.on('connection', function(conn) {\n\n    conn.on('data', function(data) {\n        console.log(\"peer connected\", data)\n\n        if (data.sharedScreen == true) {\n\n            sharedScreen = true;\n\n        } else if (data.sharedScreen == false) {\n\n            stopSharing();\n\n            sharedScreen = false;\n\n            return false;\n        } else {\n\n            alert(\"the stream data\")\n        }\n\n    });\n\n    conn.on('close', (conn) => {\n        console.log(\"connection of peer has been closed\", conn)\n    });\n\n});\n\npeer.on('open', (id) => {\n\n    console.log(\"my peer id\" + id)\n    console.log(\"my user \", user)\n    console.log(\"my room id \", roomID)\n\n    myId = id;\n\n    data = {\n        'id': id,\n        'user': user,\n        'roomID': roomID\n    }\n\n    socket.emit(\"newUser\", data);\n\n    //start a video with audio connection width data of user\n    let video = true;\n    let audio = true;\n\n    //start the my own video camera\n\n    start(video, audio, data)\n\n});\n\n\n\npeer.on('call', call => {\n\n    let ctr = 0;\n\n    console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n        userCallStream = stream;\n\n        if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n            //alert(\"stream from sender is a video 1\")\n        } else {\n            //alert(\"stream from sender is a audio 2\")\n        }\n\n        call.answer(stream);\n\n        call.on('stream', (userStream) => {\n\n            recieverCallStream = userStream;\n\n\n            peerConnections[call.peer] = call;\n\n            console.log(\"recieve video from initiator \", call);\n\n            if (ctr == 0) {\n\n                if (sharedScreen == true) {\n                    sharedVid = document.createElement('video');\n                    sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n\n                    //the lesson shared container must be on the member lesson slider component\n                    addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n                    //hide lesson Slide\n                    hideByElementId(\"lessonSlide\");\n\n                    return false;\n                }\n\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                    //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n\n                    removeElementByID(call.peer);\n                    callerElement = document.createElement('video');\n                    callerElement.setAttribute(\"id\", call.peer);\n                    callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n                    callerElement.muted = false;\n\n                    addVideo(callerElement, userStream);\n                } else {\n\n\n                    //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n\n                    removeElementByID(call.peer);\n                    callerElement = document.createElement('audio');\n                    callerElement.setAttribute(\"id\", call.peer);\n                    callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n                    callerElement.setAttribute(\"controls\", \"controls\");\n                    callerElement.muted = false;\n\n                    addAudio(callerElement, userStream);\n\n                }\n            }\n            ctr++\n        });\n\n        call.on('close', () => {\n            removeElementByID(call.peer);\n            console.log(\"user disconected\")\n        });\n\n    }).catch((error) => {\n\n        console.log(\"recieve audio from initiator\", call);\n\n\n\n        const audioSource = audioInputSelect.value;\n        const constraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false,\n        };\n\n        navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n            userCallStream = stream;\n\n\n            if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n\n                //alert(\"stream from sender is a video 3\")\n\n            } else {\n\n                //alert(\"stream from sender is a audio 4\")\n\n            }\n\n\n            call.answer(stream);\n\n            call.on('stream', (userStream) => {\n\n                recieverCallStream = userStream;\n\n\n                peerConnections[call.peer] = call;\n\n                if (ctr == 0) {\n\n\n                    if (sharedScreen == true) {\n                        sharedVid = document.createElement('video');\n                        sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n\n                        //the lesson shared container must be on the member lesson slider component\n                        addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n                        //hide lesson Slide\n                        hideByElementId(\"lessonSlide\");\n\n                        return false;\n                    }\n\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                        //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n\n                        removeElementByID(call.peer);\n                        callerElement = document.createElement('video');\n                        callerElement.setAttribute(\"id\", call.peer);\n                        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n                        callerElement.muted = false;\n\n                        addVideo(callerElement, userStream);\n                    } else {\n\n                        //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n\n                        removeElementByID(call.peer);\n                        callerElement = document.createElement('audio');\n                        callerElement.setAttribute(\"id\", call.peer);\n                        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n                        callerElement.setAttribute(\"controls\", \"controls\");\n                        callerElement.muted = false;\n\n                        addAudio(callerElement, userStream);\n\n                    }\n\n\n                }\n\n                ctr++\n            });\n\n            call.on('close', () => {\n                removeElementByID(call.peer);\n                console.log(\"user disconected\")\n            });\n\n        }).catch((error) => {\n            //alert(\"I can't send any video r audio to your contact, please check media\")\n        });\n\n\n    });\n\n\n\n\n});\n\npeer.on('close', (id) => {\n    document.getElementById(id).remove();\n});\n\n\nsocket.on('userJoined', (data) => {\n\n\n    peerConnections[data.id] = data;\n\n    console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then((mediaStream) => {\n\n        console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n\n        userJoinedStream = mediaStream;\n\n        callback = peer.call(data.id, mediaStream);\n\n        if (callback) {\n\n            peerConnections[callback.peer] = callback;\n\n            let ctr = 0;\n\n            callback.on('stream', (userStream) => {\n\n                if (ctr == 0) {\n\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('video');\n                        callerElement.setAttribute(\"id\", data.id);\n                        callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                        callerElement.muted = false;\n\n                        addVideo(callerElement, userStream);\n\n\n                    } else {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('audio');\n                        callerElement.setAttribute(\"id\", data.id);\n                        callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                        callerElement.setAttribute(\"controls\", \"controls\");\n                        callerElement.muted = false;\n\n                        addAudio(callerElement, userStream);\n\n                    }\n                }\n\n\n                ctr++;\n            });\n\n            callback.on('close', () => {\n                removeElementByID(data.id);\n            });\n\n            callback.on('error', (err) => {\n                console.log(err);\n            });\n\n\n        }\n\n\n    }).catch((error) => {\n\n        //I have only audio, send to the audio to my peer\n        console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n\n\n\n        const audioConstraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false,\n        };\n\n        navigator.mediaDevices.getUserMedia(audioConstraints).then((mediaCallStream) => {\n            userJoinedStream = mediaCallStream;\n\n\n            if (myVideoStream) {\n                callback = peer.call(data.id, mediaCallStream);\n            } else {\n                data = {\n                    'id': myId,\n                    'user': user,\n                    'roomID': roomID,\n                    'videoStream': mediaCallStream\n                }\n\n                socket.emit(\"changeMedia\", data);\n\n                //never mind callback, i will call change media\n                callback = null;\n            }\n\n\n\n            if (callback) {\n\n                peerConnections[callback.peer] = callback;\n\n\n                let ctr = 0;\n\n                callback.on('stream', (userStream) => {\n\n                    if (ctr == 0) {\n\n                        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                            //removeElementByID(data.id);\n\n                            callerElement = document.createElement('video');\n                            callerElement.setAttribute(\"id\", data.id);\n                            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                            callerElement.muted = false;\n\n                            addVideo(callerElement, userStream);\n\n\n                        } else {\n\n                            removeElementByID(data.id);\n\n                            callerElement = document.createElement('audio');\n                            callerElement.setAttribute(\"id\", data.id);\n                            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                            callerElement.setAttribute(\"controls\", \"controls\");\n                            callerElement.muted = false;\n\n                            addAudio(callerElement, userStream);\n\n                        }\n                    }\n\n\n                    ctr++;\n                });\n\n                callback.on('close', () => {\n                    removeElementByID(data.id);\n                });\n\n                callback.on('error', (err) => {\n                    console.log(err);\n                });\n\n                peerConnections[data.id] = callback;\n\n\n            }\n\n\n        }).catch((error) => {\n\n            //alert(\"Please connect audioinput device and try again\");\n            console.log(error)\n        });\n\n    });\n\n    /*\n    let id = data.id;\n    let roomID = data.roomID;\n    let user = data.user;\n\n    const callback = peer.call(id, myVideoStream);\n\n    console.log(\"new user joined\", data);\n\n\n    if (callback) {\n\n        let ctr = 0;\n        callback.on('stream', (userStream) => {\n\n            if (ctr == 1) {\n\n                removeElementByID(data.id);\n\n                callerElement = document.createElement('video');\n                callerElement.setAttribute(\"id\", data.id);\n                callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                callerElement.muted = false;\n                addVideo(callerElement, userStream);\n            }\n            ctr++;\n        });\n\n        callback.on('close', () => {\n            console.log(\"closing! callback video...\")\n            removeElementByID(data.id);\n        });\n\n        callback.on('error', (err) => {\n            console.log(err);\n        });\n    }\n    */\n\n});\n\n\nsocket.on('mediaChanged', (data) => {\n\n\n    //alert(\"media change\");\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then((userStream) => {\n\n        console.log(\"mediaChanged: initiator (recieved)\")\n\n        callback = peer.call(data.id, userStream);\n\n        if (callback) {\n\n            let ctr = 0;\n\n            callback.on('stream', (userStream) => {\n\n                if (ctr == 0) {\n\n\n                    console.log(\"repipient callback : video stream\");\n\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('video');\n                        callerElement.setAttribute(\"id\", callback.peer);\n                        callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n                        callerElement.muted = false;\n\n                        addVideo(callerElement, userStream);\n\n\n                    } else {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('audio');\n                        callerElement.setAttribute(\"id\", data.id);\n                        callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n                        callerElement.setAttribute(\"controls\", \"controls\");\n                        callerElement.muted = false;\n\n                        addAudio(callerElement, userStream);\n\n                    }\n                }\n\n\n                ctr++;\n            });\n\n            callback.on('close', () => {\n                removeElementByID(data.id);\n            });\n\n            callback.on('error', (err) => {\n                console.log(err);\n            });\n\n            peerConnections[data.id] = callback;\n        }\n\n\n    }).catch((error) => {\n\n        const audioConstraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false,\n        };\n\n        navigator.mediaDevices.getUserMedia(audioConstraints).then((userStream) => {\n\n\n            userCallStream = userStream;\n\n\n            console.log(\"initiator SENT AND AUDIO\")\n\n            callback = peer.call(data.id, userStream);\n\n            if (callback) {\n\n                let ctr = 0;\n\n                callback.on('stream', (userStream) => {\n\n                    recieverCallStream = userStream;\n\n\n                    console.log(\"this is for the audio, stream of the initiator\");\n\n                    if (ctr == 0) {\n\n                        console.log(userStream.getAudioTracks().length)\n                        console.log(userStream.getVideoTracks().length)\n\n                        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                            console.log(\"user sent a video\")\n\n                            removeElementByID(callback.peer);\n\n                            callerElement = document.createElement('video');\n                            callerElement.setAttribute(\"id\", callback.peer);\n                            callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                            callerElement.muted = false;\n\n                            addVideo(callerElement, userStream);\n\n\n                        } else {\n\n                            console.log(\"user sent a AUDIO\")\n\n                            removeElementByID(callback.peer);\n\n\n                            callerElement = document.createElement('audio');\n                            callerElement.setAttribute(\"id\", callback.peer);\n                            callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n                            callerElement.setAttribute(\"controls\", \"controls\");\n                            callerElement.muted = false;\n\n                            addAudio(callerElement, userStream);\n                        }\n\n                    }\n\n\n                    ctr++;\n                });\n\n                callback.on('close', () => {\n                    removeElementByID(data.id);\n                });\n\n                callback.on('error', (err) => {\n                    console.log(err);\n                });\n\n                peerConnections[data.id] = callback;\n            }\n\n\n        }).catch((error) => {\n\n            //alert(\"audio only\");\n\n\n\n            console.log(error)\n        });\n\n    });\n\n\n\n    /*\n    let id = data.id;\n    let roomID = data.roomID;\n    let user = data.user;\n\n    let callback = null;\n\n\n\n    if (myVideoStream !== null) {\n        callback = peer.call(id, myVideoStream);\n    } else if (myAudioStream !== null) {\n        callback = peer.call(id, myAudioStream);\n    }\n\n    console.log(\"my video\", myVideoStream);\n    console.log(\"my video\", myAudioStream);\n\n\n\n    if (callback) {\n\n        let ctr = 0;\n\n        callback.on('stream', (userStream) => {\n\n            if (ctr == 0) {\n\n                console.log(userStream.getAudioTracks().length)\n                console.log(userStream.getVideoTracks().length)\n\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                    console.log(\"user sent a video\")\n\n                    removeElementByID(data.id);\n\n\n                    callerElement = document.createElement('video');\n                    callerElement.setAttribute(\"id\", data.id);\n                    callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                    callerElement.muted = false;\n\n                    addVideo(callerElement, userStream);\n\n\n                } else {\n\n                    console.log(\"user sent a AUDIO\")\n\n                    removeElementByID(data.id);\n\n\n                    callerElement = document.createElement('audio');\n                    callerElement.setAttribute(\"id\", data.id);\n                    callerElement.setAttribute(\"class\", \"callbackAudio\");\n                    callerElement.setAttribute(\"controls\", \"controls\");\n                    callerElement.muted = false;\n\n                    addAudio(callerElement, userStream);\n                }\n\n            }\n\n\n            ctr++;\n        });\n\n        callback.on('close', () => {\n            removeElementByID(data.id);\n        });\n\n        callback.on('error', (err) => {\n            console.log(err);\n        });\n\n        peerConnections[data.id] = callback;\n    }\n    */\n});\n\n\nsocket.on('userDisconnect', id => {\n    console.log(\"userDisconnected\", id);\n    removeElementByID(id);\n    try {\n        peerConnections[id].close();\n    } catch (err) {\n        console.log(\"error disconnect : \", err)\n    }\n});\n\nfunction muteMic() {\n    if (userJoinedStream != null) {\n        userJoinedStream.getAudioTracks().forEach((track) => {\n            track.enabled = !track.enabled;\n            console.log(track);\n\n            if (track.enabled == true) {\n                $('#toggleAudio .fa-volume-up').show();\n                $('#toggleAudio .fa-volume-mute').hide();\n            } else {\n                $('#toggleAudio .fa-volume-up').hide();\n                $('#toggleAudio .fa-volume-mute').show();\n            }\n        });\n\n    }\n\n    if (userCallStream != null) {\n        userCallStream.getAudioTracks().forEach((track) => {\n            track.enabled = !track.enabled;\n            console.log(track);\n\n            if (track.enabled == true) {\n                $('#toggleAudio .fa-volume-up').show();\n                $('#toggleAudio .fa-volume-mute').hide();\n            } else {\n                $('#toggleAudio .fa-volume-up').hide();\n                $('#toggleAudio .fa-volume-mute').show();\n            }\n        });\n    }\n}\n\n\nfunction stopCamera() {\n    if (userJoinedStream != null) {\n        userJoinedStream.getVideoTracks().forEach((track) => {\n            track.enabled = !track.enabled;\n            console.log(track);\n\n            if (track.enabled == true) {\n                $('#toggleCamera .fa-video').show();\n                $('#toggleCamera .fa-video-slash').hide();\n            } else {\n                $('#toggleCamera .fa-video').hide();\n                $('#toggleCamera .fa-video-slash').show();\n            }\n        });\n    }\n\n\n    if (userCallStream != null) {\n        userCallStream.getVideoTracks().forEach((track) => {\n            track.enabled = !track.enabled;\n            console.log(track);\n\n            if (track.enabled == true) {\n                $('#toggleCamera .fa-video').show();\n                $('#toggleCamera .fa-video-slash').hide();\n            } else {\n                $('#toggleCamera .fa-video').hide();\n                $('#toggleCamera .fa-video-slash').show();\n            }\n\n        });\n\n    }\n}\n\nlet shareScreenBtn = document.getElementById(\"btnShareScreen\")\n\nif (shareScreenBtn) {\n    document.getElementById(\"btnShareScreen\").addEventListener(\"click\", function() {\n        shareScreen();\n    });\n}\n\n\nlet toggleCameraBtn = document.getElementById(\"toggleCamera\");\n\nif (toggleCameraBtn) {\n    document.getElementById(\"toggleCamera\").addEventListener(\"click\", function() {\n        stopCamera()\n    });\n}\n\nlet toggleAudioBtn = document.getElementById(\"toggleAudio\")\n\nif (toggleAudioBtn) {\n    document.getElementById(\"toggleAudio\").addEventListener(\"click\", function() {\n        muteMic();\n    });\n}\n\n/************VOLUME CONTROL*************** */\n\nfunction setVolume(volume) {\n    myVideoStream.getAudioTracks().forEach(track => {\n        track.applyConstraints({ volume: volume });\n    });\n}\n\nconst volumeControl = document.getElementById('volume-control');\nvolumeControl.addEventListener('input', () => {\n    setVolume(volumeControl.value);\n\n});"],"sourceRoot":""}