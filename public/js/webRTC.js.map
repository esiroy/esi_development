{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/js/webRTC.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","myVideoStream","socket","io","peer","Peer","initiator","trickle","peerConnections","mediaContainer","document","getElementById","videoGrid","audioInputSelect","querySelector","audioOutputSelect","videoSelect","selectors","gotDevices","deviceInfos","values","map","select","forEach","firstChild","removeChild","length","deviceInfo","option","createElement","deviceId","kind","text","label","appendChild","console","log","selectorIndex","Array","slice","childNodes","some","handleError","error","data","myId","user","roomID","start","addAudio","audio","stream","srcObject","addEventListener","play","append","addVideo","video","removeElementByID","id","element","remove","createUserMedia","constraints","navigator","mediaDevices","getUserMedia","then","window","videoElement","setAttribute","muted","addMyVideo","addMyAudio","enumerateDevices","err","getTracks","track","stop","audioSource","videoSource","exact","undefined","restart","emit","disabled","HTMLMediaElement","onchange","sinkId","audioDestination","setSinkId","errorMessage","selectedIndex","warn","on","conn","ctr","getAudioTracks","getVideoTracks","answer","userStream","callerElement","mediaStream","callback","audioConstraints","mediaCallStream","close"],"mappings":"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","file":"/js/webRTC.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n\nconst socket = io('https://rtcserver.esuccess-inc.com:40002', {});\n\nconst peer = new Peer({\n    initiator: false,\n    trickle: false,\n});\n\n'use strict';\nlet myVideoStream;\nlet myAudioStream;\n\n\nconst peerConnections = {}\n\n\nlet mediaContainer = document.getElementById('myMediaContainer');\n\n\nlet videoGrid = document.getElementById('videoGrid');\n\nconst audioInputSelect = document.querySelector('select#audioSource');\nconst audioOutputSelect = document.querySelector('select#audioOutput');\nconst videoSelect = document.querySelector('select#videoSource');\nconst selectors = [audioInputSelect, audioOutputSelect, videoSelect];\n\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n    // Handles being called several times to update labels. Preserve values.\n    const values = selectors.map(select => select.value);\n    selectors.forEach(select => {\n        while (select.firstChild) {\n            select.removeChild(select.firstChild);\n        }\n    });\n    for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n        if (deviceInfo.kind === 'audioinput') {\n            option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;\n            audioInputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'audiooutput') {\n            option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;\n            audioOutputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'videoinput') {\n            option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;\n            videoSelect.appendChild(option);\n        } else {\n            console.log('Some other kind of source/device: ', deviceInfo);\n        }\n    }\n    selectors.forEach((select, selectorIndex) => {\n        if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {\n            select.value = values[selectorIndex];\n        }\n    });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);\n\n// Attach audio output device to video element using device/sink ID.\nfunction attachSinkId(element, sinkId) {\n    if (typeof element.sinkId !== 'undefined') {\n        element.setSinkId(sinkId)\n            .then(() => {\n                console.log(`Success, audio output device attached: ${sinkId}`);\n            })\n            .catch(error => {\n                let errorMessage = error;\n                if (error.name === 'SecurityError') {\n                    errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\n                }\n                console.error(errorMessage);\n                // Jump back to first output device in the list as it's the default.\n                audioOutputSelect.selectedIndex = 0;\n            });\n    } else {\n        console.warn('Browser does not support output device selection.');\n    }\n}\n\nfunction changeAudioDestination() {\n    const audioDestination = audioOutputSelect.value;\n    attachSinkId(videoElement, audioDestination);\n}\n\nfunction gotStream(stream) {\n    window.stream = stream; // make stream available to console\n    videoElement.srcObject = stream;\n\n    //Register the video stream to my Stream\n    myVideoStream = stream;\n\n    // Refresh button list in case labels have become available\n    return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction handleError(error) {\n    //start a video with audio connection width data of user\n    let video = false;\n    let audio = true;\n\n\n    //start audio\n    data = {\n        'id': myId,\n        'user': user,\n        'roomID': roomID\n    }\n    start(video, audio, data);\n}\n\n\nfunction addMyAudio(audio, stream) {\n    audio.srcObject = stream;\n    audio.addEventListener('loadedmetadata', () => {\n        audio.play()\n    })\n    mediaContainer.append(audio);\n}\n\n\nfunction addMyVideo(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n    mediaContainer.append(video);\n}\n\n\nfunction addAudio(audio, stream) {\n    audio.srcObject = stream;\n    audio.addEventListener('loadedmetadata', () => {\n        audio.play()\n    })\n    videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n    video.srcObject = stream;\n    video.addEventListener('loadedmetadata', () => {\n        video.play()\n    })\n    videoGrid.append(video);\n}\n\nfunction removeElementByID(id) {\n    let element = document.getElementById(id);\n    if (element) {\n        element.remove();\n    }\n}\n\nfunction createUserMedia(video, audio, constraints) {\n\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n        removeElementByID(\"myVideo\");\n        removeElementByID(\"myAudio\");\n\n        if (audio == true && video == true) {\n\n            myAudioStream = null;\n\n            //Register the video stream to my Stream\n            myVideoStream = stream;\n            window.stream = stream; // make stream available to console       \n\n\n            console.log(\"this is a video\");\n\n            videoElement = document.createElement('video');\n            videoElement.setAttribute(\"id\", \"myVideo\");\n            videoElement.muted = true;\n            addMyVideo(videoElement, stream);\n\n        } else {\n\n\n            //Register the video stream to my Stream\n            myVideoStream = null;\n\n            window.stream = stream; // make stream available to console       \n            myAudioStream = stream;\n\n            console.log(\"this is a audio only\")\n\n            audio = document.createElement('audio');\n            audio.setAttribute(\"id\", \"myAudio\");\n            audio.setAttribute(\"controls\", \"controls\");\n            audio.muted = true;\n\n            addMyAudio(audio, stream);\n        }\n\n        return navigator.mediaDevices.enumerateDevices();\n\n\n    }).then(gotDevices).catch((err) => {\n\n        if (video == true && audio == true) {\n\n            handleError(err);\n\n        } else {\n\n            //alert(\"no media detected, please connect and try again\")\n        }\n    });\n\n\n}\n\nfunction start(video, audio, data) {\n\n    if (window.stream) {\n\n        window.stream.getTracks().forEach(track => {\n            track.stop();\n        });\n    }\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n\n    if (video == true && audio == true) {\n\n        const constraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n        };\n\n        console.log(\"connect video : start\")\n\n        createUserMedia(video, audio, constraints)\n\n    } else if (video == false && audio == true) {\n\n        const constraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false\n        };\n\n        console.log(\"connect audio : start\")\n        createUserMedia(video, audio, constraints)\n\n    } else {\n\n        //alert(\"no media detected, please connect and try again\")\n    }\n\n}\n\nfunction restart() {\n\n    /*\n       data = {\n           'id': myId,\n           'user': user,\n           'roomID': roomID,\n           'videoStream': myVideoStream\n       }\n\n    */\n\n    start(true, true, data);\n\n\n    socket.emit(\"changeMedia\", data);\n\n\n\n\n    if (window.stream) {\n        window.stream.getTracks().forEach(track => {\n            track.stop();\n        });\n    }\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n        console.log(\"restart\")\n\n\n        window.stream = stream; // make stream available to console\n        videoElement.srcObject = stream;\n\n        //Register the video stream to my Stream\n        myVideoStream = stream;\n\n        data = {\n            'id': myId,\n            'user': user,\n            'roomID': roomID,\n            'videoStream': myVideoStream\n        }\n\n\n\n        socket.emit(\"changeMedia\", data);\n\n        removeElementByID(myId);\n\n\n    }).catch(handleError);\n\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\n\n\n\n\npeer.on('connection', function(conn) {\n    conn.on('data', function(data) {\n        console.log(\"peer connected\", data)\n    });\n    conn.on('close', () => {\n        //alert(\"close\")\n    });\n});\n\npeer.on('open', (id) => {\n\n    console.log(\"my peer id\" + id)\n    console.log(\"my user \", user)\n    console.log(\"my room id \", roomID)\n\n    myId = id;\n\n    data = {\n        'id': id,\n        'user': user,\n        'roomID': roomID\n    }\n\n    socket.emit(\"newUser\", data);\n\n    //start a video with audio connection width data of user\n    let video = true;\n    let audio = true;\n\n    //start the my own video camera\n\n    start(video, audio, data)\n\n});\n\n\n\npeer.on('call', call => {\n\n    let ctr = 0;\n\n    console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n\n\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n        if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n            //alert(\"stream from sender is a video 1\")\n        } else {\n            //alert(\"stream from sender is a audio 2\")\n        }\n\n\n        call.answer(stream);\n\n        call.on('stream', (userStream) => {\n\n            console.log(\"recieve video from initiator\");\n\n            if (ctr == 0) {\n\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                    //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n\n                    removeElementByID(call.peer);\n                    callerElement = document.createElement('video');\n                    callerElement.setAttribute(\"id\", call.peer);\n                    callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n                    callerElement.muted = false;\n\n                    addVideo(callerElement, userStream);\n                } else {\n\n\n                    //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n\n                    removeElementByID(call.peer);\n                    callerElement = document.createElement('audio');\n                    callerElement.setAttribute(\"id\", call.peer);\n                    callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n                    callerElement.setAttribute(\"controls\", \"controls\");\n                    callerElement.muted = false;\n\n                    addAudio(callerElement, userStream);\n\n                }\n            }\n            ctr++\n        });\n\n        call.on('close', () => {\n            removeElementByID(call.peer);\n            console.log(\"user disconected\")\n        });\n\n    }).catch((error) => {\n\n        console.log(\"recieve audio from initiator\");\n\n        const audioSource = audioInputSelect.value;\n        const constraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false,\n        };\n\n        navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\n\n            if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n\n                //alert(\"stream from sender is a video 3\")\n\n            } else {\n\n                //alert(\"stream from sender is a audio 4\")\n\n            }\n\n\n            call.answer(stream);\n\n            call.on('stream', (userStream) => {\n\n                if (ctr == 0) {\n\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                        //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n\n                        removeElementByID(call.peer);\n                        callerElement = document.createElement('video');\n                        callerElement.setAttribute(\"id\", call.peer);\n                        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n                        callerElement.muted = false;\n\n                        addVideo(callerElement, userStream);\n                    } else {\n\n                        //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n\n                        removeElementByID(call.peer);\n                        callerElement = document.createElement('audio');\n                        callerElement.setAttribute(\"id\", call.peer);\n                        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n                        callerElement.setAttribute(\"controls\", \"controls\");\n                        callerElement.muted = false;\n\n                        addAudio(callerElement, userStream);\n\n                    }\n\n\n                }\n\n                ctr++\n            });\n\n            call.on('close', () => {\n                removeElementByID(call.peer);\n                console.log(\"user disconected\")\n            });\n\n        }).catch((error) => {\n            //alert(\"I can't send any video r audio to your contact, please check media\")\n        });\n\n\n    });\n\n\n\n\n});\n\npeer.on('close', (id) => {\n    document.getElementById(id).remove();\n});\n\n\nsocket.on('userJoined', (data) => {\n\n\n    console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then((mediaStream) => {\n\n        console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n        callback = peer.call(data.id, mediaStream);\n\n        if (callback) {\n\n            let ctr = 0;\n\n            callback.on('stream', (userStream) => {\n\n                if (ctr == 0) {\n\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('video');\n                        callerElement.setAttribute(\"id\", data.id);\n                        callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                        callerElement.muted = false;\n\n                        addVideo(callerElement, userStream);\n\n\n                    } else {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('audio');\n                        callerElement.setAttribute(\"id\", data.id);\n                        callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                        callerElement.setAttribute(\"controls\", \"controls\");\n                        callerElement.muted = false;\n\n                        addAudio(callerElement, userStream);\n\n                    }\n                }\n\n\n                ctr++;\n            });\n\n            callback.on('close', () => {\n                removeElementByID(data.id);\n            });\n\n            callback.on('error', (err) => {\n                console.log(err);\n            });\n\n            peerConnections[data.id] = callback;\n        }\n\n\n    }).catch((error) => {\n\n        //I have only audio, send to the audio to my peer\n        console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n\n\n\n        const audioConstraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false,\n        };\n\n        navigator.mediaDevices.getUserMedia(audioConstraints).then((mediaCallStream) => {\n\n            if (myVideoStream) {\n\n\n                callback = peer.call(data.id, mediaCallStream);\n\n            } else {\n\n                data = {\n                    'id': myId,\n                    'user': user,\n                    'roomID': roomID,\n                    'videoStream': mediaCallStream\n                }\n\n                socket.emit(\"changeMedia\", data);\n\n                //never mind callback, i will call change media\n                callback = null;\n            }\n\n\n            if (callback) {\n\n                let ctr = 0;\n\n                callback.on('stream', (userStream) => {\n\n                    if (ctr == 0) {\n\n                        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                            //removeElementByID(data.id);\n\n                            callerElement = document.createElement('video');\n                            callerElement.setAttribute(\"id\", data.id);\n                            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                            callerElement.muted = false;\n\n                            addVideo(callerElement, userStream);\n\n\n                        } else {\n\n                            removeElementByID(data.id);\n\n                            callerElement = document.createElement('audio');\n                            callerElement.setAttribute(\"id\", data.id);\n                            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n                            callerElement.setAttribute(\"controls\", \"controls\");\n                            callerElement.muted = false;\n\n                            addAudio(callerElement, userStream);\n\n                        }\n                    }\n\n\n                    ctr++;\n                });\n\n                callback.on('close', () => {\n                    removeElementByID(data.id);\n                });\n\n                callback.on('error', (err) => {\n                    console.log(err);\n                });\n\n                peerConnections[data.id] = callback;\n            }\n\n\n        }).catch((error) => {\n\n            //alert(\"Please connect audioinput device and try again\");\n            console.log(error)\n        });\n\n    });\n\n    /*\n    let id = data.id;\n    let roomID = data.roomID;\n    let user = data.user;\n\n    const callback = peer.call(id, myVideoStream);\n\n    console.log(\"new user joined\", data);\n\n\n    if (callback) {\n\n        let ctr = 0;\n        callback.on('stream', (userStream) => {\n\n            if (ctr == 1) {\n\n                removeElementByID(data.id);\n\n                callerElement = document.createElement('video');\n                callerElement.setAttribute(\"id\", data.id);\n                callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                callerElement.muted = false;\n                addVideo(callerElement, userStream);\n            }\n            ctr++;\n        });\n\n        callback.on('close', () => {\n            console.log(\"closing! callback video...\")\n            removeElementByID(data.id);\n        });\n\n        callback.on('error', (err) => {\n            console.log(err);\n        });\n    }\n    */\n\n});\n\n\nsocket.on('mediaChanged', (data) => {\n\n\n    //alert(\"media change\");\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n        audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n        video: { deviceId: videoSource ? { exact: videoSource } : undefined }\n    };\n\n    navigator.mediaDevices.getUserMedia(constraints).then((userStream) => {\n\n        console.log(\"mediaChanged: initiator (recieved)\")\n\n        callback = peer.call(data.id, userStream);\n\n        if (callback) {\n\n            let ctr = 0;\n\n            callback.on('stream', (userStream) => {\n\n                if (ctr == 0) {\n\n\n                    console.log(\"repipient callback : video stream\");\n\n                    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('video');\n                        callerElement.setAttribute(\"id\", callback.peer);\n                        callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n                        callerElement.muted = false;\n\n                        addVideo(callerElement, userStream);\n\n\n                    } else {\n\n                        removeElementByID(data.id);\n\n                        callerElement = document.createElement('audio');\n                        callerElement.setAttribute(\"id\", data.id);\n                        callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n                        callerElement.setAttribute(\"controls\", \"controls\");\n                        callerElement.muted = false;\n\n                        addAudio(callerElement, userStream);\n\n                    }\n                }\n\n\n                ctr++;\n            });\n\n            callback.on('close', () => {\n                removeElementByID(data.id);\n            });\n\n            callback.on('error', (err) => {\n                console.log(err);\n            });\n\n            peerConnections[data.id] = callback;\n        }\n\n\n    }).catch((error) => {\n\n        const audioConstraints = {\n            audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\n            video: false,\n        };\n\n        navigator.mediaDevices.getUserMedia(audioConstraints).then((userStream) => {\n\n            console.log(\"initiator SENT AND AUDIO\")\n\n            callback = peer.call(data.id, userStream);\n\n            if (callback) {\n\n                let ctr = 0;\n\n                callback.on('stream', (userStream) => {\n\n\n                    console.log(\"this is for the audio, stream of the initiator\");\n\n                    if (ctr == 0) {\n\n                        console.log(userStream.getAudioTracks().length)\n                        console.log(userStream.getVideoTracks().length)\n\n                        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                            console.log(\"user sent a video\")\n\n                            removeElementByID(callback.peer);\n\n                            callerElement = document.createElement('video');\n                            callerElement.setAttribute(\"id\", callback.peer);\n                            callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                            callerElement.muted = false;\n\n                            addVideo(callerElement, userStream);\n\n\n                        } else {\n\n                            console.log(\"user sent a AUDIO\")\n\n                            removeElementByID(callback.peer);\n\n\n                            callerElement = document.createElement('audio');\n                            callerElement.setAttribute(\"id\", callback.peer);\n                            callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n                            callerElement.setAttribute(\"controls\", \"controls\");\n                            callerElement.muted = false;\n\n                            addAudio(callerElement, userStream);\n                        }\n\n                    }\n\n\n                    ctr++;\n                });\n\n                callback.on('close', () => {\n                    removeElementByID(data.id);\n                });\n\n                callback.on('error', (err) => {\n                    console.log(err);\n                });\n\n                peerConnections[data.id] = callback;\n            }\n\n\n        }).catch((error) => {\n\n            //alert(\"audio only\");\n\n\n\n            console.log(error)\n        });\n\n    });\n\n\n\n    /*\n    let id = data.id;\n    let roomID = data.roomID;\n    let user = data.user;\n\n    let callback = null;\n\n\n\n    if (myVideoStream !== null) {\n        callback = peer.call(id, myVideoStream);\n    } else if (myAudioStream !== null) {\n        callback = peer.call(id, myAudioStream);\n    }\n\n    console.log(\"my video\", myVideoStream);\n    console.log(\"my video\", myAudioStream);\n\n\n\n    if (callback) {\n\n        let ctr = 0;\n\n        callback.on('stream', (userStream) => {\n\n            if (ctr == 0) {\n\n                console.log(userStream.getAudioTracks().length)\n                console.log(userStream.getVideoTracks().length)\n\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n\n                    console.log(\"user sent a video\")\n\n                    removeElementByID(data.id);\n\n\n                    callerElement = document.createElement('video');\n                    callerElement.setAttribute(\"id\", data.id);\n                    callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                    callerElement.muted = false;\n\n                    addVideo(callerElement, userStream);\n\n\n                } else {\n\n                    console.log(\"user sent a AUDIO\")\n\n                    removeElementByID(data.id);\n\n\n                    callerElement = document.createElement('audio');\n                    callerElement.setAttribute(\"id\", data.id);\n                    callerElement.setAttribute(\"class\", \"callbackAudio\");\n                    callerElement.setAttribute(\"controls\", \"controls\");\n                    callerElement.muted = false;\n\n                    addAudio(callerElement, userStream);\n                }\n\n            }\n\n\n            ctr++;\n        });\n\n        callback.on('close', () => {\n            removeElementByID(data.id);\n        });\n\n        callback.on('error', (err) => {\n            console.log(err);\n        });\n\n        peerConnections[data.id] = callback;\n    }\n    */\n});\n\n\nsocket.on('userDisconnect', id => {\n\n    console.log(\"userDisconnected\", id);\n\n    removeElementByID(id);\n\n    if (peerConnections[id]) {\n        peerConnections[id].close();\n    }\n});"],"sourceRoot":""}