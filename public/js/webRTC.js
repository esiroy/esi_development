/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar myId = null;\nvar peer = new Peer({\n  initiator: false,\n  trickle: false\n});\n'use strict';\n\nvar myVideoStream = null;\nvar myAudioStream = null; //this will determine who calls\n\nvar userCallStream = null;\nvar recieverCallStream = null;\nvar userJoinedStream = null; //Elements\n\nvar videoElement;\nvar audioElement; //Share Screen\n\nvar sharedScreen = false;\nvar peerConnections = {};\nvar mediaContainer = document.getElementById('myMediaContainer');\nvar videoGrid = document.getElementById('videoGrid'); //Source\n\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {//console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError); // Attach audio output device to video element using device/sink ID.\n\nfunction attachSinkId(element, sinkId) {\n  //(mute element, feedback if false)\n  element.muted = true;\n\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {//console.log(`Success, audio output device attached: ${sinkId}`);\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n\n      console.error(errorMessage); // Jump back to first output device in the list as it's the default.\n\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n\n  if (myVideoStream) {\n    attachSinkId(videoElement, audioDestination);\n  } else {\n    attachSinkId(audioElement, audioDestination);\n  }\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n\n  videoElement.srcObject = stream; //Register the video stream to my Stream\n\n  myVideoStream = stream; // Refresh button list in case labels have become available\n\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction handleError(error) {\n  //start a video with audio connection width data of user\n  var video = false;\n  var audio = true; //start audio\n\n  data = {\n    'id': myId,\n    'user': user,\n    'roomID': roomID\n  };\n  start(video, audio, data);\n}\n\nfunction addMyAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.muted = true;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  mediaContainer.append(audio);\n}\n\nfunction addMyVideo(video, stream) {\n  video.srcObject = stream;\n  video.muted = true;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  mediaContainer.append(video);\n}\n\nfunction addAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\n\nfunction addVideoContent(containerID, video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  var containerElement = document.getElementById(containerID);\n\n  if (containerElement) {\n    containerElement.append(video);\n  }\n}\n\nfunction showByElementId(elementID) {\n  var el = document.getElementById(elementID);\n\n  if (el) {\n    el.style.display = 'block';\n  }\n}\n\nfunction hideByElementId(elementID) {\n  var el = document.getElementById(elementID);\n\n  if (el) {\n    el.style.display = 'none';\n  }\n}\n\nfunction removeElementByID(id) {\n  var element = document.getElementById(id);\n\n  if (element) {\n    element.remove();\n  }\n}\n\nfunction createUserMedia(video, audio, constraints) {\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    removeElementByID(\"myVideo\");\n    removeElementByID(\"myAudio\");\n\n    if (audio == true && video == true) {\n      myAudioStream = null; //Register the video stream to my Stream\n\n      myVideoStream = stream;\n      window.stream = stream; // make stream available to console     \n\n      /*******\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \n      *******/\n\n      videoElement = document.createElement('video');\n      videoElement.setAttribute(\"id\", \"myVideo\");\n      videoElement.muted = false; //videoElement.muted = true;\n\n      addMyVideo(videoElement, stream); // detectDesktopShared(stream)\n    } else {\n      //Register the video stream to my Stream\n      myVideoStream = null;\n      window.stream = stream; // make stream available to console       \n      //add to my audio stream\n\n      myAudioStream = stream; //console.log(\"this is a audio only\")\n\n      /*******\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \n      *******/\n\n      audioElement = document.createElement('audio');\n      audioElement.setAttribute(\"id\", \"myAudio\");\n      audioElement.setAttribute(\"controls\", \"controls\"); //audioElement.muted = false;\n\n      audioElement.muted = true;\n      addMyAudio(audioElement, stream); // detectDesktopShared(stream)\n    }\n\n    return navigator.mediaDevices.enumerateDevices();\n  }).then(gotDevices)[\"catch\"](function (err) {\n    if (video == true && audio == true) {\n      handleError(err);\n    } else {//alert(\"no media detected, please connect and try again\")\n    }\n  });\n}\n\nfunction start(video, audio, data) {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n\n  if (video == true && audio == true) {\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: {\n        deviceId: videoSource ? {\n          exact: videoSource\n        } : undefined\n      }\n    }; //console.log(\"connect video : start\")\n\n    createUserMedia(video, audio, constraints);\n  } else if (video == false && audio == true) {\n    var _constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    }; //console.log(\"connect audio : start\")\n\n    createUserMedia(video, audio, _constraints);\n  } else {//alert(\"no media detected, please connect and try again\")\n  }\n}\n\nfunction restart() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    //console.log(\"restarted\")\n    window.stream = stream; // make stream available to console\n\n    videoElement.srcObject = stream; //console.log(\"i have muted this\")\n    //videoElement.muted = true;\n    //Register the video stream to my Stream\n\n    myVideoStream = stream;\n    data = {\n      'id': myId,\n      'user': user,\n      'roomID': roomID,\n      'videoStream': myVideoStream\n    };\n    socket.emit(\"changeMedia\", data);\n    removeElementByID(myId);\n  })[\"catch\"](handleError);\n} //user end stop sharing\n\n\nfunction stopSharing() {\n  var showElement = document.getElementById(\"lessonSlide\");\n\n  if (showElement) {\n    showElement.style.display = 'block';\n  }\n\n  var removeElement = document.getElementById(\"sharedVideo\");\n\n  if (removeElement) {\n    removeElement.remove();\n  }\n}\n\nfunction detectDesktopShared(stream) {\n  peer.on('connection', function (conn) {\n    conn.on('data', function (data) {\n      if (data.sharedScreen == true) {\n        //@toto peer.stream to wait for the\n        sharedScreen = true;\n      } else if (data.sharedScreen == false) {\n        stopSharing();\n        sharedScreen = false;\n        return false;\n      } else {\n        alert(\"the stream data\");\n      }\n    });\n  });\n  peer.on('close', function (conn) {//console.log(\"close\")\n  });\n  peer.on('call', function (call) {\n    if (stream == null) {\n      //console.log(\"answer the stream without any stream\", call)\n      call.answer();\n    } else {\n      //console.log(\"answer the stream\", stream)\n      call.answer(stream);\n\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        alert(\"reciever from sender is a video 11-25 :: (peer)\" + call.peer);\n        removeElementByID(call.peer);\n        callerElement = document.createElement('video');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n        callerElement.muted = false;\n        addVideo(callerElement, stream);\n      } else {\n        alert(\"reciever from sender is a audio 22-25 :: (peer)\" + call.peer);\n        removeElementByID(call.peer);\n        callerElement = document.createElement('audio');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n        callerElement.setAttribute(\"controls\", \"controls\");\n        callerElement.muted = false;\n        addAudio(callerElement, stream);\n      }\n    }\n\n    call.on('stream', function (userStream) {\n      if (sharedScreen == true) {\n        sharedVid = document.createElement('video');\n        sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n        addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n        hideByElementId(\"lessonSlide\");\n      } else {\n        //the user did not\n        alert(\"user video \");\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n      }\n    });\n    call.on('finish', function () {//console.log(\"called finish\")\n    });\n    call.on('error', function (err) {\n      alert(err);\n    });\n    call.on(\"close\", function () {\n      alert(\"closed shared\");\n      sharedVid.remove();\n    });\n  });\n}\n\n;\n\nfunction shareScreen() {\n  navigator.mediaDevices.getDisplayMedia({\n    video: true,\n    audio: true\n  }).then(function (userStream) {\n    sharedScreen = userStream; //@todo: (hide slide then show the user shared)\n\n    var sharedVid = document.createElement('video');\n    sharedVid.setAttribute(\"id\", \"sharedVideo\");\n    sharedVid.muted = false; //the lesson shared container must be on the member lesson slider component\n\n    addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n    hideByElementId(\"lessonSlide\"); //Connect to peers\n\n    Object.keys(peerConnections).forEach(function (peerID) {\n      //connect and send\n      var conn = peer.connect(peerID);\n      conn.on('open', function () {\n        /*********************               \n            (NEW) share screen data\n        *************************/\n        var data = {\n          'id': peerID,\n          'sharedScreen': true\n        }; //add to the connection, and send then call\n\n        conn.send(data);\n        var sharingScreen = peer.call(peerID, sharedScreen);\n      });\n    }); //The screen record is stopped by myself\n\n    sharedScreen.getVideoTracks()[0].onended = function () {\n      showByElementId(\"lessonSlide\");\n      document.getElementById(\"sharedVideo\").remove(); //send this shared screen false to stop peer\n\n      Object.keys(peerConnections).forEach(function (peerID) {\n        var conn = peer.connect(peerID);\n        conn.on('open', function () {\n          /*********************               \n              (STOP SHARE) share screen data\n          *************************/\n          var data = {\n            'id': peerID,\n            'sharedScreen': false\n          };\n          conn.send(data);\n        });\n      });\n    }; //socket.emit(\"userShare\", roomID, sharedScreen);\n\n  });\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\npeer.on('connection', function (conn) {\n  conn.on('data', function (data) {\n    //console.log(\"peer connected\", data)\n    if (data.sharedScreen == true) {\n      sharedScreen = true;\n    } else if (data.sharedScreen == false) {\n      stopSharing();\n      sharedScreen = false;\n      return false;\n    } else {\n      alert(\"the stream data\");\n    }\n  });\n  conn.on('close', function (conn) {//console.log(\"connection of peer has been closed\", conn)\n  });\n});\npeer.on('open', function (id) {\n  //console.log(\"my peer id\" + id)\n  //console.log(\"my user \", user)\n  //console.log(\"my room id \", roomID)\n  myId = id;\n  data = {\n    'id': id,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data); //start a video with audio connection width data of user\n\n  var video = true;\n  var audio = true; //start the my own video camera\n\n  start(video, audio, data);\n});\npeer.on('call', function (call) {\n  var ctr = 0; //console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    userCallStream = stream;\n\n    if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {//alert(\"stream from sender is a video 1\")\n    } else {//alert(\"stream from sender is a audio 2\")\n    }\n\n    call.answer(stream);\n    call.on('stream', function (userStream) {\n      recieverCallStream = userStream;\n      peerConnections[call.peer] = call; //console.log(\"recieve video from initiator \", call);\n\n      if (ctr == 0) {\n        if (sharedScreen == true) {\n          sharedVid = document.createElement('video');\n          sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n          addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n          hideByElementId(\"lessonSlide\");\n          return false;\n        }\n\n        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n          //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n          removeElementByID(call.peer);\n          callerElement = document.createElement('video');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n          callerElement.muted = false;\n          addVideo(callerElement, userStream);\n        } else {\n          //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n          removeElementByID(call.peer);\n          callerElement = document.createElement('audio');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n          callerElement.setAttribute(\"controls\", \"controls\");\n          callerElement.muted = false;\n          addAudio(callerElement, userStream);\n        }\n      }\n\n      ctr++;\n    });\n    call.on('close', function () {\n      removeElementByID(call.peer); //console.log(\"user disconected\")\n    });\n  })[\"catch\"](function (error) {\n    //console.log(\"recieve audio from initiator\", call);\n    var audioSource = audioInputSelect.value;\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      userCallStream = stream;\n\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {//alert(\"stream from sender is a video 3\")\n      } else {//alert(\"stream from sender is a audio 4\")\n      }\n\n      call.answer(stream);\n      call.on('stream', function (userStream) {\n        recieverCallStream = userStream;\n        peerConnections[call.peer] = call;\n\n        if (ctr == 0) {\n          if (sharedScreen == true) {\n            sharedVid = document.createElement('video');\n            sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n            addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n            hideByElementId(\"lessonSlide\");\n            return false;\n          }\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      call.on('close', function () {\n        removeElementByID(call.peer); //console.log(\"user disconected\")\n      });\n    })[\"catch\"](function (error) {//alert(\"I can't send any video r audio to your contact, please check media\")\n    });\n  });\n});\npeer.on('close', function (id) {\n  document.getElementById(id).remove();\n});\nsocket.on('userJoined', function (data) {\n  peerConnections[data.id] = data; //console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n    //console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n    userJoinedStream = mediaStream;\n    callback = peer.call(data.id, mediaStream);\n\n    if (callback) {\n      peerConnections[callback.peer] = callback;\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {//console.log(err);\n      });\n    }\n  })[\"catch\"](function (error) {\n    //I have only audio, send to the audio to my peer\n    //console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (mediaCallStream) {\n      userJoinedStream = mediaCallStream;\n\n      if (myVideoStream) {\n        callback = peer.call(data.id, mediaCallStream);\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data); //never mind callback, i will call change media\n\n        callback = null;\n      }\n\n      if (callback) {\n        peerConnections[callback.peer] = callback;\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          if (ctr == 0) {\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //removeElementByID(data.id);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              removeElementByID(data.id);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {//console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {//alert(\"Please connect audioinput device and try again\");\n      // //console.log(error)\n    });\n  });\n});\nsocket.on('mediaChanged', function (data) {\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (userStream) {\n    //console.log(\"mediaChanged: initiator (recieved)\")\n    callback = peer.call(data.id, userStream);\n\n    if (callback) {\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          //console.log(\"recipient callback : video stream\");\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", callback.peer);\n            callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {//console.log(err);\n      });\n      peerConnections[data.id] = callback;\n    }\n  })[\"catch\"](function (error) {\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (userStream) {\n      userCallStream = userStream; //console.log(\"initiator SENT AND AUDIO\")\n\n      callback = peer.call(data.id, userStream);\n\n      if (callback) {\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          recieverCallStream = userStream; //console.log(\"this is for the audio, stream of the initiator\");\n\n          if (ctr == 0) {\n            //console.log(userStream.getAudioTracks().length)\n            //console.log(userStream.getVideoTracks().length)\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //console.log(\"user sent a video\")\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              //console.log(\"user sent a AUDIO\")\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {//console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {//alert(\"audio only\");\n      //console.log(error)\n    });\n  });\n});\nsocket.on('userDisconnect', function (id) {\n  //console.log(\"userDisconnected\", id);\n  removeElementByID(id);\n\n  try {\n    peerConnections[id].close();\n  } catch (err) {//console.log(\"error disconnect : \", err)\n  }\n});\n\nfunction toggleMic() {\n  if (userJoinedStream != null) {\n    userJoinedStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled; //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleAudio .fa-volume-up').show();\n        $('#toggleAudio .fa-volume-mute').hide();\n      } else {\n        $('#toggleAudio .fa-volume-up').hide();\n        $('#toggleAudio .fa-volume-mute').show();\n      }\n    });\n  }\n\n  if (userCallStream != null) {\n    userCallStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled; //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleAudio .fa-volume-up').show();\n        $('#toggleAudio .fa-volume-mute').hide();\n      } else {\n        $('#toggleAudio .fa-volume-up').hide();\n        $('#toggleAudio .fa-volume-mute').show();\n      }\n    });\n  }\n}\n\nfunction toggleCamera() {\n  if (userJoinedStream != null) {\n    userJoinedStream.getVideoTracks().forEach(function (track) {\n      track.enabled = !track.enabled; //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleCamera .fa-video').show();\n        $('#toggleCamera .fa-video-slash').hide();\n      } else {\n        $('#toggleCamera .fa-video').hide();\n        $('#toggleCamera .fa-video-slash').show();\n      }\n    });\n  }\n\n  if (userCallStream != null) {\n    userCallStream.getVideoTracks().forEach(function (track) {\n      track.enabled = !track.enabled; //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleCamera .fa-video').show();\n        $('#toggleCamera .fa-video-slash').hide();\n      } else {\n        $('#toggleCamera .fa-video').hide();\n        $('#toggleCamera .fa-video-slash').show();\n      }\n    });\n  }\n}\n\nvar shareScreenBtn = document.getElementById(\"btnShareScreen\");\n\nif (shareScreenBtn) {\n  document.getElementById(\"btnShareScreen\").addEventListener(\"click\", function () {\n    shareScreen();\n  });\n}\n\nvar toggleCameraBtn = document.getElementById(\"toggleCamera\");\n\nif (toggleCameraBtn) {\n  document.getElementById(\"toggleCamera\").addEventListener(\"click\", function () {\n    toggleCamera();\n  });\n}\n\nvar toggleAudioBtn = document.getElementById(\"toggleAudio\");\n\nif (toggleAudioBtn) {\n  document.getElementById(\"toggleAudio\").addEventListener(\"click\", function () {\n    toggleMic();\n  });\n}\n/************VOLUME CONTROL*************** */\n\n\nfunction setVolume(volume) {\n  myVideoStream.getAudioTracks().forEach(function (track) {\n    track.applyConstraints({\n      volume: volume\n    });\n  });\n}\n\nvar volumeControl = document.getElementById('volume-control');\n\nif (volumeControl) {\n  volumeControl.addEventListener('input', function () {\n    setVolume(volumeControl.value);\n  });\n}\n\nfunction destroyVideoSteam(mediaStream) {\n  mediaStream.getVideoTracks().forEach(function (track) {\n    track.stop();\n  });\n}\n\nfunction destroyAudioStream(audioStream) {\n  audioStream.getAudioTracks().forEach(function (track) {\n    track.stop();\n  });\n}\n/************ END SESSION *************** */\n\n\nfunction destroyUserMediaContainer() {\n  $('.right-fixed').remove();\n}\n\nfunction destroyUserMedia() {\n  return _destroyUserMedia.apply(this, arguments);\n}\n\nfunction _destroyUserMedia() {\n  _destroyUserMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            Object.keys(peerConnections).forEach(function (peerID) {\n              peerConnections[peerID].close();\n            });\n\n            if (myVideoStream != null) {\n              destroyVideoSteam(myVideoStream);\n              destroyAudioStream(myVideoStream);\n            }\n\n            if (myAudioStream != null) {\n              destroyVideoSteam(myAudioStream);\n              destroyAudioStream(myAudioStream);\n            }\n\n            if (userJoinedStream != null) {\n              destroyVideoSteam(userJoinedStream);\n              destroyAudioStream(userJoinedStream);\n            }\n\n            if (userCallStream != null) {\n              destroyVideoSteam(userCallStream);\n              destroyAudioStream(userCallStream);\n            }\n\n            if (recieverCallStream != null) {\n              destroyVideoSteam(recieverCallStream);\n              destroyAudioStream(recieverCallStream);\n            }\n\n            destroyUserMediaContainer();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _destroyUserMedia.apply(this, arguments);\n}\n\nvar destroySessionMediaBtn = document.getElementById('destroy-session-media');\n\nif (destroySessionMediaBtn) {\n  destroySessionMediaBtn.addEventListener('click', function () {\n    destroyUserMedia();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 7:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /var/www/html/esi_development/resources/js/webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });