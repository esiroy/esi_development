/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nvar socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar myId = null;\nvar peer = new Peer({\n  initiator: false,\n  trickle: false\n});\n'use strict';\nvar myVideoStream = null;\nvar myAudioStream = null;\n\n//this will determine who calls\nvar userCallStream = null;\nvar recieverCallStream = null;\nvar userJoinedStream = null;\n\n//Elements\nvar videoElement;\nvar audioElement;\n\n//Share Screen\nvar sharedScreen = false;\nvar peerConnections = {};\nvar mediaContainer = document.getElementById('myMediaContainer');\nvar videoGrid = document.getElementById('videoGrid');\n\n//Source\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError);\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {\n      //console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\n// Attach audio output device to video element using device/sink ID.\nfunction attachSinkId(element, sinkId) {\n  //(mute element, feedback if false)\n  element.muted = true;\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {\n      //console.log(`Success, audio output device attached: ${sinkId}`);\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n      console.error(errorMessage);\n      // Jump back to first output device in the list as it's the default.\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n  if (myVideoStream) {\n    attachSinkId(videoElement, audioDestination);\n  } else {\n    attachSinkId(audioElement, audioDestination);\n  }\n}\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n  videoElement.srcObject = stream;\n\n  //Register the video stream to my Stream\n  myVideoStream = stream;\n\n  // Refresh button list in case labels have become available\n  return navigator.mediaDevices.enumerateDevices();\n}\nfunction handleError(error) {\n  //start a video with audio connection width data of user\n  var video = false;\n  var audio = true;\n\n  //start audio\n  data = {\n    'id': myId,\n    'user': user,\n    'roomID': roomID\n  };\n  start(video, audio, data);\n}\nfunction addMyAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.muted = true;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  mediaContainer.append(audio);\n}\nfunction addMyVideo(video, stream) {\n  video.srcObject = stream;\n  video.muted = true;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  mediaContainer.append(video);\n}\nfunction addAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  videoGrid.append(audio);\n}\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\nfunction addVideoContent(containerID, video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  var containerElement = document.getElementById(containerID);\n  if (containerElement) {\n    containerElement.append(video);\n  }\n}\nfunction showByElementId(elementID) {\n  var el = document.getElementById(elementID);\n  if (el) {\n    el.style.display = 'block';\n  }\n}\nfunction hideByElementId(elementID) {\n  var el = document.getElementById(elementID);\n  if (el) {\n    el.style.display = 'none';\n  }\n}\nfunction removeElementByID(id) {\n  var element = document.getElementById(id);\n  if (element) {\n    element.remove();\n  }\n}\nfunction createUserMedia(video, audio, constraints) {\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    removeElementByID(\"myVideo\");\n    removeElementByID(\"myAudio\");\n    if (audio == true && video == true) {\n      myAudioStream = null;\n\n      //Register the video stream to my Stream\n      myVideoStream = stream;\n      window.stream = stream; // make stream available to console     \n      /*******\r\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n      *******/\n\n      videoElement = document.createElement('video');\n      videoElement.setAttribute(\"id\", \"myVideo\");\n      videoElement.muted = false;\n      //videoElement.muted = true;\n      addMyVideo(videoElement, stream);\n\n      // detectDesktopShared(stream)\n    } else {\n      //Register the video stream to my Stream\n      myVideoStream = null;\n      window.stream = stream; // make stream available to console       \n\n      //add to my audio stream\n      myAudioStream = stream;\n\n      //console.log(\"this is a audio only\")\n\n      /*******\r\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n      *******/\n      audioElement = document.createElement('audio');\n      audioElement.setAttribute(\"id\", \"myAudio\");\n      audioElement.setAttribute(\"controls\", \"controls\");\n      //audioElement.muted = false;\n      audioElement.muted = true;\n      addMyAudio(audioElement, stream);\n\n      // detectDesktopShared(stream)\n    }\n\n    return navigator.mediaDevices.enumerateDevices();\n  }).then(gotDevices)[\"catch\"](function (err) {\n    if (video == true && audio == true) {\n      handleError(err);\n    } else {\n\n      //alert(\"no media detected, please connect and try again\")\n    }\n  });\n}\nfunction start(video, audio, data) {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  if (video == true && audio == true) {\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: {\n        deviceId: videoSource ? {\n          exact: videoSource\n        } : undefined\n      }\n    };\n\n    //console.log(\"connect video : start\")\n\n    createUserMedia(video, audio, constraints);\n  } else if (video == false && audio == true) {\n    var _constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n\n    //console.log(\"connect audio : start\")\n    createUserMedia(video, audio, _constraints);\n  } else {\n\n    //alert(\"no media detected, please connect and try again\")\n  }\n}\nfunction restart() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    window.stream = stream; // make stream available to console\n    videoElement.srcObject = stream;\n\n    //console.log(\"i have muted this\")\n    //videoElement.muted = true;\n\n    //Register the video stream to my Stream\n    myVideoStream = stream;\n    data = {\n      'id': myId,\n      'user': user,\n      'roomID': roomID,\n      'videoStream': myVideoStream\n    };\n    socket.emit(\"changeMedia\", data);\n    removeElementByID(myId);\n  })[\"catch\"](handleError);\n}\n\n//user end stop sharing\nfunction stopSharing() {\n  var showElement = document.getElementById(\"lessonSlide\");\n  if (showElement) {\n    showElement.style.display = 'block';\n  }\n  var removeElement = document.getElementById(\"sharedVideo\");\n  if (removeElement) {\n    removeElement.remove();\n  }\n}\nfunction detectDesktopShared(stream) {\n  peer.on('connection', function (conn) {\n    conn.on('data', function (data) {\n      if (data.sharedScreen == true) {\n        sharedScreen = true;\n      } else if (data.sharedScreen == false) {\n        stopSharing();\n        sharedScreen = false;\n        return false;\n      } else {\n        alert(\"the stream data\");\n      }\n    });\n  });\n  peer.on('close', function (conn) {\n    //console.log(\"close\")\n  });\n  peer.on('call', function (call) {\n    if (stream == null) {\n      //console.log(\"answer the stream without any stream\", call)\n      call.answer();\n    } else {\n      //console.log(\"answer the stream\", stream)\n\n      call.answer(stream);\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        removeElementByID(call.peer);\n        callerElement = document.createElement('video');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n        callerElement.muted = false;\n        addVideo(callerElement, stream);\n      } else {\n        removeElementByID(call.peer);\n        callerElement = document.createElement('audio');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n        callerElement.setAttribute(\"controls\", \"controls\");\n        callerElement.muted = false;\n        addAudio(callerElement, stream);\n      }\n    }\n    call.on('stream', function (userStream) {\n      if (sharedScreen == true) {\n        sharedVid = document.createElement('video');\n        sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n        //the lesson shared container must be on the member lesson slider component\n        addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n        //hide lesson Slide\n        hideByElementId(\"lessonSlide\");\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n      }\n    });\n    call.on('finish', function () {\n      //console.log(\"called finish\")\n    });\n    call.on('error', function (err) {\n      alert(err);\n    });\n    call.on(\"close\", function () {\n      sharedVid.remove();\n    });\n  });\n}\n;\nfunction shareScreen() {\n  navigator.mediaDevices.getDisplayMedia({\n    video: true,\n    audio: true\n  }).then(function (userStream) {\n    sharedScreen = userStream;\n\n    //@todo: (hide slide then show the user shared)\n    var sharedVid = document.createElement('video');\n    sharedVid.setAttribute(\"id\", \"sharedVideo\");\n    sharedVid.muted = false;\n\n    //the lesson shared container must be on the member lesson slider component\n    addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n    //hide lesson Slide\n    hideByElementId(\"lessonSlide\");\n\n    //Connect to peers\n    Object.keys(peerConnections).forEach(function (peerID) {\n      //connect and send\n      var conn = peer.connect(peerID);\n      conn.on('open', function () {\n        /*********************               \r\n            (NEW) share screen data\r\n        *************************/\n        var data = {\n          'id': peerID,\n          'sharedScreen': true\n        };\n        //add to the connection, and send then call\n        conn.send(data);\n        var sharingScreen = peer.call(peerID, sharedScreen);\n      });\n    });\n\n    //The screen record is stopped by myself\n    sharedScreen.getVideoTracks()[0].onended = function () {\n      showByElementId(\"lessonSlide\");\n      document.getElementById(\"sharedVideo\").remove();\n      //send this shared screen false to stop peer\n      Object.keys(peerConnections).forEach(function (peerID) {\n        var conn = peer.connect(peerID);\n        conn.on('open', function () {\n          /*********************               \r\n              (STOP SHARE) share screen data\r\n          *************************/\n          var data = {\n            'id': peerID,\n            'sharedScreen': false\n          };\n          conn.send(data);\n        });\n      });\n    };\n\n    //socket.emit(\"userShare\", roomID, sharedScreen);\n  });\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\npeer.on('connection', function (conn) {\n  conn.on('data', function (data) {\n    console.log(\"share connection: peer connected\", data);\n    if (data.sharedScreen == true) {\n      sharedScreen = true;\n    } else if (data.sharedScreen == false) {\n      stopSharing();\n      sharedScreen = false;\n      return false;\n    } else {\n      alert(\"the stream data\");\n    }\n  });\n  conn.on('close', function (conn) {\n    console.log(\"shared video connection of peer has been closed\", conn);\n    var sharedVideo = document.getElementById('sharedVideo');\n\n    // Check if the video element exists before attempting to remove it\n    if (sharedVideo) {\n      // Remove the video element from the DOM\n      sharedVideo.remove();\n    } else {\n      console.log('Element with id \"sharedVideo\" not found.');\n    }\n  });\n});\npeer.on('open', function (id) {\n  //console.log(\"my peer id\" + id)\n  //console.log(\"my user \", user)\n  //console.log(\"my room id \", roomID)\n\n  myId = id;\n  data = {\n    'id': id,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data);\n\n  //start a video with audio connection width data of user\n  var video = true;\n  var audio = true;\n\n  //start the my own video camera\n\n  start(video, audio, data);\n});\npeer.on('call', function (call) {\n  var ctr = 0;\n\n  //console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    userCallStream = stream;\n    if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n      //alert(\"stream from sender is a video 1\")\n    } else {\n      //alert(\"stream from sender is a audio 2\")\n    }\n    call.answer(stream);\n    call.on('stream', function (userStream) {\n      recieverCallStream = userStream;\n      peerConnections[call.peer] = call;\n\n      //console.log(\"recieve video from initiator \", call);\n\n      if (ctr == 0) {\n        if (sharedScreen == true) {\n          sharedVid = document.createElement('video');\n          sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n          //the lesson shared container must be on the member lesson slider component\n          addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n          //hide lesson Slide\n          hideByElementId(\"lessonSlide\");\n          return false;\n        }\n        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n          //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n\n          removeElementByID(call.peer);\n          callerElement = document.createElement('video');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n          callerElement.muted = false;\n          addVideo(callerElement, userStream);\n        } else {\n          //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n\n          removeElementByID(call.peer);\n          callerElement = document.createElement('audio');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n          callerElement.setAttribute(\"controls\", \"controls\");\n          callerElement.muted = false;\n          addAudio(callerElement, userStream);\n        }\n      }\n      ctr++;\n    });\n    call.on('close', function () {\n      removeElementByID(call.peer);\n      //console.log(\"user disconected\")\n    });\n  })[\"catch\"](function (error) {\n    //console.log(\"recieve audio from initiator\", call);\n\n    var audioSource = audioInputSelect.value;\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      userCallStream = stream;\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        //alert(\"stream from sender is a video 3\")\n      } else {\n        //alert(\"stream from sender is a audio 4\")\n      }\n      call.answer(stream);\n      call.on('stream', function (userStream) {\n        recieverCallStream = userStream;\n        peerConnections[call.peer] = call;\n        if (ctr == 0) {\n          if (sharedScreen == true) {\n            sharedVid = document.createElement('video');\n            sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n            //the lesson shared container must be on the member lesson slider component\n            addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n            //hide lesson Slide\n            hideByElementId(\"lessonSlide\");\n            return false;\n          }\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n\n            removeElementByID(call.peer);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n        ctr++;\n      });\n      call.on('close', function () {\n        removeElementByID(call.peer);\n        //console.log(\"user disconected\")\n      });\n    })[\"catch\"](function (error) {\n      //alert(\"I can't send any video r audio to your contact, please check media\")\n    });\n  });\n});\npeer.on('close', function (id) {\n  document.getElementById(id).remove();\n});\nsocket.on('userJoined', function (data) {\n  peerConnections[data.id] = data;\n  console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n    //console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n    userJoinedStream = mediaStream;\n    callback = peer.call(data.id, mediaStream);\n    if (callback) {\n      peerConnections[callback.peer] = callback;\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        //console.log(err);\n      });\n    }\n    checkVideoDisabled();\n    checkAudioMuted();\n  })[\"catch\"](function (error) {\n    //I have only audio, send to the audio to my peer\n    //console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (mediaCallStream) {\n      userJoinedStream = mediaCallStream;\n      if (myVideoStream) {\n        callback = peer.call(data.id, mediaCallStream);\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n\n        //never mind callback, i will call change media\n        callback = null;\n      }\n      if (callback) {\n        peerConnections[callback.peer] = callback;\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          if (ctr == 0) {\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //removeElementByID(data.id);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              removeElementByID(data.id);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          //console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n\n      //alert(\"Please connect audioinput device and try again\");\n      // //console.log(error)\n    });\n    checkVideoDisabled();\n    checkAudioMuted();\n  });\n});\nsocket.on('mediaChanged', function (data) {\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (userStream) {\n    //console.log(\"mediaChanged: initiator (recieved)\")\n\n    callback = peer.call(data.id, userStream);\n    if (callback) {\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          //console.log(\"recipient callback : video stream\");\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", callback.peer);\n            callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        //console.log(err);\n      });\n      peerConnections[data.id] = callback;\n    }\n  })[\"catch\"](function (error) {\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (userStream) {\n      userCallStream = userStream;\n\n      //console.log(\"initiator SENT AND AUDIO\")\n\n      callback = peer.call(data.id, userStream);\n      if (callback) {\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          recieverCallStream = userStream;\n\n          //console.log(\"this is for the audio, stream of the initiator\");\n\n          if (ctr == 0) {\n            //console.log(userStream.getAudioTracks().length)\n            //console.log(userStream.getVideoTracks().length)\n\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //console.log(\"user sent a video\")\n\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              //console.log(\"user sent a AUDIO\")\n\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          //console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n\n      //alert(\"audio only\");\n      //console.log(error)\n    });\n  });\n});\nsocket.on('userDisconnect', function (id) {\n  //console.log(\"userDisconnected\", id);\n  removeElementByID(id);\n  try {\n    peerConnections[id].close();\n  } catch (err) {\n    //console.log(\"error disconnect : \", err)\n  }\n});\nfunction checkAudioMuted() {\n  var muteIcon = document.querySelector('.fa-volume-mute');\n\n  // Check if the 'display' property is set to 'none'\n  if (muteIcon.style.display !== 'none') {\n    // The element with class 'fa-volume-mute' is not hidden\n    console.log('fa-volume-mute is visible, we will mute mic');\n    muteMic();\n  }\n}\nfunction muteMic() {\n  userJoinedStream.getAudioTracks().forEach(function (track) {\n    track.enabled = !track.enabled;\n  });\n}\nfunction toggleMic() {\n  if (userJoinedStream != null) {\n    userJoinedStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleAudio .fa-volume-up').show();\n        $('#toggleAudio .fa-volume-mute').hide();\n      } else {\n        $('#toggleAudio .fa-volume-up').hide();\n        $('#toggleAudio .fa-volume-mute').show();\n      }\n    });\n  }\n  if (userCallStream != null) {\n    userCallStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleAudio .fa-volume-up').show();\n        $('#toggleAudio .fa-volume-mute').hide();\n      } else {\n        $('#toggleAudio .fa-volume-up').hide();\n        $('#toggleAudio .fa-volume-mute').show();\n      }\n    });\n  }\n}\nfunction checkVideoDisabled() {\n  var videoIcon = document.querySelector('.fa-video-slash');\n  if (videoIcon.style.display !== 'none') {\n    console.log('video slash is visible, we will disable video');\n    disableVideo();\n  }\n}\nfunction disableVideo() {\n  userJoinedStream.getVideoTracks().forEach(function (track) {\n    track.enabled = !track.enabled;\n  });\n}\nfunction toggleCamera() {\n  if (userJoinedStream != null) {\n    userJoinedStream.getVideoTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleCamera .fa-video').show();\n        $('#toggleCamera .fa-video-slash').hide();\n      } else {\n        $('#toggleCamera .fa-video').hide();\n        $('#toggleCamera .fa-video-slash').show();\n      }\n    });\n  }\n  if (userCallStream != null) {\n    userCallStream.getVideoTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleCamera .fa-video').show();\n        $('#toggleCamera .fa-video-slash').hide();\n      } else {\n        $('#toggleCamera .fa-video').hide();\n        $('#toggleCamera .fa-video-slash').show();\n      }\n    });\n  }\n}\nvar shareScreenBtn = document.getElementById(\"btnShareScreen\");\nif (shareScreenBtn) {\n  document.getElementById(\"btnShareScreen\").addEventListener(\"click\", function () {\n    shareScreen();\n  });\n}\nvar toggleCameraBtn = document.getElementById(\"toggleCamera\");\nif (toggleCameraBtn) {\n  document.getElementById(\"toggleCamera\").addEventListener(\"click\", function () {\n    toggleCamera();\n  });\n}\nvar toggleAudioBtn = document.getElementById(\"toggleAudio\");\nif (toggleAudioBtn) {\n  document.getElementById(\"toggleAudio\").addEventListener(\"click\", function () {\n    toggleMic();\n  });\n}\n\n/************VOLUME CONTROL*************** */\nfunction setVolume(volume) {\n  myVideoStream.getAudioTracks().forEach(function (track) {\n    track.applyConstraints({\n      volume: volume\n    });\n  });\n}\nvar volumeControl = document.getElementById('volume-control');\nif (volumeControl) {\n  volumeControl.addEventListener('input', function () {\n    setVolume(volumeControl.value);\n  });\n}\nfunction destroyVideoSteam(mediaStream) {\n  mediaStream.getVideoTracks().forEach(function (track) {\n    track.stop();\n  });\n}\nfunction destroyAudioStream(audioStream) {\n  audioStream.getAudioTracks().forEach(function (track) {\n    track.stop();\n  });\n}\n\n/************ END SESSION *************** */\nfunction destroyUserMediaContainer() {\n  $('.right-fixed').remove();\n}\nfunction destroyUserMedia() {\n  return _destroyUserMedia.apply(this, arguments);\n}\nfunction _destroyUserMedia() {\n  _destroyUserMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          Object.keys(peerConnections).forEach(function (peerID) {\n            peerConnections[peerID].close();\n          });\n          if (myVideoStream != null) {\n            destroyVideoSteam(myVideoStream);\n            destroyAudioStream(myVideoStream);\n          }\n          if (myAudioStream != null) {\n            destroyVideoSteam(myAudioStream);\n            destroyAudioStream(myAudioStream);\n          }\n          if (userJoinedStream != null) {\n            destroyVideoSteam(userJoinedStream);\n            destroyAudioStream(userJoinedStream);\n          }\n          if (userCallStream != null) {\n            destroyVideoSteam(userCallStream);\n            destroyAudioStream(userCallStream);\n          }\n          if (recieverCallStream != null) {\n            destroyVideoSteam(recieverCallStream);\n            destroyAudioStream(recieverCallStream);\n          }\n          destroyUserMediaContainer();\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _destroyUserMedia.apply(this, arguments);\n}\nvar destroySessionMediaBtn = document.getElementById('destroy-session-media');\nif (destroySessionMediaBtn) {\n  destroySessionMediaBtn.addEventListener('click', function () {\n    destroyUserMedia();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 6:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\wamp64\www\esi_development\resources\js\webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });