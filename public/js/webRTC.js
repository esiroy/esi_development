/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nvar socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar peer = new Peer({\n  initiator: false,\n  trickle: false\n});\n'use strict';\n\nvar myVideoStream;\nvar myAudioStream;\nvar videoElement;\nvar audioElement;\nvar sharedScreen = false;\nvar peerConnections = {};\nvar mediaContainer = document.getElementById('myMediaContainer');\nvar videoGrid = document.getElementById('videoGrid');\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {\n      console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError); // Attach audio output device to video element using device/sink ID.\n\nfunction attachSinkId(element, sinkId) {\n  //(mute element, feedback if false)\n  element.muted = true;\n\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {\n      console.log(\"Success, audio output device attached: \".concat(sinkId));\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n\n      console.error(errorMessage); // Jump back to first output device in the list as it's the default.\n\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n\n  if (myVideoStream) {\n    attachSinkId(videoElement, audioDestination);\n  } else {\n    attachSinkId(audioElement, audioDestination);\n  }\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n\n  videoElement.srcObject = stream; //Register the video stream to my Stream\n\n  myVideoStream = stream; // Refresh button list in case labels have become available\n\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction handleError(error) {\n  //start a video with audio connection width data of user\n  var video = false;\n  var audio = true; //start audio\n\n  data = {\n    'id': myId,\n    'user': user,\n    'roomID': roomID\n  };\n  start(video, audio, data);\n}\n\nfunction addMyAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.muted = true;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  mediaContainer.append(audio);\n}\n\nfunction addMyVideo(video, stream) {\n  video.srcObject = stream;\n  video.muted = true;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  mediaContainer.append(video);\n}\n\nfunction addAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\n\nfunction addVideoContent(containerID, video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  var containerElement = document.getElementById(containerID);\n\n  if (containerElement) {\n    containerElement.append(video);\n  }\n}\n\nfunction showByElementId(elementID) {\n  var el = document.getElementById(elementID);\n\n  if (el) {\n    el.style.display = 'block';\n  }\n}\n\nfunction hideByElementId(elementID) {\n  var el = document.getElementById(elementID);\n\n  if (el) {\n    el.style.display = 'none';\n  }\n}\n\nfunction removeElementByID(id) {\n  var element = document.getElementById(id);\n\n  if (element) {\n    element.remove();\n  }\n}\n\nfunction createUserMedia(video, audio, constraints) {\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    removeElementByID(\"myVideo\");\n    removeElementByID(\"myAudio\");\n\n    if (audio == true && video == true) {\n      myAudioStream = null; //Register the video stream to my Stream\n\n      myVideoStream = stream;\n      window.stream = stream; // make stream available to console     \n\n      /*******\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \n      *******/\n\n      videoElement = document.createElement('video');\n      videoElement.setAttribute(\"id\", \"myVideo\");\n      videoElement.muted = false; //videoElement.muted = true;\n\n      addMyVideo(videoElement, stream); // detectDesktopShared(stream)\n    } else {\n      //Register the video stream to my Stream\n      myVideoStream = null;\n      window.stream = stream; // make stream available to console       \n      //add to my audio stream\n\n      myAudioStream = stream;\n      console.log(\"this is a audio only\");\n      /*******\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \n      *******/\n\n      audioElement = document.createElement('audio');\n      audioElement.setAttribute(\"id\", \"myAudio\");\n      audioElement.setAttribute(\"controls\", \"controls\"); //audioElement.muted = false;\n\n      audioElement.muted = true;\n      addMyAudio(audioElement, stream); // detectDesktopShared(stream)\n    }\n\n    return navigator.mediaDevices.enumerateDevices();\n  }).then(gotDevices)[\"catch\"](function (err) {\n    if (video == true && audio == true) {\n      handleError(err);\n    } else {//alert(\"no media detected, please connect and try again\")\n    }\n  });\n}\n\nfunction start(video, audio, data) {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n\n  if (video == true && audio == true) {\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: {\n        deviceId: videoSource ? {\n          exact: videoSource\n        } : undefined\n      }\n    };\n    console.log(\"connect video : start\");\n    createUserMedia(video, audio, constraints);\n  } else if (video == false && audio == true) {\n    var _constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    console.log(\"connect audio : start\");\n    createUserMedia(video, audio, _constraints);\n  } else {//alert(\"no media detected, please connect and try again\")\n  }\n}\n\nfunction restart() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    console.log(\"restarted\");\n    window.stream = stream; // make stream available to console\n\n    videoElement.srcObject = stream; //console.log(\"i have muted this\")\n    //videoElement.muted = true;\n    //Register the video stream to my Stream\n\n    myVideoStream = stream;\n    data = {\n      'id': myId,\n      'user': user,\n      'roomID': roomID,\n      'videoStream': myVideoStream\n    };\n    socket.emit(\"changeMedia\", data);\n    removeElementByID(myId);\n  })[\"catch\"](handleError);\n} //user end stop sharing\n\n\nfunction stopSharing() {\n  var showElement = document.getElementById(\"lessonSlide\");\n\n  if (showElement) {\n    showElement.style.display = 'block';\n  }\n\n  var removeElement = document.getElementById(\"sharedVideo\");\n\n  if (removeElement) {\n    removeElement.remove();\n  }\n}\n\nfunction detectDesktopShared(stream) {\n  peer.on('connection', function (conn) {\n    conn.on('data', function (data) {\n      if (data.sharedScreen == true) {\n        //@toto peer.stream to wait for the\n        sharedScreen = true;\n      } else if (data.sharedScreen == false) {\n        stopSharing();\n        sharedScreen = false;\n        return false;\n      } else {\n        alert(\"the stream data\");\n      }\n    });\n  });\n  peer.on('close', function (conn) {\n    console.log(\"close\");\n  });\n  peer.on('call', function (call) {\n    if (stream == null) {\n      console.log(\"answer the stream without any stream\", call);\n      call.answer();\n    } else {\n      console.log(\"answer the stream\", stream);\n      call.answer(stream);\n\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        alert(\"reciever from sender is a video 11-25 :: (peer)\" + call.peer);\n        removeElementByID(call.peer);\n        callerElement = document.createElement('video');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n        callerElement.muted = false;\n        addVideo(callerElement, stream);\n      } else {\n        alert(\"reciever from sender is a audio 22-25 :: (peer)\" + call.peer);\n        removeElementByID(call.peer);\n        callerElement = document.createElement('audio');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n        callerElement.setAttribute(\"controls\", \"controls\");\n        callerElement.muted = false;\n        addAudio(callerElement, stream);\n      }\n    }\n\n    call.on('stream', function (userStream) {\n      if (sharedScreen == true) {\n        sharedVid = document.createElement('video');\n        sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n        addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n        hideByElementId(\"lessonSlide\");\n      } else {\n        //the user did not\n        alert(\"user video \");\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n      }\n    });\n    call.on('finish', function () {\n      console.log(\"called finish\");\n    });\n    call.on('error', function (err) {\n      alert(err);\n    });\n    call.on(\"close\", function () {\n      alert(\"closed shared\");\n      sharedVid.remove();\n    });\n  });\n}\n\n;\n\nfunction shareScreen() {\n  navigator.mediaDevices.getDisplayMedia({\n    video: true,\n    audio: true\n  }).then(function (userStream) {\n    sharedScreen = userStream; //@todo: (hide slide then show the user shared)\n\n    var sharedVid = document.createElement('video');\n    sharedVid.setAttribute(\"id\", \"sharedVideo\");\n    sharedVid.muted = false; //the lesson shared container must be on the member lesson slider component\n\n    addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n    hideByElementId(\"lessonSlide\");\n    console.log(peerConnections); //Connect to peers\n\n    Object.keys(peerConnections).forEach(function (peerID) {\n      //connect and send\n      var conn = peer.connect(peerID);\n      conn.on('open', function () {\n        /*********************               \n            (NEW) share screen data\n        *************************/\n        var data = {\n          'id': peerID,\n          'sharedScreen': true\n        }; //add to the connection, and send then call\n\n        conn.send(data);\n        var sharingScreen = peer.call(peerID, sharedScreen);\n      });\n    }); //The screen record is stopped by myself\n\n    sharedScreen.getVideoTracks()[0].onended = function () {\n      showByElementId(\"lessonSlide\");\n      document.getElementById(\"sharedVideo\").remove(); //send this shared screen false to stop peer\n\n      Object.keys(peerConnections).forEach(function (peerID) {\n        var conn = peer.connect(peerID);\n        conn.on('open', function () {\n          /*********************               \n              (STOP SHARE) share screen data\n          *************************/\n          var data = {\n            'id': peerID,\n            'sharedScreen': false\n          };\n          conn.send(data);\n        });\n      });\n    }; //socket.emit(\"userShare\", roomID, sharedScreen);\n\n  });\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\npeer.on('connection', function (conn) {\n  conn.on('data', function (data) {\n    console.log(\"peer connected\", data);\n\n    if (data.sharedScreen == true) {\n      sharedScreen = true;\n    } else if (data.sharedScreen == false) {\n      stopSharing();\n      sharedScreen = false;\n      return false;\n    } else {\n      alert(\"the stream data\");\n    }\n  });\n  conn.on('close', function (conn) {\n    console.log(\"connection of peer has been closed\", conn);\n  });\n});\npeer.on('open', function (id) {\n  console.log(\"my peer id\" + id);\n  console.log(\"my user \", user);\n  console.log(\"my room id \", roomID);\n  myId = id;\n  data = {\n    'id': id,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data); //start a video with audio connection width data of user\n\n  var video = true;\n  var audio = true; //start the my own video camera\n\n  start(video, audio, data);\n});\npeer.on('call', function (call) {\n  var ctr = 0;\n  console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {//alert(\"stream from sender is a video 1\")\n    } else {//alert(\"stream from sender is a audio 2\")\n    }\n\n    call.answer(stream);\n    call.on('stream', function (userStream) {\n      peerConnections[call.peer] = call;\n      console.log(\"recieve video from initiator \", call);\n\n      if (ctr == 0) {\n        if (sharedScreen == true) {\n          sharedVid = document.createElement('video');\n          sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n          addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n          hideByElementId(\"lessonSlide\");\n          return false;\n        }\n\n        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n          //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n          removeElementByID(call.peer);\n          callerElement = document.createElement('video');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n          callerElement.muted = false;\n          addVideo(callerElement, userStream);\n        } else {\n          //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n          removeElementByID(call.peer);\n          callerElement = document.createElement('audio');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n          callerElement.setAttribute(\"controls\", \"controls\");\n          callerElement.muted = false;\n          addAudio(callerElement, userStream);\n        }\n      }\n\n      ctr++;\n    });\n    call.on('close', function () {\n      removeElementByID(call.peer);\n      console.log(\"user disconected\");\n    });\n  })[\"catch\"](function (error) {\n    console.log(\"recieve audio from initiator\", call);\n    var audioSource = audioInputSelect.value;\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {//alert(\"stream from sender is a video 3\")\n      } else {//alert(\"stream from sender is a audio 4\")\n      }\n\n      call.answer(stream);\n      call.on('stream', function (userStream) {\n        peerConnections[call.peer] = call;\n\n        if (ctr == 0) {\n          if (sharedScreen == true) {\n            sharedVid = document.createElement('video');\n            sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n            addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n            hideByElementId(\"lessonSlide\");\n            return false;\n          }\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      call.on('close', function () {\n        removeElementByID(call.peer);\n        console.log(\"user disconected\");\n      });\n    })[\"catch\"](function (error) {//alert(\"I can't send any video r audio to your contact, please check media\")\n    });\n  });\n});\npeer.on('close', function (id) {\n  document.getElementById(id).remove();\n});\nsocket.on('userJoined', function (data) {\n  peerConnections[data.id] = data;\n  console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n    console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n    callback = peer.call(data.id, mediaStream);\n\n    if (callback) {\n      peerConnections[callback.peer] = callback;\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        console.log(err);\n      });\n    }\n  })[\"catch\"](function (error) {\n    //I have only audio, send to the audio to my peer\n    console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (mediaCallStream) {\n      if (myVideoStream) {\n        callback = peer.call(data.id, mediaCallStream);\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data); //never mind callback, i will call change media\n\n        callback = null;\n      }\n\n      if (callback) {\n        peerConnections[callback.peer] = callback;\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          if (ctr == 0) {\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //removeElementByID(data.id);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              removeElementByID(data.id);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n      //alert(\"Please connect audioinput device and try again\");\n      console.log(error);\n    });\n  });\n  /*\n  let id = data.id;\n  let roomID = data.roomID;\n  let user = data.user;\n   const callback = peer.call(id, myVideoStream);\n   console.log(\"new user joined\", data);\n    if (callback) {\n       let ctr = 0;\n      callback.on('stream', (userStream) => {\n           if (ctr == 1) {\n               removeElementByID(data.id);\n               callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n          }\n          ctr++;\n      });\n       callback.on('close', () => {\n          console.log(\"closing! callback video...\")\n          removeElementByID(data.id);\n      });\n       callback.on('error', (err) => {\n          console.log(err);\n      });\n  }\n  */\n});\nsocket.on('mediaChanged', function (data) {\n  //alert(\"media change\");\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (userStream) {\n    console.log(\"mediaChanged: initiator (recieved)\");\n    callback = peer.call(data.id, userStream);\n\n    if (callback) {\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          console.log(\"repipient callback : video stream\");\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", callback.peer);\n            callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        console.log(err);\n      });\n      peerConnections[data.id] = callback;\n    }\n  })[\"catch\"](function (error) {\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (userStream) {\n      console.log(\"initiator SENT AND AUDIO\");\n      callback = peer.call(data.id, userStream);\n\n      if (callback) {\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          console.log(\"this is for the audio, stream of the initiator\");\n\n          if (ctr == 0) {\n            console.log(userStream.getAudioTracks().length);\n            console.log(userStream.getVideoTracks().length);\n\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              console.log(\"user sent a video\");\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              console.log(\"user sent a AUDIO\");\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n      //alert(\"audio only\");\n      console.log(error);\n    });\n  });\n  /*\n  let id = data.id;\n  let roomID = data.roomID;\n  let user = data.user;\n   let callback = null;\n     if (myVideoStream !== null) {\n      callback = peer.call(id, myVideoStream);\n  } else if (myAudioStream !== null) {\n      callback = peer.call(id, myAudioStream);\n  }\n   console.log(\"my video\", myVideoStream);\n  console.log(\"my video\", myAudioStream);\n     if (callback) {\n       let ctr = 0;\n       callback.on('stream', (userStream) => {\n           if (ctr == 0) {\n               console.log(userStream.getAudioTracks().length)\n              console.log(userStream.getVideoTracks().length)\n               if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n                   console.log(\"user sent a video\")\n                   removeElementByID(data.id);\n                    callerElement = document.createElement('video');\n                  callerElement.setAttribute(\"id\", data.id);\n                  callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                  callerElement.muted = false;\n                   addVideo(callerElement, userStream);\n                } else {\n                   console.log(\"user sent a AUDIO\")\n                   removeElementByID(data.id);\n                    callerElement = document.createElement('audio');\n                  callerElement.setAttribute(\"id\", data.id);\n                  callerElement.setAttribute(\"class\", \"callbackAudio\");\n                  callerElement.setAttribute(\"controls\", \"controls\");\n                  callerElement.muted = false;\n                   addAudio(callerElement, userStream);\n              }\n           }\n            ctr++;\n      });\n       callback.on('close', () => {\n          removeElementByID(data.id);\n      });\n       callback.on('error', (err) => {\n          console.log(err);\n      });\n       peerConnections[data.id] = callback;\n  }\n  */\n});\nsocket.on('userDisconnect', function (id) {\n  console.log(\"userDisconnected\", id);\n  removeElementByID(id);\n\n  try {\n    peerConnections[id].close();\n  } catch (err) {\n    console.log(\"error disconnect : \", err);\n  }\n});\ndocument.getElementById(\"btnShareScreen\").addEventListener(\"click\", function () {\n  shareScreen();\n});\n/*** TOGGLE MEDIA CABINETS EFFECTS */\n\n$(\".toggleCamera\").click(function () {\n  $('#right-video-sidebar').animate({\n    width: 'toggle'\n  }, 25, function () {// Animation complete.\n  });\n});\n$(\".toggleLiveChat\").click(function () {\n  $('#right-chat-sidebar').animate({\n    width: 'toggle'\n  }, 25, function () {// Animation complete.\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvd2ViUlRDLmpzP2MzMGQiXSwibmFtZXMiOlsic29ja2V0IiwiaW8iLCJwZWVyIiwiUGVlciIsImluaXRpYXRvciIsInRyaWNrbGUiLCJteVZpZGVvU3RyZWFtIiwibXlBdWRpb1N0cmVhbSIsInZpZGVvRWxlbWVudCIsImF1ZGlvRWxlbWVudCIsInNoYXJlZFNjcmVlbiIsInBlZXJDb25uZWN0aW9ucyIsIm1lZGlhQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZpZGVvR3JpZCIsImF1ZGlvSW5wdXRTZWxlY3QiLCJxdWVyeVNlbGVjdG9yIiwiYXVkaW9PdXRwdXRTZWxlY3QiLCJ2aWRlb1NlbGVjdCIsInNlbGVjdG9ycyIsImRpc2FibGVkIiwiSFRNTE1lZGlhRWxlbWVudCIsInByb3RvdHlwZSIsImdvdERldmljZXMiLCJkZXZpY2VJbmZvcyIsInZhbHVlcyIsIm1hcCIsInNlbGVjdCIsInZhbHVlIiwiZm9yRWFjaCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImkiLCJsZW5ndGgiLCJkZXZpY2VJbmZvIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImRldmljZUlkIiwia2luZCIsInRleHQiLCJsYWJlbCIsImFwcGVuZENoaWxkIiwiY29uc29sZSIsImxvZyIsInNlbGVjdG9ySW5kZXgiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImNoaWxkTm9kZXMiLCJzb21lIiwibiIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImVudW1lcmF0ZURldmljZXMiLCJ0aGVuIiwiaGFuZGxlRXJyb3IiLCJhdHRhY2hTaW5rSWQiLCJlbGVtZW50Iiwic2lua0lkIiwibXV0ZWQiLCJzZXRTaW5rSWQiLCJlcnJvciIsImVycm9yTWVzc2FnZSIsIm5hbWUiLCJzZWxlY3RlZEluZGV4Iiwid2FybiIsImNoYW5nZUF1ZGlvRGVzdGluYXRpb24iLCJhdWRpb0Rlc3RpbmF0aW9uIiwiZ290U3RyZWFtIiwic3RyZWFtIiwid2luZG93Iiwic3JjT2JqZWN0IiwidmlkZW8iLCJhdWRpbyIsImRhdGEiLCJteUlkIiwidXNlciIsInJvb21JRCIsInN0YXJ0IiwiYWRkTXlBdWRpbyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwbGF5IiwiYXBwZW5kIiwiYWRkTXlWaWRlbyIsImFkZEF1ZGlvIiwiYWRkVmlkZW8iLCJhZGRWaWRlb0NvbnRlbnQiLCJjb250YWluZXJJRCIsImNvbnRhaW5lckVsZW1lbnQiLCJzaG93QnlFbGVtZW50SWQiLCJlbGVtZW50SUQiLCJlbCIsInN0eWxlIiwiZGlzcGxheSIsImhpZGVCeUVsZW1lbnRJZCIsInJlbW92ZUVsZW1lbnRCeUlEIiwiaWQiLCJyZW1vdmUiLCJjcmVhdGVVc2VyTWVkaWEiLCJjb25zdHJhaW50cyIsImdldFVzZXJNZWRpYSIsInNldEF0dHJpYnV0ZSIsImVyciIsImdldFRyYWNrcyIsInRyYWNrIiwic3RvcCIsImF1ZGlvU291cmNlIiwidmlkZW9Tb3VyY2UiLCJleGFjdCIsInVuZGVmaW5lZCIsInJlc3RhcnQiLCJlbWl0Iiwic3RvcFNoYXJpbmciLCJzaG93RWxlbWVudCIsInJlbW92ZUVsZW1lbnQiLCJkZXRlY3REZXNrdG9wU2hhcmVkIiwib24iLCJjb25uIiwiYWxlcnQiLCJhbnN3ZXIiLCJnZXRBdWRpb1RyYWNrcyIsImdldFZpZGVvVHJhY2tzIiwiY2FsbGVyRWxlbWVudCIsInVzZXJTdHJlYW0iLCJzaGFyZWRWaWQiLCJtZWRpYUNhbGxTdHJlYW0iLCJzaGFyZVNjcmVlbiIsImdldERpc3BsYXlNZWRpYSIsIk9iamVjdCIsImtleXMiLCJwZWVySUQiLCJjb25uZWN0Iiwic2VuZCIsInNoYXJpbmdTY3JlZW4iLCJvbmVuZGVkIiwib25jaGFuZ2UiLCJjdHIiLCJtZWRpYVN0cmVhbSIsImNhbGxiYWNrIiwiYXVkaW9Db25zdHJhaW50cyIsImNsb3NlIiwiJCIsImNsaWNrIiwiYW5pbWF0ZSIsIndpZHRoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQU1BLE1BQU0sR0FBR0MsRUFBRSxDQUFDLDBDQUFELEVBQTZDLEVBQTdDLENBQWpCO0FBRUEsSUFBTUMsSUFBSSxHQUFHLElBQUlDLElBQUosQ0FBUztFQUNsQkMsU0FBUyxFQUFFLEtBRE87RUFFbEJDLE9BQU8sRUFBRTtBQUZTLENBQVQsQ0FBYjtBQUtBOztBQUNBLElBQUlDLGFBQUo7QUFDQSxJQUFJQyxhQUFKO0FBRUEsSUFBSUMsWUFBSjtBQUNBLElBQUlDLFlBQUo7QUFJQSxJQUFJQyxZQUFZLEdBQUcsS0FBbkI7QUFFQSxJQUFNQyxlQUFlLEdBQUcsRUFBeEI7QUFDQSxJQUFJQyxjQUFjLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixrQkFBeEIsQ0FBckI7QUFLQSxJQUFJQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixXQUF4QixDQUFoQjtBQUVBLElBQU1FLGdCQUFnQixHQUFHSCxRQUFRLENBQUNJLGFBQVQsQ0FBdUIsb0JBQXZCLENBQXpCO0FBQ0EsSUFBTUMsaUJBQWlCLEdBQUdMLFFBQVEsQ0FBQ0ksYUFBVCxDQUF1QixvQkFBdkIsQ0FBMUI7QUFDQSxJQUFNRSxXQUFXLEdBQUdOLFFBQVEsQ0FBQ0ksYUFBVCxDQUF1QixvQkFBdkIsQ0FBcEI7QUFDQSxJQUFNRyxTQUFTLEdBQUcsQ0FBQ0osZ0JBQUQsRUFBbUJFLGlCQUFuQixFQUFzQ0MsV0FBdEMsQ0FBbEI7QUFFQUQsaUJBQWlCLENBQUNHLFFBQWxCLEdBQTZCLEVBQUUsWUFBWUMsZ0JBQWdCLENBQUNDLFNBQS9CLENBQTdCOztBQUVBLFNBQVNDLFVBQVQsQ0FBb0JDLFdBQXBCLEVBQWlDO0VBQzdCO0VBQ0EsSUFBTUMsTUFBTSxHQUFHTixTQUFTLENBQUNPLEdBQVYsQ0FBYyxVQUFBQyxNQUFNO0lBQUEsT0FBSUEsTUFBTSxDQUFDQyxLQUFYO0VBQUEsQ0FBcEIsQ0FBZjtFQUNBVCxTQUFTLENBQUNVLE9BQVYsQ0FBa0IsVUFBQUYsTUFBTSxFQUFJO0lBQ3hCLE9BQU9BLE1BQU0sQ0FBQ0csVUFBZCxFQUEwQjtNQUN0QkgsTUFBTSxDQUFDSSxXQUFQLENBQW1CSixNQUFNLENBQUNHLFVBQTFCO0lBQ0g7RUFDSixDQUpEOztFQUtBLEtBQUssSUFBSUUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsS0FBS1IsV0FBVyxDQUFDUyxNQUFsQyxFQUEwQyxFQUFFRCxDQUE1QyxFQUErQztJQUMzQyxJQUFNRSxVQUFVLEdBQUdWLFdBQVcsQ0FBQ1EsQ0FBRCxDQUE5QjtJQUNBLElBQU1HLE1BQU0sR0FBR3ZCLFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBZjtJQUNBRCxNQUFNLENBQUNQLEtBQVAsR0FBZU0sVUFBVSxDQUFDRyxRQUExQjs7SUFFQSxJQUFJSCxVQUFVLENBQUNJLElBQVgsS0FBb0IsWUFBeEIsRUFBc0M7TUFDbENILE1BQU0sQ0FBQ0ksSUFBUCxHQUFjTCxVQUFVLENBQUNNLEtBQVgseUJBQWtDekIsZ0JBQWdCLENBQUNrQixNQUFqQixHQUEwQixDQUE1RCxDQUFkO01BQ0FsQixnQkFBZ0IsQ0FBQzBCLFdBQWpCLENBQTZCTixNQUE3QjtJQUNILENBSEQsTUFHTyxJQUFJRCxVQUFVLENBQUNJLElBQVgsS0FBb0IsYUFBeEIsRUFBdUM7TUFDMUNILE1BQU0sQ0FBQ0ksSUFBUCxHQUFjTCxVQUFVLENBQUNNLEtBQVgsc0JBQStCdkIsaUJBQWlCLENBQUNnQixNQUFsQixHQUEyQixDQUExRCxDQUFkO01BQ0FoQixpQkFBaUIsQ0FBQ3dCLFdBQWxCLENBQThCTixNQUE5QjtJQUNILENBSE0sTUFHQSxJQUFJRCxVQUFVLENBQUNJLElBQVgsS0FBb0IsWUFBeEIsRUFBc0M7TUFDekNILE1BQU0sQ0FBQ0ksSUFBUCxHQUFjTCxVQUFVLENBQUNNLEtBQVgscUJBQThCdEIsV0FBVyxDQUFDZSxNQUFaLEdBQXFCLENBQW5ELENBQWQ7TUFDQWYsV0FBVyxDQUFDdUIsV0FBWixDQUF3Qk4sTUFBeEI7SUFDSCxDQUhNLE1BR0E7TUFDSE8sT0FBTyxDQUFDQyxHQUFSLENBQVksb0NBQVosRUFBa0RULFVBQWxEO0lBQ0g7RUFDSjs7RUFDRGYsU0FBUyxDQUFDVSxPQUFWLENBQWtCLFVBQUNGLE1BQUQsRUFBU2lCLGFBQVQsRUFBMkI7SUFDekMsSUFBSUMsS0FBSyxDQUFDdkIsU0FBTixDQUFnQndCLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQnBCLE1BQU0sQ0FBQ3FCLFVBQWxDLEVBQThDQyxJQUE5QyxDQUFtRCxVQUFBQyxDQUFDO01BQUEsT0FBSUEsQ0FBQyxDQUFDdEIsS0FBRixLQUFZSCxNQUFNLENBQUNtQixhQUFELENBQXRCO0lBQUEsQ0FBcEQsQ0FBSixFQUFnRztNQUM1RmpCLE1BQU0sQ0FBQ0MsS0FBUCxHQUFlSCxNQUFNLENBQUNtQixhQUFELENBQXJCO0lBQ0g7RUFDSixDQUpEO0FBS0g7O0FBRURPLFNBQVMsQ0FBQ0MsWUFBVixDQUF1QkMsZ0JBQXZCLEdBQTBDQyxJQUExQyxDQUErQy9CLFVBQS9DLFdBQWlFZ0MsV0FBakUsRSxDQUVBOztBQUNBLFNBQVNDLFlBQVQsQ0FBc0JDLE9BQXRCLEVBQStCQyxNQUEvQixFQUF1QztFQUVuQztFQUNBRCxPQUFPLENBQUNFLEtBQVIsR0FBZ0IsSUFBaEI7O0VBRUEsSUFBSSxPQUFPRixPQUFPLENBQUNDLE1BQWYsS0FBMEIsV0FBOUIsRUFBMkM7SUFDdkNELE9BQU8sQ0FBQ0csU0FBUixDQUFrQkYsTUFBbEIsRUFDS0osSUFETCxDQUNVLFlBQU07TUFDUlosT0FBTyxDQUFDQyxHQUFSLGtEQUFzRGUsTUFBdEQ7SUFDSCxDQUhMLFdBSVcsVUFBQUcsS0FBSyxFQUFJO01BQ1osSUFBSUMsWUFBWSxHQUFHRCxLQUFuQjs7TUFDQSxJQUFJQSxLQUFLLENBQUNFLElBQU4sS0FBZSxlQUFuQixFQUFvQztRQUNoQ0QsWUFBWSxzRUFBK0RELEtBQS9ELENBQVo7TUFDSDs7TUFDRG5CLE9BQU8sQ0FBQ21CLEtBQVIsQ0FBY0MsWUFBZCxFQUxZLENBTVo7O01BQ0E3QyxpQkFBaUIsQ0FBQytDLGFBQWxCLEdBQWtDLENBQWxDO0lBQ0gsQ0FaTDtFQWFILENBZEQsTUFjTztJQUNIdEIsT0FBTyxDQUFDdUIsSUFBUixDQUFhLG1EQUFiO0VBQ0g7QUFDSjs7QUFFRCxTQUFTQyxzQkFBVCxHQUFrQztFQUM5QixJQUFNQyxnQkFBZ0IsR0FBR2xELGlCQUFpQixDQUFDVyxLQUEzQzs7RUFHQSxJQUFJdkIsYUFBSixFQUFtQjtJQUNmbUQsWUFBWSxDQUFDakQsWUFBRCxFQUFlNEQsZ0JBQWYsQ0FBWjtFQUNILENBRkQsTUFFTztJQUNIWCxZQUFZLENBQUNoRCxZQUFELEVBQWUyRCxnQkFBZixDQUFaO0VBQ0g7QUFDSjs7QUFFRCxTQUFTQyxTQUFULENBQW1CQyxNQUFuQixFQUEyQjtFQUN2QkMsTUFBTSxDQUFDRCxNQUFQLEdBQWdCQSxNQUFoQixDQUR1QixDQUNDOztFQUN4QjlELFlBQVksQ0FBQ2dFLFNBQWIsR0FBeUJGLE1BQXpCLENBRnVCLENBSXZCOztFQUNBaEUsYUFBYSxHQUFHZ0UsTUFBaEIsQ0FMdUIsQ0FPdkI7O0VBQ0EsT0FBT2xCLFNBQVMsQ0FBQ0MsWUFBVixDQUF1QkMsZ0JBQXZCLEVBQVA7QUFDSDs7QUFFRCxTQUFTRSxXQUFULENBQXFCTSxLQUFyQixFQUE0QjtFQUN4QjtFQUNBLElBQUlXLEtBQUssR0FBRyxLQUFaO0VBQ0EsSUFBSUMsS0FBSyxHQUFHLElBQVosQ0FId0IsQ0FNeEI7O0VBQ0FDLElBQUksR0FBRztJQUNILE1BQU1DLElBREg7SUFFSCxRQUFRQyxJQUZMO0lBR0gsVUFBVUM7RUFIUCxDQUFQO0VBS0FDLEtBQUssQ0FBQ04sS0FBRCxFQUFRQyxLQUFSLEVBQWVDLElBQWYsQ0FBTDtBQUNIOztBQUdELFNBQVNLLFVBQVQsQ0FBb0JOLEtBQXBCLEVBQTJCSixNQUEzQixFQUFtQztFQUMvQkksS0FBSyxDQUFDRixTQUFOLEdBQWtCRixNQUFsQjtFQUNBSSxLQUFLLENBQUNkLEtBQU4sR0FBYyxJQUFkO0VBRUFjLEtBQUssQ0FBQ08sZ0JBQU4sQ0FBdUIsZ0JBQXZCLEVBQXlDLFlBQU07SUFDM0NQLEtBQUssQ0FBQ1EsSUFBTjtFQUNILENBRkQ7RUFHQXRFLGNBQWMsQ0FBQ3VFLE1BQWYsQ0FBc0JULEtBQXRCO0FBQ0g7O0FBR0QsU0FBU1UsVUFBVCxDQUFvQlgsS0FBcEIsRUFBMkJILE1BQTNCLEVBQW1DO0VBQy9CRyxLQUFLLENBQUNELFNBQU4sR0FBa0JGLE1BQWxCO0VBQ0FHLEtBQUssQ0FBQ2IsS0FBTixHQUFjLElBQWQ7RUFFQWEsS0FBSyxDQUFDUSxnQkFBTixDQUF1QixnQkFBdkIsRUFBeUMsWUFBTTtJQUMzQ1IsS0FBSyxDQUFDUyxJQUFOO0VBQ0gsQ0FGRDtFQUdBdEUsY0FBYyxDQUFDdUUsTUFBZixDQUFzQlYsS0FBdEI7QUFDSDs7QUFHRCxTQUFTWSxRQUFULENBQWtCWCxLQUFsQixFQUF5QkosTUFBekIsRUFBaUM7RUFDN0JJLEtBQUssQ0FBQ0YsU0FBTixHQUFrQkYsTUFBbEI7RUFDQUksS0FBSyxDQUFDTyxnQkFBTixDQUF1QixnQkFBdkIsRUFBeUMsWUFBTTtJQUMzQ1AsS0FBSyxDQUFDUSxJQUFOO0VBQ0gsQ0FGRDtFQUdBbkUsU0FBUyxDQUFDb0UsTUFBVixDQUFpQlQsS0FBakI7QUFDSDs7QUFFRCxTQUFTWSxRQUFULENBQWtCYixLQUFsQixFQUF5QkgsTUFBekIsRUFBaUM7RUFDN0JHLEtBQUssQ0FBQ0QsU0FBTixHQUFrQkYsTUFBbEI7RUFDQUcsS0FBSyxDQUFDUSxnQkFBTixDQUF1QixnQkFBdkIsRUFBeUMsWUFBTTtJQUMzQ1IsS0FBSyxDQUFDUyxJQUFOO0VBQ0gsQ0FGRDtFQUdBbkUsU0FBUyxDQUFDb0UsTUFBVixDQUFpQlYsS0FBakI7QUFDSDs7QUFHRCxTQUFTYyxlQUFULENBQXlCQyxXQUF6QixFQUFzQ2YsS0FBdEMsRUFBNkNILE1BQTdDLEVBQXFEO0VBQ2pERyxLQUFLLENBQUNELFNBQU4sR0FBa0JGLE1BQWxCO0VBQ0FHLEtBQUssQ0FBQ1EsZ0JBQU4sQ0FBdUIsZ0JBQXZCLEVBQXlDLFlBQU07SUFDM0NSLEtBQUssQ0FBQ1MsSUFBTjtFQUNILENBRkQ7RUFJQSxJQUFJTyxnQkFBZ0IsR0FBRzVFLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QjBFLFdBQXhCLENBQXZCOztFQUNBLElBQUlDLGdCQUFKLEVBQXNCO0lBQ2xCQSxnQkFBZ0IsQ0FBQ04sTUFBakIsQ0FBd0JWLEtBQXhCO0VBQ0g7QUFDSjs7QUFHRCxTQUFTaUIsZUFBVCxDQUF5QkMsU0FBekIsRUFBb0M7RUFDaEMsSUFBSUMsRUFBRSxHQUFHL0UsUUFBUSxDQUFDQyxjQUFULENBQXdCNkUsU0FBeEIsQ0FBVDs7RUFDQSxJQUFJQyxFQUFKLEVBQVE7SUFDSkEsRUFBRSxDQUFDQyxLQUFILENBQVNDLE9BQVQsR0FBbUIsT0FBbkI7RUFDSDtBQUNKOztBQUVELFNBQVNDLGVBQVQsQ0FBeUJKLFNBQXpCLEVBQW9DO0VBQ2hDLElBQUlDLEVBQUUsR0FBRy9FLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QjZFLFNBQXhCLENBQVQ7O0VBQ0EsSUFBSUMsRUFBSixFQUFRO0lBQ0pBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTQyxPQUFULEdBQW1CLE1BQW5CO0VBQ0g7QUFDSjs7QUFFRCxTQUFTRSxpQkFBVCxDQUEyQkMsRUFBM0IsRUFBK0I7RUFDM0IsSUFBSXZDLE9BQU8sR0FBRzdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3Qm1GLEVBQXhCLENBQWQ7O0VBQ0EsSUFBSXZDLE9BQUosRUFBYTtJQUNUQSxPQUFPLENBQUN3QyxNQUFSO0VBQ0g7QUFDSjs7QUFFRCxTQUFTQyxlQUFULENBQXlCMUIsS0FBekIsRUFBZ0NDLEtBQWhDLEVBQXVDMEIsV0FBdkMsRUFBb0Q7RUFFaERoRCxTQUFTLENBQUNDLFlBQVYsQ0FBdUJnRCxZQUF2QixDQUFvQ0QsV0FBcEMsRUFBaUQ3QyxJQUFqRCxDQUFzRCxVQUFDZSxNQUFELEVBQVk7SUFFOUQwQixpQkFBaUIsQ0FBQyxTQUFELENBQWpCO0lBQ0FBLGlCQUFpQixDQUFDLFNBQUQsQ0FBakI7O0lBRUEsSUFBSXRCLEtBQUssSUFBSSxJQUFULElBQWlCRCxLQUFLLElBQUksSUFBOUIsRUFBb0M7TUFDaENsRSxhQUFhLEdBQUcsSUFBaEIsQ0FEZ0MsQ0FHaEM7O01BQ0FELGFBQWEsR0FBR2dFLE1BQWhCO01BQ0FDLE1BQU0sQ0FBQ0QsTUFBUCxHQUFnQkEsTUFBaEIsQ0FMZ0MsQ0FLUjs7TUFDeEI7QUFDWjtBQUNBOztNQUVZOUQsWUFBWSxHQUFHSyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWY7TUFDQTdCLFlBQVksQ0FBQzhGLFlBQWIsQ0FBMEIsSUFBMUIsRUFBZ0MsU0FBaEM7TUFDQTlGLFlBQVksQ0FBQ29ELEtBQWIsR0FBcUIsS0FBckIsQ0FaZ0MsQ0FhaEM7O01BQ0F3QixVQUFVLENBQUM1RSxZQUFELEVBQWU4RCxNQUFmLENBQVYsQ0FkZ0MsQ0FpQmhDO0lBQ0gsQ0FsQkQsTUFrQk87TUFHSDtNQUNBaEUsYUFBYSxHQUFHLElBQWhCO01BQ0FpRSxNQUFNLENBQUNELE1BQVAsR0FBZ0JBLE1BQWhCLENBTEcsQ0FLcUI7TUFFeEI7O01BQ0EvRCxhQUFhLEdBQUcrRCxNQUFoQjtNQUVBM0IsT0FBTyxDQUFDQyxHQUFSLENBQVksc0JBQVo7TUFFQTtBQUNaO0FBQ0E7O01BQ1luQyxZQUFZLEdBQUdJLFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZjtNQUNBNUIsWUFBWSxDQUFDNkYsWUFBYixDQUEwQixJQUExQixFQUFnQyxTQUFoQztNQUNBN0YsWUFBWSxDQUFDNkYsWUFBYixDQUEwQixVQUExQixFQUFzQyxVQUF0QyxFQWpCRyxDQWtCSDs7TUFDQTdGLFlBQVksQ0FBQ21ELEtBQWIsR0FBcUIsSUFBckI7TUFFQW9CLFVBQVUsQ0FBQ3ZFLFlBQUQsRUFBZTZELE1BQWYsQ0FBVixDQXJCRyxDQXVCSDtJQUlIOztJQUVELE9BQU9sQixTQUFTLENBQUNDLFlBQVYsQ0FBdUJDLGdCQUF2QixFQUFQO0VBR0gsQ0F2REQsRUF1REdDLElBdkRILENBdURRL0IsVUF2RFIsV0F1RDBCLFVBQUMrRSxHQUFELEVBQVM7SUFFL0IsSUFBSTlCLEtBQUssSUFBSSxJQUFULElBQWlCQyxLQUFLLElBQUksSUFBOUIsRUFBb0M7TUFFaENsQixXQUFXLENBQUMrQyxHQUFELENBQVg7SUFFSCxDQUpELE1BSU8sQ0FFSDtJQUNIO0VBQ0osQ0FqRUQ7QUFvRUg7O0FBRUQsU0FBU3hCLEtBQVQsQ0FBZU4sS0FBZixFQUFzQkMsS0FBdEIsRUFBNkJDLElBQTdCLEVBQW1DO0VBRS9CLElBQUlKLE1BQU0sQ0FBQ0QsTUFBWCxFQUFtQjtJQUNmQyxNQUFNLENBQUNELE1BQVAsQ0FBY2tDLFNBQWQsR0FBMEIxRSxPQUExQixDQUFrQyxVQUFBMkUsS0FBSyxFQUFJO01BQ3ZDQSxLQUFLLENBQUNDLElBQU47SUFDSCxDQUZEO0VBR0g7O0VBQ0QsSUFBTUMsV0FBVyxHQUFHM0YsZ0JBQWdCLENBQUNhLEtBQXJDO0VBQ0EsSUFBTStFLFdBQVcsR0FBR3pGLFdBQVcsQ0FBQ1UsS0FBaEM7O0VBRUEsSUFBSTRDLEtBQUssSUFBSSxJQUFULElBQWlCQyxLQUFLLElBQUksSUFBOUIsRUFBb0M7SUFFaEMsSUFBTTBCLFdBQVcsR0FBRztNQUNoQjFCLEtBQUssRUFBRTtRQUFFcEMsUUFBUSxFQUFFcUUsV0FBVyxHQUFHO1VBQUVFLEtBQUssRUFBRUY7UUFBVCxDQUFILEdBQTRCRztNQUFuRCxDQURTO01BRWhCckMsS0FBSyxFQUFFO1FBQUVuQyxRQUFRLEVBQUVzRSxXQUFXLEdBQUc7VUFBRUMsS0FBSyxFQUFFRDtRQUFULENBQUgsR0FBNEJFO01BQW5EO0lBRlMsQ0FBcEI7SUFLQW5FLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHVCQUFaO0lBRUF1RCxlQUFlLENBQUMxQixLQUFELEVBQVFDLEtBQVIsRUFBZTBCLFdBQWYsQ0FBZjtFQUVILENBWEQsTUFXTyxJQUFJM0IsS0FBSyxJQUFJLEtBQVQsSUFBa0JDLEtBQUssSUFBSSxJQUEvQixFQUFxQztJQUV4QyxJQUFNMEIsWUFBVyxHQUFHO01BQ2hCMUIsS0FBSyxFQUFFO1FBQUVwQyxRQUFRLEVBQUVxRSxXQUFXLEdBQUc7VUFBRUUsS0FBSyxFQUFFRjtRQUFULENBQUgsR0FBNEJHO01BQW5ELENBRFM7TUFFaEJyQyxLQUFLLEVBQUU7SUFGUyxDQUFwQjtJQUtBOUIsT0FBTyxDQUFDQyxHQUFSLENBQVksdUJBQVo7SUFDQXVELGVBQWUsQ0FBQzFCLEtBQUQsRUFBUUMsS0FBUixFQUFlMEIsWUFBZixDQUFmO0VBRUgsQ0FWTSxNQVVBLENBRUg7RUFDSDtBQUVKOztBQUVELFNBQVNXLE9BQVQsR0FBbUI7RUFFZixJQUFJeEMsTUFBTSxDQUFDRCxNQUFYLEVBQW1CO0lBQ2ZDLE1BQU0sQ0FBQ0QsTUFBUCxDQUFja0MsU0FBZCxHQUEwQjFFLE9BQTFCLENBQWtDLFVBQUEyRSxLQUFLLEVBQUk7TUFDdkNBLEtBQUssQ0FBQ0MsSUFBTjtJQUNILENBRkQ7RUFHSDs7RUFFRCxJQUFNQyxXQUFXLEdBQUczRixnQkFBZ0IsQ0FBQ2EsS0FBckM7RUFDQSxJQUFNK0UsV0FBVyxHQUFHekYsV0FBVyxDQUFDVSxLQUFoQztFQUNBLElBQU11RSxXQUFXLEdBQUc7SUFDaEIxQixLQUFLLEVBQUU7TUFBRXBDLFFBQVEsRUFBRXFFLFdBQVcsR0FBRztRQUFFRSxLQUFLLEVBQUVGO01BQVQsQ0FBSCxHQUE0Qkc7SUFBbkQsQ0FEUztJQUVoQnJDLEtBQUssRUFBRTtNQUFFbkMsUUFBUSxFQUFFc0UsV0FBVyxHQUFHO1FBQUVDLEtBQUssRUFBRUQ7TUFBVCxDQUFILEdBQTRCRTtJQUFuRDtFQUZTLENBQXBCO0VBSUExRCxTQUFTLENBQUNDLFlBQVYsQ0FBdUJnRCxZQUF2QixDQUFvQ0QsV0FBcEMsRUFBaUQ3QyxJQUFqRCxDQUFzRCxVQUFDZSxNQUFELEVBQVk7SUFFOUQzQixPQUFPLENBQUNDLEdBQVIsQ0FBWSxXQUFaO0lBR0EyQixNQUFNLENBQUNELE1BQVAsR0FBZ0JBLE1BQWhCLENBTDhELENBS3RDOztJQUN4QjlELFlBQVksQ0FBQ2dFLFNBQWIsR0FBeUJGLE1BQXpCLENBTjhELENBUTlEO0lBQ0E7SUFFQTs7SUFDQWhFLGFBQWEsR0FBR2dFLE1BQWhCO0lBRUFLLElBQUksR0FBRztNQUNILE1BQU1DLElBREg7TUFFSCxRQUFRQyxJQUZMO01BR0gsVUFBVUMsTUFIUDtNQUlILGVBQWV4RTtJQUpaLENBQVA7SUFTQU4sTUFBTSxDQUFDZ0gsSUFBUCxDQUFZLGFBQVosRUFBMkJyQyxJQUEzQjtJQUVBcUIsaUJBQWlCLENBQUNwQixJQUFELENBQWpCO0VBR0gsQ0E1QkQsV0E0QlNwQixXQTVCVDtBQThCSCxDLENBSUQ7OztBQUNBLFNBQVN5RCxXQUFULEdBQXVCO0VBRW5CLElBQUlDLFdBQVcsR0FBR3JHLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixhQUF4QixDQUFsQjs7RUFFQSxJQUFJb0csV0FBSixFQUFpQjtJQUNiQSxXQUFXLENBQUNyQixLQUFaLENBQWtCQyxPQUFsQixHQUE0QixPQUE1QjtFQUNIOztFQUVELElBQUlxQixhQUFhLEdBQUd0RyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBcEI7O0VBRUEsSUFBSXFHLGFBQUosRUFBbUI7SUFDZkEsYUFBYSxDQUFDakIsTUFBZDtFQUNIO0FBQ0o7O0FBRUQsU0FBU2tCLG1CQUFULENBQTZCOUMsTUFBN0IsRUFBcUM7RUFJakNwRSxJQUFJLENBQUNtSCxFQUFMLENBQVEsWUFBUixFQUFzQixVQUFTQyxJQUFULEVBQWU7SUFFakNBLElBQUksQ0FBQ0QsRUFBTCxDQUFRLE1BQVIsRUFBZ0IsVUFBUzFDLElBQVQsRUFBZTtNQUUzQixJQUFJQSxJQUFJLENBQUNqRSxZQUFMLElBQXFCLElBQXpCLEVBQStCO1FBQzNCO1FBRUFBLFlBQVksR0FBRyxJQUFmO01BRUgsQ0FMRCxNQUtPLElBQUlpRSxJQUFJLENBQUNqRSxZQUFMLElBQXFCLEtBQXpCLEVBQWdDO1FBRW5DdUcsV0FBVztRQUVYdkcsWUFBWSxHQUFHLEtBQWY7UUFFQSxPQUFPLEtBQVA7TUFDSCxDQVBNLE1BT0E7UUFFSDZHLEtBQUssQ0FBQyxpQkFBRCxDQUFMO01BQ0g7SUFFSixDQW5CRDtFQXFCSCxDQXZCRDtFQTBCQXJILElBQUksQ0FBQ21ILEVBQUwsQ0FBUSxPQUFSLEVBQWlCLFVBQVNDLElBQVQsRUFBZTtJQUM1QjNFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVo7RUFDSCxDQUZEO0VBSUExQyxJQUFJLENBQUNtSCxFQUFMLENBQVEsTUFBUixFQUFnQixVQUFBckUsSUFBSSxFQUFJO0lBRXBCLElBQUlzQixNQUFNLElBQUksSUFBZCxFQUFvQjtNQUVoQjNCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHNDQUFaLEVBQW9ESSxJQUFwRDtNQUNBQSxJQUFJLENBQUN3RSxNQUFMO0lBRUgsQ0FMRCxNQUtPO01BRUg3RSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWixFQUFpQzBCLE1BQWpDO01BRUF0QixJQUFJLENBQUN3RSxNQUFMLENBQVlsRCxNQUFaOztNQUVBLElBQUlBLE1BQU0sQ0FBQ21ELGNBQVAsR0FBd0J2RixNQUF4QixJQUFrQyxDQUFsQyxJQUF1Q29DLE1BQU0sQ0FBQ29ELGNBQVAsR0FBd0J4RixNQUF4QixJQUFrQyxDQUE3RSxFQUFnRjtRQUU1RXFGLEtBQUssQ0FBQyxvREFBb0R2RSxJQUFJLENBQUM5QyxJQUExRCxDQUFMO1FBRUE4RixpQkFBaUIsQ0FBQ2hELElBQUksQ0FBQzlDLElBQU4sQ0FBakI7UUFDQXlILGFBQWEsR0FBRzlHLFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBaEI7UUFDQXNGLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsSUFBM0IsRUFBaUN0RCxJQUFJLENBQUM5QyxJQUF0QztRQUNBeUgsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixPQUEzQixFQUFvQyxtQkFBcEM7UUFDQXFCLGFBQWEsQ0FBQy9ELEtBQWQsR0FBc0IsS0FBdEI7UUFFQTBCLFFBQVEsQ0FBQ3FDLGFBQUQsRUFBZ0JyRCxNQUFoQixDQUFSO01BQ0gsQ0FYRCxNQVdPO1FBR0hpRCxLQUFLLENBQUMsb0RBQW9EdkUsSUFBSSxDQUFDOUMsSUFBMUQsQ0FBTDtRQUVBOEYsaUJBQWlCLENBQUNoRCxJQUFJLENBQUM5QyxJQUFOLENBQWpCO1FBQ0F5SCxhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO1FBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDdEQsSUFBSSxDQUFDOUMsSUFBdEM7UUFDQXlILGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MsbUJBQXBDLEVBUkcsQ0FRdUQ7O1FBQzFEcUIsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixVQUEzQixFQUF1QyxVQUF2QztRQUNBcUIsYUFBYSxDQUFDL0QsS0FBZCxHQUFzQixLQUF0QjtRQUVBeUIsUUFBUSxDQUFDc0MsYUFBRCxFQUFnQnJELE1BQWhCLENBQVI7TUFFSDtJQUNKOztJQUVEdEIsSUFBSSxDQUFDcUUsRUFBTCxDQUFRLFFBQVIsRUFBa0IsVUFBQU8sVUFBVSxFQUFJO01BRTVCLElBQUlsSCxZQUFZLElBQUksSUFBcEIsRUFBMEI7UUFDdEJtSCxTQUFTLEdBQUdoSCxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQVo7UUFDQXdGLFNBQVMsQ0FBQ3ZCLFlBQVYsQ0FBdUIsSUFBdkIsRUFBNkIsYUFBN0IsRUFGc0IsQ0FLdEI7O1FBQ0FmLGVBQWUsQ0FBQyx1QkFBRCxFQUEwQnNDLFNBQTFCLEVBQXFDRCxVQUFyQyxDQUFmLENBTnNCLENBUXRCOztRQUNBN0IsZUFBZSxDQUFDLGFBQUQsQ0FBZjtNQUNILENBVkQsTUFVTztRQUVIO1FBQ0F3QixLQUFLLENBQUMsYUFBRCxDQUFMO1FBRUE1QyxJQUFJLEdBQUc7VUFDSCxNQUFNQyxJQURIO1VBRUgsUUFBUUMsSUFGTDtVQUdILFVBQVVDLE1BSFA7VUFJSCxlQUFlZ0Q7UUFKWixDQUFQO1FBT0E5SCxNQUFNLENBQUNnSCxJQUFQLENBQVksYUFBWixFQUEyQnJDLElBQTNCO01BQ0g7SUFFSixDQTNCRDtJQTZCQTNCLElBQUksQ0FBQ3FFLEVBQUwsQ0FBUSxRQUFSLEVBQWtCLFlBQVc7TUFDekIxRSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxlQUFaO0lBQ0gsQ0FGRDtJQUlBSSxJQUFJLENBQUNxRSxFQUFMLENBQVEsT0FBUixFQUFpQixVQUFDZCxHQUFELEVBQVM7TUFDdEJnQixLQUFLLENBQUNoQixHQUFELENBQUw7SUFDSCxDQUZEO0lBSUF2RCxJQUFJLENBQUNxRSxFQUFMLENBQVEsT0FBUixFQUFpQixZQUFNO01BRW5CRSxLQUFLLENBQUMsZUFBRCxDQUFMO01BQ0FNLFNBQVMsQ0FBQzNCLE1BQVY7SUFDSCxDQUpEO0VBT0gsQ0FyRkQ7QUFzRkg7O0FBQUE7O0FBS0QsU0FBUzZCLFdBQVQsR0FBdUI7RUFFbkIzRSxTQUFTLENBQUNDLFlBQVYsQ0FBdUIyRSxlQUF2QixDQUF1QztJQUNuQ3ZELEtBQUssRUFBRSxJQUQ0QjtJQUVuQ0MsS0FBSyxFQUFFO0VBRjRCLENBQXZDLEVBR0duQixJQUhILENBR1EsVUFBQ3FFLFVBQUQsRUFBZ0I7SUFFcEJsSCxZQUFZLEdBQUdrSCxVQUFmLENBRm9CLENBSXBCOztJQUNBLElBQU1DLFNBQVMsR0FBR2hILFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBbEI7SUFDQXdGLFNBQVMsQ0FBQ3ZCLFlBQVYsQ0FBdUIsSUFBdkIsRUFBNkIsYUFBN0I7SUFDQXVCLFNBQVMsQ0FBQ2pFLEtBQVYsR0FBa0IsS0FBbEIsQ0FQb0IsQ0FTcEI7O0lBQ0EyQixlQUFlLENBQUMsdUJBQUQsRUFBMEJzQyxTQUExQixFQUFxQ0QsVUFBckMsQ0FBZixDQVZvQixDQVlwQjs7SUFDQTdCLGVBQWUsQ0FBQyxhQUFELENBQWY7SUFFQXBELE9BQU8sQ0FBQ0MsR0FBUixDQUFZakMsZUFBWixFQWZvQixDQW1CcEI7O0lBQ0FzSCxNQUFNLENBQUNDLElBQVAsQ0FBWXZILGVBQVosRUFBNkJtQixPQUE3QixDQUFxQyxVQUFTcUcsTUFBVCxFQUFpQjtNQUVsRDtNQUNBLElBQUliLElBQUksR0FBR3BILElBQUksQ0FBQ2tJLE9BQUwsQ0FBYUQsTUFBYixDQUFYO01BRUFiLElBQUksQ0FBQ0QsRUFBTCxDQUFRLE1BQVIsRUFBZ0IsWUFBTTtRQUVsQjtBQUNoQjtBQUNBO1FBQ2dCLElBQUkxQyxJQUFJLEdBQUc7VUFDUCxNQUFNd0QsTUFEQztVQUVQLGdCQUFnQjtRQUZULENBQVgsQ0FMa0IsQ0FVbEI7O1FBQ0FiLElBQUksQ0FBQ2UsSUFBTCxDQUFVMUQsSUFBVjtRQUVBLElBQUkyRCxhQUFhLEdBQUdwSSxJQUFJLENBQUM4QyxJQUFMLENBQVVtRixNQUFWLEVBQWtCekgsWUFBbEIsQ0FBcEI7TUFFSCxDQWZEO0lBaUJILENBdEJELEVBcEJvQixDQTZDcEI7O0lBQ0FBLFlBQVksQ0FBQ2dILGNBQWIsR0FBOEIsQ0FBOUIsRUFBaUNhLE9BQWpDLEdBQTJDLFlBQVc7TUFHbEQ3QyxlQUFlLENBQUMsYUFBRCxDQUFmO01BRUE3RSxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsYUFBeEIsRUFBdUNvRixNQUF2QyxHQUxrRCxDQU9sRDs7TUFDQStCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZdkgsZUFBWixFQUE2Qm1CLE9BQTdCLENBQXFDLFVBQVNxRyxNQUFULEVBQWlCO1FBRWxELElBQUliLElBQUksR0FBR3BILElBQUksQ0FBQ2tJLE9BQUwsQ0FBYUQsTUFBYixDQUFYO1FBRUFiLElBQUksQ0FBQ0QsRUFBTCxDQUFRLE1BQVIsRUFBZ0IsWUFBTTtVQUdsQjtBQUNwQjtBQUNBO1VBRW9CLElBQUkxQyxJQUFJLEdBQUc7WUFDUCxNQUFNd0QsTUFEQztZQUVQLGdCQUFnQjtVQUZULENBQVg7VUFLQWIsSUFBSSxDQUFDZSxJQUFMLENBQVUxRCxJQUFWO1FBQ0gsQ0FiRDtNQWNILENBbEJEO0lBbUJILENBM0JELENBOUNvQixDQStFcEI7O0VBRUgsQ0FwRkQ7QUFxRkg7O0FBRUQzRCxnQkFBZ0IsQ0FBQ3dILFFBQWpCLEdBQTRCekIsT0FBNUI7QUFDQTdGLGlCQUFpQixDQUFDc0gsUUFBbEIsR0FBNkJyRSxzQkFBN0I7QUFDQWhELFdBQVcsQ0FBQ3FILFFBQVosR0FBdUJ6QixPQUF2QjtBQUtBN0csSUFBSSxDQUFDbUgsRUFBTCxDQUFRLFlBQVIsRUFBc0IsVUFBU0MsSUFBVCxFQUFlO0VBRWpDQSxJQUFJLENBQUNELEVBQUwsQ0FBUSxNQUFSLEVBQWdCLFVBQVMxQyxJQUFULEVBQWU7SUFDM0JoQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBWixFQUE4QitCLElBQTlCOztJQUVBLElBQUlBLElBQUksQ0FBQ2pFLFlBQUwsSUFBcUIsSUFBekIsRUFBK0I7TUFFM0JBLFlBQVksR0FBRyxJQUFmO0lBRUgsQ0FKRCxNQUlPLElBQUlpRSxJQUFJLENBQUNqRSxZQUFMLElBQXFCLEtBQXpCLEVBQWdDO01BRW5DdUcsV0FBVztNQUVYdkcsWUFBWSxHQUFHLEtBQWY7TUFFQSxPQUFPLEtBQVA7SUFDSCxDQVBNLE1BT0E7TUFFSDZHLEtBQUssQ0FBQyxpQkFBRCxDQUFMO0lBQ0g7RUFFSixDQW5CRDtFQXFCQUQsSUFBSSxDQUFDRCxFQUFMLENBQVEsT0FBUixFQUFpQixVQUFDQyxJQUFELEVBQVU7SUFDdkIzRSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxvQ0FBWixFQUFrRDBFLElBQWxEO0VBQ0gsQ0FGRDtBQUlILENBM0JEO0FBNkJBcEgsSUFBSSxDQUFDbUgsRUFBTCxDQUFRLE1BQVIsRUFBZ0IsVUFBQ3BCLEVBQUQsRUFBUTtFQUVwQnRELE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQWVxRCxFQUEzQjtFQUNBdEQsT0FBTyxDQUFDQyxHQUFSLENBQVksVUFBWixFQUF3QmlDLElBQXhCO0VBQ0FsQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxhQUFaLEVBQTJCa0MsTUFBM0I7RUFFQUYsSUFBSSxHQUFHcUIsRUFBUDtFQUVBdEIsSUFBSSxHQUFHO0lBQ0gsTUFBTXNCLEVBREg7SUFFSCxRQUFRcEIsSUFGTDtJQUdILFVBQVVDO0VBSFAsQ0FBUDtFQU1BOUUsTUFBTSxDQUFDZ0gsSUFBUCxDQUFZLFNBQVosRUFBdUJyQyxJQUF2QixFQWRvQixDQWdCcEI7O0VBQ0EsSUFBSUYsS0FBSyxHQUFHLElBQVo7RUFDQSxJQUFJQyxLQUFLLEdBQUcsSUFBWixDQWxCb0IsQ0FvQnBCOztFQUVBSyxLQUFLLENBQUNOLEtBQUQsRUFBUUMsS0FBUixFQUFlQyxJQUFmLENBQUw7QUFFSCxDQXhCRDtBQTRCQXpFLElBQUksQ0FBQ21ILEVBQUwsQ0FBUSxNQUFSLEVBQWdCLFVBQUFyRSxJQUFJLEVBQUk7RUFFcEIsSUFBSXlGLEdBQUcsR0FBRyxDQUFWO0VBRUE5RixPQUFPLENBQUNDLEdBQVIsQ0FBWSwwREFBWjtFQUVBLElBQU0rRCxXQUFXLEdBQUczRixnQkFBZ0IsQ0FBQ2EsS0FBckM7RUFDQSxJQUFNK0UsV0FBVyxHQUFHekYsV0FBVyxDQUFDVSxLQUFoQztFQUNBLElBQU11RSxXQUFXLEdBQUc7SUFDaEIxQixLQUFLLEVBQUU7TUFBRXBDLFFBQVEsRUFBRXFFLFdBQVcsR0FBRztRQUFFRSxLQUFLLEVBQUVGO01BQVQsQ0FBSCxHQUE0Qkc7SUFBbkQsQ0FEUztJQUVoQnJDLEtBQUssRUFBRTtNQUFFbkMsUUFBUSxFQUFFc0UsV0FBVyxHQUFHO1FBQUVDLEtBQUssRUFBRUQ7TUFBVCxDQUFILEdBQTRCRTtJQUFuRDtFQUZTLENBQXBCO0VBS0ExRCxTQUFTLENBQUNDLFlBQVYsQ0FBdUJnRCxZQUF2QixDQUFvQ0QsV0FBcEMsRUFBaUQ3QyxJQUFqRCxDQUFzRCxVQUFDZSxNQUFELEVBQVk7SUFFOUQsSUFBSUEsTUFBTSxDQUFDbUQsY0FBUCxHQUF3QnZGLE1BQXhCLElBQWtDLENBQWxDLElBQXVDb0MsTUFBTSxDQUFDb0QsY0FBUCxHQUF3QnhGLE1BQXhCLElBQWtDLENBQTdFLEVBQWdGLENBQzVFO0lBQ0gsQ0FGRCxNQUVPLENBQ0g7SUFDSDs7SUFHRGMsSUFBSSxDQUFDd0UsTUFBTCxDQUFZbEQsTUFBWjtJQUVBdEIsSUFBSSxDQUFDcUUsRUFBTCxDQUFRLFFBQVIsRUFBa0IsVUFBQ08sVUFBRCxFQUFnQjtNQUk5QmpILGVBQWUsQ0FBQ3FDLElBQUksQ0FBQzlDLElBQU4sQ0FBZixHQUE2QjhDLElBQTdCO01BRUFMLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLCtCQUFaLEVBQTZDSSxJQUE3Qzs7TUFFQSxJQUFJeUYsR0FBRyxJQUFJLENBQVgsRUFBYztRQUVWLElBQUkvSCxZQUFZLElBQUksSUFBcEIsRUFBMEI7VUFDdEJtSCxTQUFTLEdBQUdoSCxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQVo7VUFDQXdGLFNBQVMsQ0FBQ3ZCLFlBQVYsQ0FBdUIsSUFBdkIsRUFBNkIsYUFBN0IsRUFGc0IsQ0FLdEI7O1VBQ0FmLGVBQWUsQ0FBQyx1QkFBRCxFQUEwQnNDLFNBQTFCLEVBQXFDRCxVQUFyQyxDQUFmLENBTnNCLENBUXRCOztVQUNBN0IsZUFBZSxDQUFDLGFBQUQsQ0FBZjtVQUVBLE9BQU8sS0FBUDtRQUNIOztRQUVELElBQUk2QixVQUFVLENBQUNILGNBQVgsR0FBNEJ2RixNQUE1QixJQUFzQyxDQUF0QyxJQUEyQzBGLFVBQVUsQ0FBQ0YsY0FBWCxHQUE0QnhGLE1BQTVCLElBQXNDLENBQXJGLEVBQXdGO1VBRXBGO1VBRUE4RCxpQkFBaUIsQ0FBQ2hELElBQUksQ0FBQzlDLElBQU4sQ0FBakI7VUFDQXlILGFBQWEsR0FBRzlHLFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBaEI7VUFDQXNGLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsSUFBM0IsRUFBaUN0RCxJQUFJLENBQUM5QyxJQUF0QztVQUNBeUgsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixPQUEzQixFQUFvQyxtQkFBcEM7VUFDQXFCLGFBQWEsQ0FBQy9ELEtBQWQsR0FBc0IsS0FBdEI7VUFFQTBCLFFBQVEsQ0FBQ3FDLGFBQUQsRUFBZ0JDLFVBQWhCLENBQVI7UUFDSCxDQVhELE1BV087VUFHSDtVQUVBNUIsaUJBQWlCLENBQUNoRCxJQUFJLENBQUM5QyxJQUFOLENBQWpCO1VBQ0F5SCxhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO1VBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDdEQsSUFBSSxDQUFDOUMsSUFBdEM7VUFDQXlILGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MsbUJBQXBDLEVBUkcsQ0FRdUQ7O1VBQzFEcUIsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixVQUEzQixFQUF1QyxVQUF2QztVQUNBcUIsYUFBYSxDQUFDL0QsS0FBZCxHQUFzQixLQUF0QjtVQUVBeUIsUUFBUSxDQUFDc0MsYUFBRCxFQUFnQkMsVUFBaEIsQ0FBUjtRQUVIO01BQ0o7O01BQ0RhLEdBQUc7SUFDTixDQXBERDtJQXNEQXpGLElBQUksQ0FBQ3FFLEVBQUwsQ0FBUSxPQUFSLEVBQWlCLFlBQU07TUFDbkJyQixpQkFBaUIsQ0FBQ2hELElBQUksQ0FBQzlDLElBQU4sQ0FBakI7TUFDQXlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGtCQUFaO0lBQ0gsQ0FIRDtFQUtILENBdEVELFdBc0VTLFVBQUNrQixLQUFELEVBQVc7SUFFaEJuQixPQUFPLENBQUNDLEdBQVIsQ0FBWSw4QkFBWixFQUE0Q0ksSUFBNUM7SUFJQSxJQUFNMkQsV0FBVyxHQUFHM0YsZ0JBQWdCLENBQUNhLEtBQXJDO0lBQ0EsSUFBTXVFLFdBQVcsR0FBRztNQUNoQjFCLEtBQUssRUFBRTtRQUFFcEMsUUFBUSxFQUFFcUUsV0FBVyxHQUFHO1VBQUVFLEtBQUssRUFBRUY7UUFBVCxDQUFILEdBQTRCRztNQUFuRCxDQURTO01BRWhCckMsS0FBSyxFQUFFO0lBRlMsQ0FBcEI7SUFLQXJCLFNBQVMsQ0FBQ0MsWUFBVixDQUF1QmdELFlBQXZCLENBQW9DRCxXQUFwQyxFQUFpRDdDLElBQWpELENBQXNELFVBQUNlLE1BQUQsRUFBWTtNQUU5RCxJQUFJQSxNQUFNLENBQUNtRCxjQUFQLEdBQXdCdkYsTUFBeEIsSUFBa0MsQ0FBbEMsSUFBdUNvQyxNQUFNLENBQUNvRCxjQUFQLEdBQXdCeEYsTUFBeEIsSUFBa0MsQ0FBN0UsRUFBZ0YsQ0FFNUU7TUFFSCxDQUpELE1BSU8sQ0FFSDtNQUVIOztNQUdEYyxJQUFJLENBQUN3RSxNQUFMLENBQVlsRCxNQUFaO01BRUF0QixJQUFJLENBQUNxRSxFQUFMLENBQVEsUUFBUixFQUFrQixVQUFDTyxVQUFELEVBQWdCO1FBRTlCakgsZUFBZSxDQUFDcUMsSUFBSSxDQUFDOUMsSUFBTixDQUFmLEdBQTZCOEMsSUFBN0I7O1FBRUEsSUFBSXlGLEdBQUcsSUFBSSxDQUFYLEVBQWM7VUFHVixJQUFJL0gsWUFBWSxJQUFJLElBQXBCLEVBQTBCO1lBQ3RCbUgsU0FBUyxHQUFHaEgsUUFBUSxDQUFDd0IsYUFBVCxDQUF1QixPQUF2QixDQUFaO1lBQ0F3RixTQUFTLENBQUN2QixZQUFWLENBQXVCLElBQXZCLEVBQTZCLGFBQTdCLEVBRnNCLENBS3RCOztZQUNBZixlQUFlLENBQUMsdUJBQUQsRUFBMEJzQyxTQUExQixFQUFxQ0QsVUFBckMsQ0FBZixDQU5zQixDQVF0Qjs7WUFDQTdCLGVBQWUsQ0FBQyxhQUFELENBQWY7WUFFQSxPQUFPLEtBQVA7VUFDSDs7VUFFRCxJQUFJNkIsVUFBVSxDQUFDSCxjQUFYLEdBQTRCdkYsTUFBNUIsSUFBc0MsQ0FBdEMsSUFBMkMwRixVQUFVLENBQUNGLGNBQVgsR0FBNEJ4RixNQUE1QixJQUFzQyxDQUFyRixFQUF3RjtZQUVwRjtZQUVBOEQsaUJBQWlCLENBQUNoRCxJQUFJLENBQUM5QyxJQUFOLENBQWpCO1lBQ0F5SCxhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO1lBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDdEQsSUFBSSxDQUFDOUMsSUFBdEM7WUFDQXlILGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MsbUJBQXBDO1lBQ0FxQixhQUFhLENBQUMvRCxLQUFkLEdBQXNCLEtBQXRCO1lBRUEwQixRQUFRLENBQUNxQyxhQUFELEVBQWdCQyxVQUFoQixDQUFSO1VBQ0gsQ0FYRCxNQVdPO1lBRUg7WUFFQTVCLGlCQUFpQixDQUFDaEQsSUFBSSxDQUFDOUMsSUFBTixDQUFqQjtZQUNBeUgsYUFBYSxHQUFHOUcsUUFBUSxDQUFDd0IsYUFBVCxDQUF1QixPQUF2QixDQUFoQjtZQUNBc0YsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixJQUEzQixFQUFpQ3RELElBQUksQ0FBQzlDLElBQXRDO1lBQ0F5SCxhQUFhLENBQUNyQixZQUFkLENBQTJCLE9BQTNCLEVBQW9DLG1CQUFwQyxFQVBHLENBT3VEOztZQUMxRHFCLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsVUFBM0IsRUFBdUMsVUFBdkM7WUFDQXFCLGFBQWEsQ0FBQy9ELEtBQWQsR0FBc0IsS0FBdEI7WUFFQXlCLFFBQVEsQ0FBQ3NDLGFBQUQsRUFBZ0JDLFVBQWhCLENBQVI7VUFFSDtRQUdKOztRQUVEYSxHQUFHO01BQ04sQ0FuREQ7TUFxREF6RixJQUFJLENBQUNxRSxFQUFMLENBQVEsT0FBUixFQUFpQixZQUFNO1FBQ25CckIsaUJBQWlCLENBQUNoRCxJQUFJLENBQUM5QyxJQUFOLENBQWpCO1FBQ0F5QyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQkFBWjtNQUNILENBSEQ7SUFLSCxDQXpFRCxXQXlFUyxVQUFDa0IsS0FBRCxFQUFXLENBQ2hCO0lBQ0gsQ0EzRUQ7RUE4RUgsQ0FoS0Q7QUFxS0gsQ0FsTEQ7QUFvTEE1RCxJQUFJLENBQUNtSCxFQUFMLENBQVEsT0FBUixFQUFpQixVQUFDcEIsRUFBRCxFQUFRO0VBQ3JCcEYsUUFBUSxDQUFDQyxjQUFULENBQXdCbUYsRUFBeEIsRUFBNEJDLE1BQTVCO0FBQ0gsQ0FGRDtBQUtBbEcsTUFBTSxDQUFDcUgsRUFBUCxDQUFVLFlBQVYsRUFBd0IsVUFBQzFDLElBQUQsRUFBVTtFQUc5QmhFLGVBQWUsQ0FBQ2dFLElBQUksQ0FBQ3NCLEVBQU4sQ0FBZixHQUEyQnRCLElBQTNCO0VBRUFoQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSw2REFBWixFQUEyRStCLElBQUksQ0FBQ3NCLEVBQWhGO0VBRUEsSUFBTVUsV0FBVyxHQUFHM0YsZ0JBQWdCLENBQUNhLEtBQXJDO0VBQ0EsSUFBTStFLFdBQVcsR0FBR3pGLFdBQVcsQ0FBQ1UsS0FBaEM7RUFDQSxJQUFNdUUsV0FBVyxHQUFHO0lBQ2hCMUIsS0FBSyxFQUFFO01BQUVwQyxRQUFRLEVBQUVxRSxXQUFXLEdBQUc7UUFBRUUsS0FBSyxFQUFFRjtNQUFULENBQUgsR0FBNEJHO0lBQW5ELENBRFM7SUFFaEJyQyxLQUFLLEVBQUU7TUFBRW5DLFFBQVEsRUFBRXNFLFdBQVcsR0FBRztRQUFFQyxLQUFLLEVBQUVEO01BQVQsQ0FBSCxHQUE0QkU7SUFBbkQ7RUFGUyxDQUFwQjtFQUtBMUQsU0FBUyxDQUFDQyxZQUFWLENBQXVCZ0QsWUFBdkIsQ0FBb0NELFdBQXBDLEVBQWlEN0MsSUFBakQsQ0FBc0QsVUFBQ21GLFdBQUQsRUFBaUI7SUFFbkUvRixPQUFPLENBQUNDLEdBQVIsQ0FBWSw2REFBWixFQUEyRStCLElBQUksQ0FBQ3NCLEVBQWhGO0lBRUEwQyxRQUFRLEdBQUd6SSxJQUFJLENBQUM4QyxJQUFMLENBQVUyQixJQUFJLENBQUNzQixFQUFmLEVBQW1CeUMsV0FBbkIsQ0FBWDs7SUFFQSxJQUFJQyxRQUFKLEVBQWM7TUFFVmhJLGVBQWUsQ0FBQ2dJLFFBQVEsQ0FBQ3pJLElBQVYsQ0FBZixHQUFpQ3lJLFFBQWpDO01BRUEsSUFBSUYsR0FBRyxHQUFHLENBQVY7TUFFQUUsUUFBUSxDQUFDdEIsRUFBVCxDQUFZLFFBQVosRUFBc0IsVUFBQ08sVUFBRCxFQUFnQjtRQUVsQyxJQUFJYSxHQUFHLElBQUksQ0FBWCxFQUFjO1VBRVYsSUFBSWIsVUFBVSxDQUFDSCxjQUFYLEdBQTRCdkYsTUFBNUIsSUFBc0MsQ0FBdEMsSUFBMkMwRixVQUFVLENBQUNGLGNBQVgsR0FBNEJ4RixNQUE1QixJQUFzQyxDQUFyRixFQUF3RjtZQUVwRjhELGlCQUFpQixDQUFDckIsSUFBSSxDQUFDc0IsRUFBTixDQUFqQjtZQUVBMEIsYUFBYSxHQUFHOUcsUUFBUSxDQUFDd0IsYUFBVCxDQUF1QixPQUF2QixDQUFoQjtZQUNBc0YsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixJQUEzQixFQUFpQzNCLElBQUksQ0FBQ3NCLEVBQXRDO1lBQ0EwQixhQUFhLENBQUNyQixZQUFkLENBQTJCLE9BQTNCLEVBQW9DLDRCQUFwQztZQUNBcUIsYUFBYSxDQUFDL0QsS0FBZCxHQUFzQixLQUF0QjtZQUVBMEIsUUFBUSxDQUFDcUMsYUFBRCxFQUFnQkMsVUFBaEIsQ0FBUjtVQUdILENBWkQsTUFZTztZQUVINUIsaUJBQWlCLENBQUNyQixJQUFJLENBQUNzQixFQUFOLENBQWpCO1lBRUEwQixhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO1lBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDM0IsSUFBSSxDQUFDc0IsRUFBdEM7WUFDQTBCLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MsNEJBQXBDO1lBQ0FxQixhQUFhLENBQUNyQixZQUFkLENBQTJCLFVBQTNCLEVBQXVDLFVBQXZDO1lBQ0FxQixhQUFhLENBQUMvRCxLQUFkLEdBQXNCLEtBQXRCO1lBRUF5QixRQUFRLENBQUNzQyxhQUFELEVBQWdCQyxVQUFoQixDQUFSO1VBRUg7UUFDSjs7UUFHRGEsR0FBRztNQUNOLENBakNEO01BbUNBRSxRQUFRLENBQUN0QixFQUFULENBQVksT0FBWixFQUFxQixZQUFNO1FBQ3ZCckIsaUJBQWlCLENBQUNyQixJQUFJLENBQUNzQixFQUFOLENBQWpCO01BQ0gsQ0FGRDtNQUlBMEMsUUFBUSxDQUFDdEIsRUFBVCxDQUFZLE9BQVosRUFBcUIsVUFBQ2QsR0FBRCxFQUFTO1FBQzFCNUQsT0FBTyxDQUFDQyxHQUFSLENBQVkyRCxHQUFaO01BQ0gsQ0FGRDtJQUtIO0VBR0osQ0EzREQsV0EyRFMsVUFBQ3pDLEtBQUQsRUFBVztJQUVoQjtJQUNBbkIsT0FBTyxDQUFDQyxHQUFSLENBQVksK0RBQVosRUFBNkUrQixJQUFJLENBQUNzQixFQUFsRjtJQUlBLElBQU0yQyxnQkFBZ0IsR0FBRztNQUNyQmxFLEtBQUssRUFBRTtRQUFFcEMsUUFBUSxFQUFFcUUsV0FBVyxHQUFHO1VBQUVFLEtBQUssRUFBRUY7UUFBVCxDQUFILEdBQTRCRztNQUFuRCxDQURjO01BRXJCckMsS0FBSyxFQUFFO0lBRmMsQ0FBekI7SUFLQXJCLFNBQVMsQ0FBQ0MsWUFBVixDQUF1QmdELFlBQXZCLENBQW9DdUMsZ0JBQXBDLEVBQXNEckYsSUFBdEQsQ0FBMkQsVUFBQ3VFLGVBQUQsRUFBcUI7TUFFNUUsSUFBSXhILGFBQUosRUFBbUI7UUFHZnFJLFFBQVEsR0FBR3pJLElBQUksQ0FBQzhDLElBQUwsQ0FBVTJCLElBQUksQ0FBQ3NCLEVBQWYsRUFBbUI2QixlQUFuQixDQUFYO01BRUgsQ0FMRCxNQUtPO1FBRUhuRCxJQUFJLEdBQUc7VUFDSCxNQUFNQyxJQURIO1VBRUgsUUFBUUMsSUFGTDtVQUdILFVBQVVDLE1BSFA7VUFJSCxlQUFlZ0Q7UUFKWixDQUFQO1FBT0E5SCxNQUFNLENBQUNnSCxJQUFQLENBQVksYUFBWixFQUEyQnJDLElBQTNCLEVBVEcsQ0FXSDs7UUFDQWdFLFFBQVEsR0FBRyxJQUFYO01BQ0g7O01BSUQsSUFBSUEsUUFBSixFQUFjO1FBRVZoSSxlQUFlLENBQUNnSSxRQUFRLENBQUN6SSxJQUFWLENBQWYsR0FBaUN5SSxRQUFqQztRQUdBLElBQUlGLEdBQUcsR0FBRyxDQUFWO1FBRUFFLFFBQVEsQ0FBQ3RCLEVBQVQsQ0FBWSxRQUFaLEVBQXNCLFVBQUNPLFVBQUQsRUFBZ0I7VUFFbEMsSUFBSWEsR0FBRyxJQUFJLENBQVgsRUFBYztZQUVWLElBQUliLFVBQVUsQ0FBQ0gsY0FBWCxHQUE0QnZGLE1BQTVCLElBQXNDLENBQXRDLElBQTJDMEYsVUFBVSxDQUFDRixjQUFYLEdBQTRCeEYsTUFBNUIsSUFBc0MsQ0FBckYsRUFBd0Y7Y0FFcEY7Y0FFQXlGLGFBQWEsR0FBRzlHLFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBaEI7Y0FDQXNGLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsSUFBM0IsRUFBaUMzQixJQUFJLENBQUNzQixFQUF0QztjQUNBMEIsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixPQUEzQixFQUFvQyw0QkFBcEM7Y0FDQXFCLGFBQWEsQ0FBQy9ELEtBQWQsR0FBc0IsS0FBdEI7Y0FFQTBCLFFBQVEsQ0FBQ3FDLGFBQUQsRUFBZ0JDLFVBQWhCLENBQVI7WUFHSCxDQVpELE1BWU87Y0FFSDVCLGlCQUFpQixDQUFDckIsSUFBSSxDQUFDc0IsRUFBTixDQUFqQjtjQUVBMEIsYUFBYSxHQUFHOUcsUUFBUSxDQUFDd0IsYUFBVCxDQUF1QixPQUF2QixDQUFoQjtjQUNBc0YsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixJQUEzQixFQUFpQzNCLElBQUksQ0FBQ3NCLEVBQXRDO2NBQ0EwQixhQUFhLENBQUNyQixZQUFkLENBQTJCLE9BQTNCLEVBQW9DLDRCQUFwQztjQUNBcUIsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixVQUEzQixFQUF1QyxVQUF2QztjQUNBcUIsYUFBYSxDQUFDL0QsS0FBZCxHQUFzQixLQUF0QjtjQUVBeUIsUUFBUSxDQUFDc0MsYUFBRCxFQUFnQkMsVUFBaEIsQ0FBUjtZQUVIO1VBQ0o7O1VBR0RhLEdBQUc7UUFDTixDQWpDRDtRQW1DQUUsUUFBUSxDQUFDdEIsRUFBVCxDQUFZLE9BQVosRUFBcUIsWUFBTTtVQUN2QnJCLGlCQUFpQixDQUFDckIsSUFBSSxDQUFDc0IsRUFBTixDQUFqQjtRQUNILENBRkQ7UUFJQTBDLFFBQVEsQ0FBQ3RCLEVBQVQsQ0FBWSxPQUFaLEVBQXFCLFVBQUNkLEdBQUQsRUFBUztVQUMxQjVELE9BQU8sQ0FBQ0MsR0FBUixDQUFZMkQsR0FBWjtRQUNILENBRkQ7UUFJQTVGLGVBQWUsQ0FBQ2dFLElBQUksQ0FBQ3NCLEVBQU4sQ0FBZixHQUEyQjBDLFFBQTNCO01BR0g7SUFHSixDQWhGRCxXQWdGUyxVQUFDN0UsS0FBRCxFQUFXO01BRWhCO01BQ0FuQixPQUFPLENBQUNDLEdBQVIsQ0FBWWtCLEtBQVo7SUFDSCxDQXBGRDtFQXNGSCxDQTdKRDtFQStKQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVlDLENBcE5EO0FBdU5BOUQsTUFBTSxDQUFDcUgsRUFBUCxDQUFVLGNBQVYsRUFBMEIsVUFBQzFDLElBQUQsRUFBVTtFQUdoQztFQUVBLElBQU1nQyxXQUFXLEdBQUczRixnQkFBZ0IsQ0FBQ2EsS0FBckM7RUFDQSxJQUFNK0UsV0FBVyxHQUFHekYsV0FBVyxDQUFDVSxLQUFoQztFQUNBLElBQU11RSxXQUFXLEdBQUc7SUFDaEIxQixLQUFLLEVBQUU7TUFBRXBDLFFBQVEsRUFBRXFFLFdBQVcsR0FBRztRQUFFRSxLQUFLLEVBQUVGO01BQVQsQ0FBSCxHQUE0Qkc7SUFBbkQsQ0FEUztJQUVoQnJDLEtBQUssRUFBRTtNQUFFbkMsUUFBUSxFQUFFc0UsV0FBVyxHQUFHO1FBQUVDLEtBQUssRUFBRUQ7TUFBVCxDQUFILEdBQTRCRTtJQUFuRDtFQUZTLENBQXBCO0VBS0ExRCxTQUFTLENBQUNDLFlBQVYsQ0FBdUJnRCxZQUF2QixDQUFvQ0QsV0FBcEMsRUFBaUQ3QyxJQUFqRCxDQUFzRCxVQUFDcUUsVUFBRCxFQUFnQjtJQUVsRWpGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9DQUFaO0lBRUErRixRQUFRLEdBQUd6SSxJQUFJLENBQUM4QyxJQUFMLENBQVUyQixJQUFJLENBQUNzQixFQUFmLEVBQW1CMkIsVUFBbkIsQ0FBWDs7SUFFQSxJQUFJZSxRQUFKLEVBQWM7TUFFVixJQUFJRixHQUFHLEdBQUcsQ0FBVjtNQUVBRSxRQUFRLENBQUN0QixFQUFULENBQVksUUFBWixFQUFzQixVQUFDTyxVQUFELEVBQWdCO1FBRWxDLElBQUlhLEdBQUcsSUFBSSxDQUFYLEVBQWM7VUFHVjlGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG1DQUFaOztVQUVBLElBQUlnRixVQUFVLENBQUNILGNBQVgsR0FBNEJ2RixNQUE1QixJQUFzQyxDQUF0QyxJQUEyQzBGLFVBQVUsQ0FBQ0YsY0FBWCxHQUE0QnhGLE1BQTVCLElBQXNDLENBQXJGLEVBQXdGO1lBRXBGOEQsaUJBQWlCLENBQUNyQixJQUFJLENBQUNzQixFQUFOLENBQWpCO1lBRUEwQixhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO1lBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDcUMsUUFBUSxDQUFDekksSUFBMUM7WUFDQXlILGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MseUJBQXBDO1lBQ0FxQixhQUFhLENBQUMvRCxLQUFkLEdBQXNCLEtBQXRCO1lBRUEwQixRQUFRLENBQUNxQyxhQUFELEVBQWdCQyxVQUFoQixDQUFSO1VBR0gsQ0FaRCxNQVlPO1lBRUg1QixpQkFBaUIsQ0FBQ3JCLElBQUksQ0FBQ3NCLEVBQU4sQ0FBakI7WUFFQTBCLGFBQWEsR0FBRzlHLFFBQVEsQ0FBQ3dCLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBaEI7WUFDQXNGLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsSUFBM0IsRUFBaUMzQixJQUFJLENBQUNzQixFQUF0QztZQUNBMEIsYUFBYSxDQUFDckIsWUFBZCxDQUEyQixPQUEzQixFQUFvQyx5QkFBcEM7WUFDQXFCLGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsVUFBM0IsRUFBdUMsVUFBdkM7WUFDQXFCLGFBQWEsQ0FBQy9ELEtBQWQsR0FBc0IsS0FBdEI7WUFFQXlCLFFBQVEsQ0FBQ3NDLGFBQUQsRUFBZ0JDLFVBQWhCLENBQVI7VUFFSDtRQUNKOztRQUdEYSxHQUFHO01BQ04sQ0FwQ0Q7TUFzQ0FFLFFBQVEsQ0FBQ3RCLEVBQVQsQ0FBWSxPQUFaLEVBQXFCLFlBQU07UUFDdkJyQixpQkFBaUIsQ0FBQ3JCLElBQUksQ0FBQ3NCLEVBQU4sQ0FBakI7TUFDSCxDQUZEO01BSUEwQyxRQUFRLENBQUN0QixFQUFULENBQVksT0FBWixFQUFxQixVQUFDZCxHQUFELEVBQVM7UUFDMUI1RCxPQUFPLENBQUNDLEdBQVIsQ0FBWTJELEdBQVo7TUFDSCxDQUZEO01BSUE1RixlQUFlLENBQUNnRSxJQUFJLENBQUNzQixFQUFOLENBQWYsR0FBMkIwQyxRQUEzQjtJQUNIO0VBR0osQ0E1REQsV0E0RFMsVUFBQzdFLEtBQUQsRUFBVztJQUVoQixJQUFNOEUsZ0JBQWdCLEdBQUc7TUFDckJsRSxLQUFLLEVBQUU7UUFBRXBDLFFBQVEsRUFBRXFFLFdBQVcsR0FBRztVQUFFRSxLQUFLLEVBQUVGO1FBQVQsQ0FBSCxHQUE0Qkc7TUFBbkQsQ0FEYztNQUVyQnJDLEtBQUssRUFBRTtJQUZjLENBQXpCO0lBS0FyQixTQUFTLENBQUNDLFlBQVYsQ0FBdUJnRCxZQUF2QixDQUFvQ3VDLGdCQUFwQyxFQUFzRHJGLElBQXRELENBQTJELFVBQUNxRSxVQUFELEVBQWdCO01BRXZFakYsT0FBTyxDQUFDQyxHQUFSLENBQVksMEJBQVo7TUFFQStGLFFBQVEsR0FBR3pJLElBQUksQ0FBQzhDLElBQUwsQ0FBVTJCLElBQUksQ0FBQ3NCLEVBQWYsRUFBbUIyQixVQUFuQixDQUFYOztNQUVBLElBQUllLFFBQUosRUFBYztRQUVWLElBQUlGLEdBQUcsR0FBRyxDQUFWO1FBRUFFLFFBQVEsQ0FBQ3RCLEVBQVQsQ0FBWSxRQUFaLEVBQXNCLFVBQUNPLFVBQUQsRUFBZ0I7VUFHbENqRixPQUFPLENBQUNDLEdBQVIsQ0FBWSxnREFBWjs7VUFFQSxJQUFJNkYsR0FBRyxJQUFJLENBQVgsRUFBYztZQUVWOUYsT0FBTyxDQUFDQyxHQUFSLENBQVlnRixVQUFVLENBQUNILGNBQVgsR0FBNEJ2RixNQUF4QztZQUNBUyxPQUFPLENBQUNDLEdBQVIsQ0FBWWdGLFVBQVUsQ0FBQ0YsY0FBWCxHQUE0QnhGLE1BQXhDOztZQUVBLElBQUkwRixVQUFVLENBQUNILGNBQVgsR0FBNEJ2RixNQUE1QixJQUFzQyxDQUF0QyxJQUEyQzBGLFVBQVUsQ0FBQ0YsY0FBWCxHQUE0QnhGLE1BQTVCLElBQXNDLENBQXJGLEVBQXdGO2NBRXBGUyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWjtjQUVBb0QsaUJBQWlCLENBQUMyQyxRQUFRLENBQUN6SSxJQUFWLENBQWpCO2NBRUF5SCxhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO2NBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDcUMsUUFBUSxDQUFDekksSUFBMUM7Y0FDQXlILGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MsaUJBQXBDO2NBQ0FxQixhQUFhLENBQUMvRCxLQUFkLEdBQXNCLEtBQXRCO2NBRUEwQixRQUFRLENBQUNxQyxhQUFELEVBQWdCQyxVQUFoQixDQUFSO1lBR0gsQ0FkRCxNQWNPO2NBRUhqRixPQUFPLENBQUNDLEdBQVIsQ0FBWSxtQkFBWjtjQUVBb0QsaUJBQWlCLENBQUMyQyxRQUFRLENBQUN6SSxJQUFWLENBQWpCO2NBR0F5SCxhQUFhLEdBQUc5RyxRQUFRLENBQUN3QixhQUFULENBQXVCLE9BQXZCLENBQWhCO2NBQ0FzRixhQUFhLENBQUNyQixZQUFkLENBQTJCLElBQTNCLEVBQWlDcUMsUUFBUSxDQUFDekksSUFBMUM7Y0FDQXlILGFBQWEsQ0FBQ3JCLFlBQWQsQ0FBMkIsT0FBM0IsRUFBb0MscUJBQXBDO2NBQ0FxQixhQUFhLENBQUNyQixZQUFkLENBQTJCLFVBQTNCLEVBQXVDLFVBQXZDO2NBQ0FxQixhQUFhLENBQUMvRCxLQUFkLEdBQXNCLEtBQXRCO2NBRUF5QixRQUFRLENBQUNzQyxhQUFELEVBQWdCQyxVQUFoQixDQUFSO1lBQ0g7VUFFSjs7VUFHRGEsR0FBRztRQUNOLENBNUNEO1FBOENBRSxRQUFRLENBQUN0QixFQUFULENBQVksT0FBWixFQUFxQixZQUFNO1VBQ3ZCckIsaUJBQWlCLENBQUNyQixJQUFJLENBQUNzQixFQUFOLENBQWpCO1FBQ0gsQ0FGRDtRQUlBMEMsUUFBUSxDQUFDdEIsRUFBVCxDQUFZLE9BQVosRUFBcUIsVUFBQ2QsR0FBRCxFQUFTO1VBQzFCNUQsT0FBTyxDQUFDQyxHQUFSLENBQVkyRCxHQUFaO1FBQ0gsQ0FGRDtRQUlBNUYsZUFBZSxDQUFDZ0UsSUFBSSxDQUFDc0IsRUFBTixDQUFmLEdBQTJCMEMsUUFBM0I7TUFDSDtJQUdKLENBcEVELFdBb0VTLFVBQUM3RSxLQUFELEVBQVc7TUFFaEI7TUFJQW5CLE9BQU8sQ0FBQ0MsR0FBUixDQUFZa0IsS0FBWjtJQUNILENBM0VEO0VBNkVILENBaEpEO0VBb0pBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWdDQyxDQS9PRDtBQWtQQTlELE1BQU0sQ0FBQ3FILEVBQVAsQ0FBVSxnQkFBVixFQUE0QixVQUFBcEIsRUFBRSxFQUFJO0VBRTlCdEQsT0FBTyxDQUFDQyxHQUFSLENBQVksa0JBQVosRUFBZ0NxRCxFQUFoQztFQUVBRCxpQkFBaUIsQ0FBQ0MsRUFBRCxDQUFqQjs7RUFFQSxJQUFJO0lBQ0F0RixlQUFlLENBQUNzRixFQUFELENBQWYsQ0FBb0I0QyxLQUFwQjtFQUVILENBSEQsQ0FHRSxPQUFPdEMsR0FBUCxFQUFZO0lBRVY1RCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxxQkFBWixFQUFtQzJELEdBQW5DO0VBQ0g7QUFFSixDQWREO0FBa0JBMUYsUUFBUSxDQUFDQyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ21FLGdCQUExQyxDQUEyRCxPQUEzRCxFQUFvRSxZQUFXO0VBQzNFOEMsV0FBVztBQUNkLENBRkQ7QUFLQTs7QUFDQWUsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFtQkMsS0FBbkIsQ0FBeUIsWUFBVztFQUNoQ0QsQ0FBQyxDQUFDLHNCQUFELENBQUQsQ0FBMEJFLE9BQTFCLENBQWtDO0lBQUVDLEtBQUssRUFBRTtFQUFULENBQWxDLEVBQXVELEVBQXZELEVBQTJELFlBQU0sQ0FDN0Q7RUFDSCxDQUZEO0FBR0gsQ0FKRDtBQU1BSCxDQUFDLENBQUMsaUJBQUQsQ0FBRCxDQUFxQkMsS0FBckIsQ0FBMkIsWUFBVztFQUNsQ0QsQ0FBQyxDQUFDLHFCQUFELENBQUQsQ0FBeUJFLE9BQXpCLENBQWlDO0lBQUVDLEtBQUssRUFBRTtFQUFULENBQWpDLEVBQXNELEVBQXRELEVBQTBELFlBQU0sQ0FDNUQ7RUFDSCxDQUZEO0FBR0gsQ0FKRCIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy93ZWJSVEMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIENvcHlyaWdodCAoYykgMjAxNSBUaGUgV2ViUlRDIHByb2plY3QgYXV0aG9ycy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZVxuICogIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHNvdXJjZVxuICogIHRyZWUuXG4gKi9cblxuY29uc3Qgc29ja2V0ID0gaW8oJ2h0dHBzOi8vcnRjc2VydmVyLmVzdWNjZXNzLWluYy5jb206NDAwMDInLCB7fSk7XG5cbmNvbnN0IHBlZXIgPSBuZXcgUGVlcih7XG4gICAgaW5pdGlhdG9yOiBmYWxzZSxcbiAgICB0cmlja2xlOiBmYWxzZSxcbn0pO1xuXG4ndXNlIHN0cmljdCc7XG5sZXQgbXlWaWRlb1N0cmVhbTtcbmxldCBteUF1ZGlvU3RyZWFtO1xuXG5sZXQgdmlkZW9FbGVtZW50O1xubGV0IGF1ZGlvRWxlbWVudDtcblxuXG5cbmxldCBzaGFyZWRTY3JlZW4gPSBmYWxzZTtcblxuY29uc3QgcGVlckNvbm5lY3Rpb25zID0ge31cbmxldCBtZWRpYUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteU1lZGlhQ29udGFpbmVyJyk7XG5cblxuXG5cbmxldCB2aWRlb0dyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlkZW9HcmlkJyk7XG5cbmNvbnN0IGF1ZGlvSW5wdXRTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QjYXVkaW9Tb3VyY2UnKTtcbmNvbnN0IGF1ZGlvT3V0cHV0U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VsZWN0I2F1ZGlvT3V0cHV0Jyk7XG5jb25zdCB2aWRlb1NlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCN2aWRlb1NvdXJjZScpO1xuY29uc3Qgc2VsZWN0b3JzID0gW2F1ZGlvSW5wdXRTZWxlY3QsIGF1ZGlvT3V0cHV0U2VsZWN0LCB2aWRlb1NlbGVjdF07XG5cbmF1ZGlvT3V0cHV0U2VsZWN0LmRpc2FibGVkID0gISgnc2lua0lkJyBpbiBIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGdvdERldmljZXMoZGV2aWNlSW5mb3MpIHtcbiAgICAvLyBIYW5kbGVzIGJlaW5nIGNhbGxlZCBzZXZlcmFsIHRpbWVzIHRvIHVwZGF0ZSBsYWJlbHMuIFByZXNlcnZlIHZhbHVlcy5cbiAgICBjb25zdCB2YWx1ZXMgPSBzZWxlY3RvcnMubWFwKHNlbGVjdCA9PiBzZWxlY3QudmFsdWUpO1xuICAgIHNlbGVjdG9ycy5mb3JFYWNoKHNlbGVjdCA9PiB7XG4gICAgICAgIHdoaWxlIChzZWxlY3QuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgc2VsZWN0LnJlbW92ZUNoaWxkKHNlbGVjdC5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBkZXZpY2VJbmZvcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBkZXZpY2VJbmZvID0gZGV2aWNlSW5mb3NbaV07XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBvcHRpb24udmFsdWUgPSBkZXZpY2VJbmZvLmRldmljZUlkO1xuXG4gICAgICAgIGlmIChkZXZpY2VJbmZvLmtpbmQgPT09ICdhdWRpb2lucHV0Jykge1xuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBkZXZpY2VJbmZvLmxhYmVsIHx8IGBtaWNyb3Bob25lICR7YXVkaW9JbnB1dFNlbGVjdC5sZW5ndGggKyAxfWA7XG4gICAgICAgICAgICBhdWRpb0lucHV0U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoZGV2aWNlSW5mby5raW5kID09PSAnYXVkaW9vdXRwdXQnKSB7XG4gICAgICAgICAgICBvcHRpb24udGV4dCA9IGRldmljZUluZm8ubGFiZWwgfHwgYHNwZWFrZXIgJHthdWRpb091dHB1dFNlbGVjdC5sZW5ndGggKyAxfWA7XG4gICAgICAgICAgICBhdWRpb091dHB1dFNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGRldmljZUluZm8ua2luZCA9PT0gJ3ZpZGVvaW5wdXQnKSB7XG4gICAgICAgICAgICBvcHRpb24udGV4dCA9IGRldmljZUluZm8ubGFiZWwgfHwgYGNhbWVyYSAke3ZpZGVvU2VsZWN0Lmxlbmd0aCArIDF9YDtcbiAgICAgICAgICAgIHZpZGVvU2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU29tZSBvdGhlciBraW5kIG9mIHNvdXJjZS9kZXZpY2U6ICcsIGRldmljZUluZm8pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdG9ycy5mb3JFYWNoKChzZWxlY3QsIHNlbGVjdG9ySW5kZXgpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNlbGVjdC5jaGlsZE5vZGVzKS5zb21lKG4gPT4gbi52YWx1ZSA9PT0gdmFsdWVzW3NlbGVjdG9ySW5kZXhdKSkge1xuICAgICAgICAgICAgc2VsZWN0LnZhbHVlID0gdmFsdWVzW3NlbGVjdG9ySW5kZXhdO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbm5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oZ290RGV2aWNlcykuY2F0Y2goaGFuZGxlRXJyb3IpO1xuXG4vLyBBdHRhY2ggYXVkaW8gb3V0cHV0IGRldmljZSB0byB2aWRlbyBlbGVtZW50IHVzaW5nIGRldmljZS9zaW5rIElELlxuZnVuY3Rpb24gYXR0YWNoU2lua0lkKGVsZW1lbnQsIHNpbmtJZCkge1xuXG4gICAgLy8obXV0ZSBlbGVtZW50LCBmZWVkYmFjayBpZiBmYWxzZSlcbiAgICBlbGVtZW50Lm11dGVkID0gdHJ1ZTtcblxuICAgIGlmICh0eXBlb2YgZWxlbWVudC5zaW5rSWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVsZW1lbnQuc2V0U2lua0lkKHNpbmtJZClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2VzcywgYXVkaW8gb3V0cHV0IGRldmljZSBhdHRhY2hlZDogJHtzaW5rSWR9YCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdTZWN1cml0eUVycm9yJykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBgWW91IG5lZWQgdG8gdXNlIEhUVFBTIGZvciBzZWxlY3RpbmcgYXVkaW8gb3V0cHV0IGRldmljZTogJHtlcnJvcn1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgLy8gSnVtcCBiYWNrIHRvIGZpcnN0IG91dHB1dCBkZXZpY2UgaW4gdGhlIGxpc3QgYXMgaXQncyB0aGUgZGVmYXVsdC5cbiAgICAgICAgICAgICAgICBhdWRpb091dHB1dFNlbGVjdC5zZWxlY3RlZEluZGV4ID0gMDtcbiAgICAgICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybignQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IG91dHB1dCBkZXZpY2Ugc2VsZWN0aW9uLicpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hhbmdlQXVkaW9EZXN0aW5hdGlvbigpIHtcbiAgICBjb25zdCBhdWRpb0Rlc3RpbmF0aW9uID0gYXVkaW9PdXRwdXRTZWxlY3QudmFsdWU7XG5cblxuICAgIGlmIChteVZpZGVvU3RyZWFtKSB7XG4gICAgICAgIGF0dGFjaFNpbmtJZCh2aWRlb0VsZW1lbnQsIGF1ZGlvRGVzdGluYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dGFjaFNpbmtJZChhdWRpb0VsZW1lbnQsIGF1ZGlvRGVzdGluYXRpb24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ290U3RyZWFtKHN0cmVhbSkge1xuICAgIHdpbmRvdy5zdHJlYW0gPSBzdHJlYW07IC8vIG1ha2Ugc3RyZWFtIGF2YWlsYWJsZSB0byBjb25zb2xlXG4gICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHN0cmVhbTtcblxuICAgIC8vUmVnaXN0ZXIgdGhlIHZpZGVvIHN0cmVhbSB0byBteSBTdHJlYW1cbiAgICBteVZpZGVvU3RyZWFtID0gc3RyZWFtO1xuXG4gICAgLy8gUmVmcmVzaCBidXR0b24gbGlzdCBpbiBjYXNlIGxhYmVscyBoYXZlIGJlY29tZSBhdmFpbGFibGVcbiAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVycm9yKSB7XG4gICAgLy9zdGFydCBhIHZpZGVvIHdpdGggYXVkaW8gY29ubmVjdGlvbiB3aWR0aCBkYXRhIG9mIHVzZXJcbiAgICBsZXQgdmlkZW8gPSBmYWxzZTtcbiAgICBsZXQgYXVkaW8gPSB0cnVlO1xuXG5cbiAgICAvL3N0YXJ0IGF1ZGlvXG4gICAgZGF0YSA9IHtcbiAgICAgICAgJ2lkJzogbXlJZCxcbiAgICAgICAgJ3VzZXInOiB1c2VyLFxuICAgICAgICAncm9vbUlEJzogcm9vbUlEXG4gICAgfVxuICAgIHN0YXJ0KHZpZGVvLCBhdWRpbywgZGF0YSk7XG59XG5cblxuZnVuY3Rpb24gYWRkTXlBdWRpbyhhdWRpbywgc3RyZWFtKSB7XG4gICAgYXVkaW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIGF1ZGlvLm11dGVkID0gdHJ1ZTtcblxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgKCkgPT4ge1xuICAgICAgICBhdWRpby5wbGF5KClcbiAgICB9KVxuICAgIG1lZGlhQ29udGFpbmVyLmFwcGVuZChhdWRpbyk7XG59XG5cblxuZnVuY3Rpb24gYWRkTXlWaWRlbyh2aWRlbywgc3RyZWFtKSB7XG4gICAgdmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIHZpZGVvLm11dGVkID0gdHJ1ZTtcblxuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgKCkgPT4ge1xuICAgICAgICB2aWRlby5wbGF5KClcbiAgICB9KVxuICAgIG1lZGlhQ29udGFpbmVyLmFwcGVuZCh2aWRlbyk7XG59XG5cblxuZnVuY3Rpb24gYWRkQXVkaW8oYXVkaW8sIHN0cmVhbSkge1xuICAgIGF1ZGlvLnNyY09iamVjdCA9IHN0cmVhbTtcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsICgpID0+IHtcbiAgICAgICAgYXVkaW8ucGxheSgpXG4gICAgfSlcbiAgICB2aWRlb0dyaWQuYXBwZW5kKGF1ZGlvKTtcbn1cblxuZnVuY3Rpb24gYWRkVmlkZW8odmlkZW8sIHN0cmVhbSkge1xuICAgIHZpZGVvLnNyY09iamVjdCA9IHN0cmVhbTtcbiAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsICgpID0+IHtcbiAgICAgICAgdmlkZW8ucGxheSgpXG4gICAgfSlcbiAgICB2aWRlb0dyaWQuYXBwZW5kKHZpZGVvKTtcbn1cblxuXG5mdW5jdGlvbiBhZGRWaWRlb0NvbnRlbnQoY29udGFpbmVySUQsIHZpZGVvLCBzdHJlYW0pIHtcbiAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XG4gICAgICAgIHZpZGVvLnBsYXkoKVxuICAgIH0pXG5cbiAgICBsZXQgY29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRhaW5lcklEKTtcbiAgICBpZiAoY29udGFpbmVyRWxlbWVudCkge1xuICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZCh2aWRlbyk7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIHNob3dCeUVsZW1lbnRJZChlbGVtZW50SUQpIHtcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SUQpO1xuICAgIGlmIChlbCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVCeUVsZW1lbnRJZChlbGVtZW50SUQpIHtcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SUQpO1xuICAgIGlmIChlbCkge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWxlbWVudEJ5SUQoaWQpIHtcbiAgICBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlVXNlck1lZGlhKHZpZGVvLCBhdWRpbywgY29uc3RyYWludHMpIHtcblxuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKChzdHJlYW0pID0+IHtcblxuICAgICAgICByZW1vdmVFbGVtZW50QnlJRChcIm15VmlkZW9cIik7XG4gICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKFwibXlBdWRpb1wiKTtcblxuICAgICAgICBpZiAoYXVkaW8gPT0gdHJ1ZSAmJiB2aWRlbyA9PSB0cnVlKSB7XG4gICAgICAgICAgICBteUF1ZGlvU3RyZWFtID0gbnVsbDtcblxuICAgICAgICAgICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxuICAgICAgICAgICAgbXlWaWRlb1N0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgIHdpbmRvdy5zdHJlYW0gPSBzdHJlYW07IC8vIG1ha2Ugc3RyZWFtIGF2YWlsYWJsZSB0byBjb25zb2xlICAgICBcbiAgICAgICAgICAgIC8qKioqKioqXG4gICAgICAgICAgICAgICAgKE5PVEU6IFRISVMgU0hPVUxEIEJFIE1VVEVEID0gVFJVRSkgXG4gICAgICAgICAgICAqKioqKioqL1xuXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIFwibXlWaWRlb1wiKTtcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy92aWRlb0VsZW1lbnQubXV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgYWRkTXlWaWRlbyh2aWRlb0VsZW1lbnQsIHN0cmVhbSk7XG5cblxuICAgICAgICAgICAgLy8gZGV0ZWN0RGVza3RvcFNoYXJlZChzdHJlYW0pXG4gICAgICAgIH0gZWxzZSB7XG5cblxuICAgICAgICAgICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxuICAgICAgICAgICAgbXlWaWRlb1N0cmVhbSA9IG51bGw7XG4gICAgICAgICAgICB3aW5kb3cuc3RyZWFtID0gc3RyZWFtOyAvLyBtYWtlIHN0cmVhbSBhdmFpbGFibGUgdG8gY29uc29sZSAgICAgICBcblxuICAgICAgICAgICAgLy9hZGQgdG8gbXkgYXVkaW8gc3RyZWFtXG4gICAgICAgICAgICBteUF1ZGlvU3RyZWFtID0gc3RyZWFtO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYSBhdWRpbyBvbmx5XCIpXG5cbiAgICAgICAgICAgIC8qKioqKioqXG4gICAgICAgICAgICAgICAgKE5PVEU6IFRISVMgU0hPVUxEIEJFIE1VVEVEID0gVFJVRSkgXG4gICAgICAgICAgICAqKioqKioqL1xuICAgICAgICAgICAgYXVkaW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgIGF1ZGlvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm15QXVkaW9cIik7XG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcbiAgICAgICAgICAgIC8vYXVkaW9FbGVtZW50Lm11dGVkID0gZmFsc2U7XG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQubXV0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBhZGRNeUF1ZGlvKGF1ZGlvRWxlbWVudCwgc3RyZWFtKTtcblxuICAgICAgICAgICAgLy8gZGV0ZWN0RGVza3RvcFNoYXJlZChzdHJlYW0pXG5cblxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCk7XG5cblxuICAgIH0pLnRoZW4oZ290RGV2aWNlcykuY2F0Y2goKGVycikgPT4ge1xuXG4gICAgICAgIGlmICh2aWRlbyA9PSB0cnVlICYmIGF1ZGlvID09IHRydWUpIHtcblxuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvL2FsZXJ0KFwibm8gbWVkaWEgZGV0ZWN0ZWQsIHBsZWFzZSBjb25uZWN0IGFuZCB0cnkgYWdhaW5cIilcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbn1cblxuZnVuY3Rpb24gc3RhcnQodmlkZW8sIGF1ZGlvLCBkYXRhKSB7XG5cbiAgICBpZiAod2luZG93LnN0cmVhbSkge1xuICAgICAgICB3aW5kb3cuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgYXVkaW9Tb3VyY2UgPSBhdWRpb0lucHV0U2VsZWN0LnZhbHVlO1xuICAgIGNvbnN0IHZpZGVvU291cmNlID0gdmlkZW9TZWxlY3QudmFsdWU7XG5cbiAgICBpZiAodmlkZW8gPT0gdHJ1ZSAmJiBhdWRpbyA9PSB0cnVlKSB7XG5cbiAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB7XG4gICAgICAgICAgICBhdWRpbzogeyBkZXZpY2VJZDogYXVkaW9Tb3VyY2UgPyB7IGV4YWN0OiBhdWRpb1NvdXJjZSB9IDogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdmlkZW9Tb3VyY2UgPyB7IGV4YWN0OiB2aWRlb1NvdXJjZSB9IDogdW5kZWZpbmVkIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcImNvbm5lY3QgdmlkZW8gOiBzdGFydFwiKVxuXG4gICAgICAgIGNyZWF0ZVVzZXJNZWRpYSh2aWRlbywgYXVkaW8sIGNvbnN0cmFpbnRzKVxuXG4gICAgfSBlbHNlIGlmICh2aWRlbyA9PSBmYWxzZSAmJiBhdWRpbyA9PSB0cnVlKSB7XG5cbiAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB7XG4gICAgICAgICAgICBhdWRpbzogeyBkZXZpY2VJZDogYXVkaW9Tb3VyY2UgPyB7IGV4YWN0OiBhdWRpb1NvdXJjZSB9IDogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICB2aWRlbzogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcImNvbm5lY3QgYXVkaW8gOiBzdGFydFwiKVxuICAgICAgICBjcmVhdGVVc2VyTWVkaWEodmlkZW8sIGF1ZGlvLCBjb25zdHJhaW50cylcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgLy9hbGVydChcIm5vIG1lZGlhIGRldGVjdGVkLCBwbGVhc2UgY29ubmVjdCBhbmQgdHJ5IGFnYWluXCIpXG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIHJlc3RhcnQoKSB7XG5cbiAgICBpZiAod2luZG93LnN0cmVhbSkge1xuICAgICAgICB3aW5kb3cuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xuICAgICAgICAgICAgdHJhY2suc3RvcCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XG4gICAgY29uc3QgdmlkZW9Tb3VyY2UgPSB2aWRlb1NlbGVjdC52YWx1ZTtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxuICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdmlkZW9Tb3VyY2UgPyB7IGV4YWN0OiB2aWRlb1NvdXJjZSB9IDogdW5kZWZpbmVkIH1cbiAgICB9O1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKChzdHJlYW0pID0+IHtcblxuICAgICAgICBjb25zb2xlLmxvZyhcInJlc3RhcnRlZFwiKVxuXG5cbiAgICAgICAgd2luZG93LnN0cmVhbSA9IHN0cmVhbTsgLy8gbWFrZSBzdHJlYW0gYXZhaWxhYmxlIHRvIGNvbnNvbGVcbiAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHN0cmVhbTtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiaSBoYXZlIG11dGVkIHRoaXNcIilcbiAgICAgICAgLy92aWRlb0VsZW1lbnQubXV0ZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vUmVnaXN0ZXIgdGhlIHZpZGVvIHN0cmVhbSB0byBteSBTdHJlYW1cbiAgICAgICAgbXlWaWRlb1N0cmVhbSA9IHN0cmVhbTtcblxuICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgJ2lkJzogbXlJZCxcbiAgICAgICAgICAgICd1c2VyJzogdXNlcixcbiAgICAgICAgICAgICdyb29tSUQnOiByb29tSUQsXG4gICAgICAgICAgICAndmlkZW9TdHJlYW0nOiBteVZpZGVvU3RyZWFtXG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgc29ja2V0LmVtaXQoXCJjaGFuZ2VNZWRpYVwiLCBkYXRhKTtcblxuICAgICAgICByZW1vdmVFbGVtZW50QnlJRChteUlkKTtcblxuXG4gICAgfSkuY2F0Y2goaGFuZGxlRXJyb3IpO1xuXG59XG5cblxuXG4vL3VzZXIgZW5kIHN0b3Agc2hhcmluZ1xuZnVuY3Rpb24gc3RvcFNoYXJpbmcoKSB7XG5cbiAgICBsZXQgc2hvd0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlc3NvblNsaWRlXCIpO1xuXG4gICAgaWYgKHNob3dFbGVtZW50KSB7XG4gICAgICAgIHNob3dFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cblxuICAgIGxldCByZW1vdmVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzaGFyZWRWaWRlb1wiKTtcblxuICAgIGlmIChyZW1vdmVFbGVtZW50KSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZXRlY3REZXNrdG9wU2hhcmVkKHN0cmVhbSkge1xuXG5cblxuICAgIHBlZXIub24oJ2Nvbm5lY3Rpb24nLCBmdW5jdGlvbihjb25uKSB7XG5cbiAgICAgICAgY29ubi5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICAgICAgaWYgKGRhdGEuc2hhcmVkU2NyZWVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvL0B0b3RvIHBlZXIuc3RyZWFtIHRvIHdhaXQgZm9yIHRoZVxuXG4gICAgICAgICAgICAgICAgc2hhcmVkU2NyZWVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNoYXJlZFNjcmVlbiA9PSBmYWxzZSkge1xuXG4gICAgICAgICAgICAgICAgc3RvcFNoYXJpbmcoKTtcblxuICAgICAgICAgICAgICAgIHNoYXJlZFNjcmVlbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGFsZXJ0KFwidGhlIHN0cmVhbSBkYXRhXCIpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuXG4gICAgcGVlci5vbignY2xvc2UnLCBmdW5jdGlvbihjb25uKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2xvc2VcIilcbiAgICB9KTtcblxuICAgIHBlZXIub24oJ2NhbGwnLCBjYWxsID0+IHtcblxuICAgICAgICBpZiAoc3RyZWFtID09IG51bGwpIHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJhbnN3ZXIgdGhlIHN0cmVhbSB3aXRob3V0IGFueSBzdHJlYW1cIiwgY2FsbClcbiAgICAgICAgICAgIGNhbGwuYW5zd2VyKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJhbnN3ZXIgdGhlIHN0cmVhbVwiLCBzdHJlYW0pXG5cbiAgICAgICAgICAgIGNhbGwuYW5zd2VyKHN0cmVhbSk7XG5cbiAgICAgICAgICAgIGlmIChzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggPT0gMSAmJiBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xuXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJyZWNpZXZlciBmcm9tIHNlbmRlciBpcyBhIHZpZGVvIDExLTI1IDo6IChwZWVyKVwiICsgY2FsbC5wZWVyKVxuXG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoY2FsbC5wZWVyKTtcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGNhbGwucGVlcik7XG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInBlZXJDYWxsQmFja1ZpZGVvXCIpO1xuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHN0cmVhbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICBhbGVydChcInJlY2lldmVyIGZyb20gc2VuZGVyIGlzIGEgYXVkaW8gMjItMjUgOjogKHBlZXIpXCIgKyBjYWxsLnBlZXIpXG5cbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgY2FsbC5wZWVyKTtcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrQXVkaW9cIik7IC8vY2FsbCBwZWVyXG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb250cm9sc1wiLCBcImNvbnRyb2xzXCIpO1xuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHN0cmVhbSk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGwub24oJ3N0cmVhbScsIHVzZXJTdHJlYW0gPT4ge1xuXG4gICAgICAgICAgICBpZiAoc2hhcmVkU2NyZWVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzaGFyZWRWaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgIHNoYXJlZFZpZC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNoYXJlZFZpZGVvXCIpO1xuXG5cbiAgICAgICAgICAgICAgICAvL3RoZSBsZXNzb24gc2hhcmVkIGNvbnRhaW5lciBtdXN0IGJlIG9uIHRoZSBtZW1iZXIgbGVzc29uIHNsaWRlciBjb21wb25lbnRcbiAgICAgICAgICAgICAgICBhZGRWaWRlb0NvbnRlbnQoJ2xlc3NvblNoYXJlZENvbnRhaW5lcicsIHNoYXJlZFZpZCwgdXNlclN0cmVhbSk7XG5cbiAgICAgICAgICAgICAgICAvL2hpZGUgbGVzc29uIFNsaWRlXG4gICAgICAgICAgICAgICAgaGlkZUJ5RWxlbWVudElkKFwibGVzc29uU2xpZGVcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy90aGUgdXNlciBkaWQgbm90XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJ1c2VyIHZpZGVvIFwiKVxuXG4gICAgICAgICAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogbXlJZCxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZXInOiB1c2VyLFxuICAgICAgICAgICAgICAgICAgICAncm9vbUlEJzogcm9vbUlELFxuICAgICAgICAgICAgICAgICAgICAndmlkZW9TdHJlYW0nOiBtZWRpYUNhbGxTdHJlYW1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdChcImNoYW5nZU1lZGlhXCIsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhbGwub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYWxsZWQgZmluaXNoXCIpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhbGwub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgYWxlcnQoZXJyKVxuICAgICAgICB9KTtcblxuICAgICAgICBjYWxsLm9uKFwiY2xvc2VcIiwgKCkgPT4ge1xuXG4gICAgICAgICAgICBhbGVydChcImNsb3NlZCBzaGFyZWRcIilcbiAgICAgICAgICAgIHNoYXJlZFZpZC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cblxuICAgIH0pO1xufTtcblxuXG5cblxuZnVuY3Rpb24gc2hhcmVTY3JlZW4oKSB7XG5cbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldERpc3BsYXlNZWRpYSh7XG4gICAgICAgIHZpZGVvOiB0cnVlLFxuICAgICAgICBhdWRpbzogdHJ1ZVxuICAgIH0pLnRoZW4oKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICBzaGFyZWRTY3JlZW4gPSB1c2VyU3RyZWFtO1xuXG4gICAgICAgIC8vQHRvZG86IChoaWRlIHNsaWRlIHRoZW4gc2hvdyB0aGUgdXNlciBzaGFyZWQpXG4gICAgICAgIGNvbnN0IHNoYXJlZFZpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgIHNoYXJlZFZpZC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNoYXJlZFZpZGVvXCIpO1xuICAgICAgICBzaGFyZWRWaWQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAvL3RoZSBsZXNzb24gc2hhcmVkIGNvbnRhaW5lciBtdXN0IGJlIG9uIHRoZSBtZW1iZXIgbGVzc29uIHNsaWRlciBjb21wb25lbnRcbiAgICAgICAgYWRkVmlkZW9Db250ZW50KCdsZXNzb25TaGFyZWRDb250YWluZXInLCBzaGFyZWRWaWQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgIC8vaGlkZSBsZXNzb24gU2xpZGVcbiAgICAgICAgaGlkZUJ5RWxlbWVudElkKFwibGVzc29uU2xpZGVcIilcblxuICAgICAgICBjb25zb2xlLmxvZyhwZWVyQ29ubmVjdGlvbnMpXG5cblxuXG4gICAgICAgIC8vQ29ubmVjdCB0byBwZWVyc1xuICAgICAgICBPYmplY3Qua2V5cyhwZWVyQ29ubmVjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24ocGVlcklEKSB7XG5cbiAgICAgICAgICAgIC8vY29ubmVjdCBhbmQgc2VuZFxuICAgICAgICAgICAgdmFyIGNvbm4gPSBwZWVyLmNvbm5lY3QocGVlcklEKTtcblxuICAgICAgICAgICAgY29ubi5vbignb3BlbicsICgpID0+IHtcblxuICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKiogICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgKE5FVykgc2hhcmUgc2NyZWVuIGRhdGFcbiAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAnaWQnOiBwZWVySUQsXG4gICAgICAgICAgICAgICAgICAgICdzaGFyZWRTY3JlZW4nOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9hZGQgdG8gdGhlIGNvbm5lY3Rpb24sIGFuZCBzZW5kIHRoZW4gY2FsbFxuICAgICAgICAgICAgICAgIGNvbm4uc2VuZChkYXRhKTtcblxuICAgICAgICAgICAgICAgIGxldCBzaGFyaW5nU2NyZWVuID0gcGVlci5jYWxsKHBlZXJJRCwgc2hhcmVkU2NyZWVuKTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cblxuICAgICAgICAvL1RoZSBzY3JlZW4gcmVjb3JkIGlzIHN0b3BwZWQgYnkgbXlzZWxmXG4gICAgICAgIHNoYXJlZFNjcmVlbi5nZXRWaWRlb1RyYWNrcygpWzBdLm9uZW5kZWQgPSBmdW5jdGlvbigpIHtcblxuXG4gICAgICAgICAgICBzaG93QnlFbGVtZW50SWQoXCJsZXNzb25TbGlkZVwiKVxuXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNoYXJlZFZpZGVvXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICAvL3NlbmQgdGhpcyBzaGFyZWQgc2NyZWVuIGZhbHNlIHRvIHN0b3AgcGVlclxuICAgICAgICAgICAgT2JqZWN0LmtleXMocGVlckNvbm5lY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKHBlZXJJRCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGNvbm4gPSBwZWVyLmNvbm5lY3QocGVlcklEKTtcblxuICAgICAgICAgICAgICAgIGNvbm4ub24oJ29wZW4nLCAoKSA9PiB7XG5cblxuICAgICAgICAgICAgICAgICAgICAvKioqKioqKioqKioqKioqKioqKioqICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAoU1RPUCBTSEFSRSkgc2hhcmUgc2NyZWVuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IHBlZXJJRCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzaGFyZWRTY3JlZW4nOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29ubi5zZW5kKGRhdGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcblxuXG5cblxuXG4gICAgICAgIC8vc29ja2V0LmVtaXQoXCJ1c2VyU2hhcmVcIiwgcm9vbUlELCBzaGFyZWRTY3JlZW4pO1xuXG4gICAgfSk7XG59XG5cbmF1ZGlvSW5wdXRTZWxlY3Qub25jaGFuZ2UgPSByZXN0YXJ0O1xuYXVkaW9PdXRwdXRTZWxlY3Qub25jaGFuZ2UgPSBjaGFuZ2VBdWRpb0Rlc3RpbmF0aW9uO1xudmlkZW9TZWxlY3Qub25jaGFuZ2UgPSByZXN0YXJ0O1xuXG5cblxuXG5wZWVyLm9uKCdjb25uZWN0aW9uJywgZnVuY3Rpb24oY29ubikge1xuXG4gICAgY29ubi5vbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJwZWVyIGNvbm5lY3RlZFwiLCBkYXRhKVxuXG4gICAgICAgIGlmIChkYXRhLnNoYXJlZFNjcmVlbiA9PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHNoYXJlZFNjcmVlbiA9IHRydWU7XG5cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNoYXJlZFNjcmVlbiA9PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBzdG9wU2hhcmluZygpO1xuXG4gICAgICAgICAgICBzaGFyZWRTY3JlZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBhbGVydChcInRoZSBzdHJlYW0gZGF0YVwiKVxuICAgICAgICB9XG5cbiAgICB9KTtcblxuICAgIGNvbm4ub24oJ2Nsb3NlJywgKGNvbm4pID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0aW9uIG9mIHBlZXIgaGFzIGJlZW4gY2xvc2VkXCIsIGNvbm4pXG4gICAgfSk7XG5cbn0pO1xuXG5wZWVyLm9uKCdvcGVuJywgKGlkKSA9PiB7XG5cbiAgICBjb25zb2xlLmxvZyhcIm15IHBlZXIgaWRcIiArIGlkKVxuICAgIGNvbnNvbGUubG9nKFwibXkgdXNlciBcIiwgdXNlcilcbiAgICBjb25zb2xlLmxvZyhcIm15IHJvb20gaWQgXCIsIHJvb21JRClcblxuICAgIG15SWQgPSBpZDtcblxuICAgIGRhdGEgPSB7XG4gICAgICAgICdpZCc6IGlkLFxuICAgICAgICAndXNlcic6IHVzZXIsXG4gICAgICAgICdyb29tSUQnOiByb29tSURcbiAgICB9XG5cbiAgICBzb2NrZXQuZW1pdChcIm5ld1VzZXJcIiwgZGF0YSk7XG5cbiAgICAvL3N0YXJ0IGEgdmlkZW8gd2l0aCBhdWRpbyBjb25uZWN0aW9uIHdpZHRoIGRhdGEgb2YgdXNlclxuICAgIGxldCB2aWRlbyA9IHRydWU7XG4gICAgbGV0IGF1ZGlvID0gdHJ1ZTtcblxuICAgIC8vc3RhcnQgdGhlIG15IG93biB2aWRlbyBjYW1lcmFcblxuICAgIHN0YXJ0KHZpZGVvLCBhdWRpbywgZGF0YSlcblxufSk7XG5cblxuXG5wZWVyLm9uKCdjYWxsJywgY2FsbCA9PiB7XG5cbiAgICBsZXQgY3RyID0gMDtcblxuICAgIGNvbnNvbGUubG9nKFwiUEVFUjo6IENBTExJTkcuLi4gZm9yIGEgdmlkZW8gc3RyZWFtIG9yIGF1ZGlvIHN0cmVhbSAuLi5cIik7XG5cbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XG4gICAgY29uc3QgdmlkZW9Tb3VyY2UgPSB2aWRlb1NlbGVjdC52YWx1ZTtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxuICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdmlkZW9Tb3VyY2UgPyB7IGV4YWN0OiB2aWRlb1NvdXJjZSB9IDogdW5kZWZpbmVkIH1cbiAgICB9O1xuXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKHN0cmVhbSkgPT4ge1xuXG4gICAgICAgIGlmIChzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggPT0gMSAmJiBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgLy9hbGVydChcInN0cmVhbSBmcm9tIHNlbmRlciBpcyBhIHZpZGVvIDFcIilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vYWxlcnQoXCJzdHJlYW0gZnJvbSBzZW5kZXIgaXMgYSBhdWRpbyAyXCIpXG4gICAgICAgIH1cblxuXG4gICAgICAgIGNhbGwuYW5zd2VyKHN0cmVhbSk7XG5cbiAgICAgICAgY2FsbC5vbignc3RyZWFtJywgKHVzZXJTdHJlYW0pID0+IHtcblxuXG5cbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uc1tjYWxsLnBlZXJdID0gY2FsbDtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWNpZXZlIHZpZGVvIGZyb20gaW5pdGlhdG9yIFwiLCBjYWxsKTtcblxuICAgICAgICAgICAgaWYgKGN0ciA9PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2hhcmVkU2NyZWVuID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVkVmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVkVmlkLnNldEF0dHJpYnV0ZShcImlkXCIsIFwic2hhcmVkVmlkZW9cIik7XG5cblxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBsZXNzb24gc2hhcmVkIGNvbnRhaW5lciBtdXN0IGJlIG9uIHRoZSBtZW1iZXIgbGVzc29uIHNsaWRlciBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgYWRkVmlkZW9Db250ZW50KCdsZXNzb25TaGFyZWRDb250YWluZXInLCBzaGFyZWRWaWQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vaGlkZSBsZXNzb24gU2xpZGVcbiAgICAgICAgICAgICAgICAgICAgaGlkZUJ5RWxlbWVudElkKFwibGVzc29uU2xpZGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9hbGVydChcInJlY2lldmVyIGZyb20gc2VuZGVyIGlzIGEgdmlkZW8gNSA6OiAocGVlcilcIiArIGNhbGwucGVlcilcblxuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrVmlkZW9cIik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG5cbiAgICAgICAgICAgICAgICAgICAgLy9hbGVydChcInJlY2lldmVyIGZyb20gc2VuZGVyIGlzIGEgYXVkaW8gNiA6OiAocGVlcilcIiArIGNhbGwucGVlcilcblxuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrQXVkaW9cIik7IC8vY2FsbCBwZWVyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3RyKytcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FsbC5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyIGRpc2NvbmVjdGVkXCIpXG4gICAgICAgIH0pO1xuXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJyZWNpZXZlIGF1ZGlvIGZyb20gaW5pdGlhdG9yXCIsIGNhbGwpO1xuXG5cblxuICAgICAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XG4gICAgICAgIGNvbnN0IGNvbnN0cmFpbnRzID0ge1xuICAgICAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxuICAgICAgICAgICAgdmlkZW86IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKChzdHJlYW0pID0+IHtcblxuICAgICAgICAgICAgaWYgKHN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAvL2FsZXJ0KFwic3RyZWFtIGZyb20gc2VuZGVyIGlzIGEgdmlkZW8gM1wiKVxuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgLy9hbGVydChcInN0cmVhbSBmcm9tIHNlbmRlciBpcyBhIGF1ZGlvIDRcIilcblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGNhbGwuYW5zd2VyKHN0cmVhbSk7XG5cbiAgICAgICAgICAgIGNhbGwub24oJ3N0cmVhbScsICh1c2VyU3RyZWFtKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbY2FsbC5wZWVyXSA9IGNhbGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZWRTY3JlZW4gPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkVmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlZFZpZC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNoYXJlZFZpZGVvXCIpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlIGxlc3NvbiBzaGFyZWQgY29udGFpbmVyIG11c3QgYmUgb24gdGhlIG1lbWJlciBsZXNzb24gc2xpZGVyIGNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVmlkZW9Db250ZW50KCdsZXNzb25TaGFyZWRDb250YWluZXInLCBzaGFyZWRWaWQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2hpZGUgbGVzc29uIFNsaWRlXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlQnlFbGVtZW50SWQoXCJsZXNzb25TbGlkZVwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggPT0gMSAmJiB1c2VyU3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoID09IDEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydChcInJlY2lldmVyIGZyb20gc2VuZGVyIGlzIGEgdmlkZW8gNyAgOjogKHBlZXIpIFwiICsgY2FsbC5wZWVyKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGNhbGwucGVlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrVmlkZW9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KFwicmVjaWV2ZXIgZnJvbSBzZW5kZXIgaXMgYSBhdWRpbyA4IDo6IChwZWVyKVwiICsgY2FsbC5wZWVyKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGNhbGwucGVlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrQXVkaW9cIik7IC8vY2FsbCBwZWVyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3RyKytcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYWxsLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlciBkaXNjb25lY3RlZFwiKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAvL2FsZXJ0KFwiSSBjYW4ndCBzZW5kIGFueSB2aWRlbyByIGF1ZGlvIHRvIHlvdXIgY29udGFjdCwgcGxlYXNlIGNoZWNrIG1lZGlhXCIpXG4gICAgICAgIH0pO1xuXG5cbiAgICB9KTtcblxuXG5cblxufSk7XG5cbnBlZXIub24oJ2Nsb3NlJywgKGlkKSA9PiB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnJlbW92ZSgpO1xufSk7XG5cblxuc29ja2V0Lm9uKCd1c2VySm9pbmVkJywgKGRhdGEpID0+IHtcblxuXG4gICAgcGVlckNvbm5lY3Rpb25zW2RhdGEuaWRdID0gZGF0YTtcblxuICAgIGNvbnNvbGUubG9nKFwidXNlciBqb2luZWQgOjo6IGNhbGxpbmcgaW5pdGlhdG9yIHdpdGgganVzdCBhdWRpbyBhbmQgdmlkZW9cIiwgZGF0YS5pZCk7XG5cbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XG4gICAgY29uc3QgdmlkZW9Tb3VyY2UgPSB2aWRlb1NlbGVjdC52YWx1ZTtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxuICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdmlkZW9Tb3VyY2UgPyB7IGV4YWN0OiB2aWRlb1NvdXJjZSB9IDogdW5kZWZpbmVkIH1cbiAgICB9O1xuXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKG1lZGlhU3RyZWFtKSA9PiB7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyIGpvaW5lZCA6OjogY2FsbGluZyBpbml0aWF0b3Igd2l0aCBqdXN0IGF1ZGlvIGFuZCB2aWRlb1wiLCBkYXRhLmlkKTtcblxuICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChkYXRhLmlkLCBtZWRpYVN0cmVhbSk7XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uc1tjYWxsYmFjay5wZWVyXSA9IGNhbGxiYWNrO1xuXG4gICAgICAgICAgICBsZXQgY3RyID0gMDtcblxuICAgICAgICAgICAgY2FsbGJhY2sub24oJ3N0cmVhbScsICh1c2VyU3RyZWFtKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlclN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInVzZXJfam9pbmVkX3BlZXJfY2FsbF9iYWNrXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidXNlcl9qb2luZWRfcGVlcl9jYWxsX2JhY2tcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGN0cisrO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYWxsYmFjay5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgfVxuXG5cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcblxuICAgICAgICAvL0kgaGF2ZSBvbmx5IGF1ZGlvLCBzZW5kIHRvIHRoZSBhdWRpbyB0byBteSBwZWVyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidXNlciBqb2luZWQ6OiBJIGhhdmUgb25seSBhdWRpbywgc2VuZCB0byB0aGUgYXVkaW8gdG8gbXkgcGVlclwiLCBkYXRhLmlkKTtcblxuXG5cbiAgICAgICAgY29uc3QgYXVkaW9Db25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcbiAgICAgICAgICAgIHZpZGVvOiBmYWxzZSxcbiAgICAgICAgfTtcblxuICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShhdWRpb0NvbnN0cmFpbnRzKS50aGVuKChtZWRpYUNhbGxTdHJlYW0pID0+IHtcblxuICAgICAgICAgICAgaWYgKG15VmlkZW9TdHJlYW0pIHtcblxuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBwZWVyLmNhbGwoZGF0YS5pZCwgbWVkaWFDYWxsU3RyZWFtKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICdpZCc6IG15SWQsXG4gICAgICAgICAgICAgICAgICAgICd1c2VyJzogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgJ3Jvb21JRCc6IHJvb21JRCxcbiAgICAgICAgICAgICAgICAgICAgJ3ZpZGVvU3RyZWFtJzogbWVkaWFDYWxsU3RyZWFtXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoXCJjaGFuZ2VNZWRpYVwiLCBkYXRhKTtcblxuICAgICAgICAgICAgICAgIC8vbmV2ZXIgbWluZCBjYWxsYmFjaywgaSB3aWxsIGNhbGwgY2hhbmdlIG1lZGlhXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG5cblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG5cbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbY2FsbGJhY2sucGVlcl0gPSBjYWxsYmFjaztcblxuXG4gICAgICAgICAgICAgICAgbGV0IGN0ciA9IDA7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5vbignc3RyZWFtJywgKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXJTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggPT0gMSAmJiB1c2VyU3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoID09IDEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ1c2VyX2pvaW5lZF9wZWVyX2NhbGxfYmFja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ1c2VyX2pvaW5lZF9wZWVyX2NhbGxfYmFja1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkQXVkaW8oY2FsbGVyRWxlbWVudCwgdXNlclN0cmVhbSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICAgICAgY3RyKys7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb25zW2RhdGEuaWRdID0gY2FsbGJhY2s7XG5cblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG5cbiAgICAgICAgICAgIC8vYWxlcnQoXCJQbGVhc2UgY29ubmVjdCBhdWRpb2lucHV0IGRldmljZSBhbmQgdHJ5IGFnYWluXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgICAvKlxuICAgIGxldCBpZCA9IGRhdGEuaWQ7XG4gICAgbGV0IHJvb21JRCA9IGRhdGEucm9vbUlEO1xuICAgIGxldCB1c2VyID0gZGF0YS51c2VyO1xuXG4gICAgY29uc3QgY2FsbGJhY2sgPSBwZWVyLmNhbGwoaWQsIG15VmlkZW9TdHJlYW0pO1xuXG4gICAgY29uc29sZS5sb2coXCJuZXcgdXNlciBqb2luZWRcIiwgZGF0YSk7XG5cblxuICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgIGxldCBjdHIgPSAwO1xuICAgICAgICBjYWxsYmFjay5vbignc3RyZWFtJywgKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICAgICAgaWYgKGN0ciA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcblxuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxlckJhY2tWaWRlb1wiKTtcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYWRkVmlkZW8oY2FsbGVyRWxlbWVudCwgdXNlclN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHIrKztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FsbGJhY2sub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjbG9zaW5nISBjYWxsYmFjayB2aWRlby4uLlwiKVxuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhbGxiYWNrLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAqL1xuXG59KTtcblxuXG5zb2NrZXQub24oJ21lZGlhQ2hhbmdlZCcsIChkYXRhKSA9PiB7XG5cblxuICAgIC8vYWxlcnQoXCJtZWRpYSBjaGFuZ2VcIik7XG5cbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XG4gICAgY29uc3QgdmlkZW9Tb3VyY2UgPSB2aWRlb1NlbGVjdC52YWx1ZTtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxuICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdmlkZW9Tb3VyY2UgPyB7IGV4YWN0OiB2aWRlb1NvdXJjZSB9IDogdW5kZWZpbmVkIH1cbiAgICB9O1xuXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIm1lZGlhQ2hhbmdlZDogaW5pdGlhdG9yIChyZWNpZXZlZClcIilcblxuICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChkYXRhLmlkLCB1c2VyU3RyZWFtKTtcblxuICAgICAgICBpZiAoY2FsbGJhY2spIHtcblxuICAgICAgICAgICAgbGV0IGN0ciA9IDA7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdzdHJlYW0nLCAodXNlclN0cmVhbSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKGN0ciA9PSAwKSB7XG5cblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlcGlwaWVudCBjYWxsYmFjayA6IHZpZGVvIHN0cmVhbVwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlclN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGNhbGxiYWNrLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInJlcGlwaWVudF92aWRlb19jaGFuZ2VkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicmVwaXBpZW50X2F1ZGlvX2NoYW5nZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgIGN0cisrO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYWxsYmFjay5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbZGF0YS5pZF0gPSBjYWxsYmFjaztcbiAgICAgICAgfVxuXG5cbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcblxuICAgICAgICBjb25zdCBhdWRpb0NvbnN0cmFpbnRzID0ge1xuICAgICAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxuICAgICAgICAgICAgdmlkZW86IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGF1ZGlvQ29uc3RyYWludHMpLnRoZW4oKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJpbml0aWF0b3IgU0VOVCBBTkQgQVVESU9cIilcblxuICAgICAgICAgICAgY2FsbGJhY2sgPSBwZWVyLmNhbGwoZGF0YS5pZCwgdXNlclN0cmVhbSk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgICAgICAgICAgbGV0IGN0ciA9IDA7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjay5vbignc3RyZWFtJywgKHVzZXJTdHJlYW0pID0+IHtcblxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidGhpcyBpcyBmb3IgdGhlIGF1ZGlvLCBzdHJlYW0gb2YgdGhlIGluaXRpYXRvclwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2codXNlclN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGgpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVzZXIgc2VudCBhIHZpZGVvXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsYmFjay5wZWVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgY2FsbGJhY2sucGVlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxlckJhY2tWaWRlb1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyIHNlbnQgYSBBVURJT1wiKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoY2FsbGJhY2sucGVlcik7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgY2FsbGJhY2sucGVlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxiYWNrQXVkaW9fbWVkaWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb250cm9sc1wiLCBcImNvbnRyb2xzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIGN0cisrO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uc1tkYXRhLmlkXSA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG5cbiAgICAgICAgICAgIC8vYWxlcnQoXCJhdWRpbyBvbmx5XCIpO1xuXG5cblxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG5cblxuXG4gICAgLypcbiAgICBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIGxldCByb29tSUQgPSBkYXRhLnJvb21JRDtcbiAgICBsZXQgdXNlciA9IGRhdGEudXNlcjtcblxuICAgIGxldCBjYWxsYmFjayA9IG51bGw7XG5cblxuXG4gICAgaWYgKG15VmlkZW9TdHJlYW0gIT09IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBwZWVyLmNhbGwoaWQsIG15VmlkZW9TdHJlYW0pO1xuICAgIH0gZWxzZSBpZiAobXlBdWRpb1N0cmVhbSAhPT0gbnVsbCkge1xuICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChpZCwgbXlBdWRpb1N0cmVhbSk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCJteSB2aWRlb1wiLCBteVZpZGVvU3RyZWFtKTtcbiAgICBjb25zb2xlLmxvZyhcIm15IHZpZGVvXCIsIG15QXVkaW9TdHJlYW0pO1xuXG5cblxuICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgIGxldCBjdHIgPSAwO1xuXG4gICAgICAgIGNhbGxiYWNrLm9uKCdzdHJlYW0nLCAodXNlclN0cmVhbSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aClcblxuICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyIHNlbnQgYSB2aWRlb1wiKVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjYWxsZXJCYWNrVmlkZW9cIik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVzZXIgc2VudCBhIEFVRElPXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG5cblxuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxiYWNrQXVkaW9cIik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGN0cisrO1xuICAgICAgICB9KTtcblxuICAgICAgICBjYWxsYmFjay5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FsbGJhY2sub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGVlckNvbm5lY3Rpb25zW2RhdGEuaWRdID0gY2FsbGJhY2s7XG4gICAgfVxuICAgICovXG59KTtcblxuXG5zb2NrZXQub24oJ3VzZXJEaXNjb25uZWN0JywgaWQgPT4ge1xuXG4gICAgY29uc29sZS5sb2coXCJ1c2VyRGlzY29ubmVjdGVkXCIsIGlkKTtcblxuICAgIHJlbW92ZUVsZW1lbnRCeUlEKGlkKTtcblxuICAgIHRyeSB7XG4gICAgICAgIHBlZXJDb25uZWN0aW9uc1tpZF0uY2xvc2UoKTtcblxuICAgIH0gY2F0Y2ggKGVycikge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IgZGlzY29ubmVjdCA6IFwiLCBlcnIpXG4gICAgfVxuXG59KTtcblxuXG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuU2hhcmVTY3JlZW5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgIHNoYXJlU2NyZWVuKCk7XG59KTtcblxuXG4vKioqIFRPR0dMRSBNRURJQSBDQUJJTkVUUyBFRkZFQ1RTICovXG4kKFwiLnRvZ2dsZUNhbWVyYVwiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAkKCcjcmlnaHQtdmlkZW8tc2lkZWJhcicpLmFuaW1hdGUoeyB3aWR0aDogJ3RvZ2dsZScgfSwgMjUsICgpID0+IHtcbiAgICAgICAgLy8gQW5pbWF0aW9uIGNvbXBsZXRlLlxuICAgIH0pXG59KTtcblxuJChcIi50b2dnbGVMaXZlQ2hhdFwiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAkKCcjcmlnaHQtY2hhdC1zaWRlYmFyJykuYW5pbWF0ZSh7IHdpZHRoOiAndG9nZ2xlJyB9LCAyNSwgKCkgPT4ge1xuICAgICAgICAvLyBBbmltYXRpb24gY29tcGxldGUuXG4gICAgfSlcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 7:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /var/www/html/esi_development/resources/js/webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });