/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\nvar socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar peer = new Peer({\n  initiator: false,\n  trickle: false\n});\n'use strict';\n\nvar myVideoStream;\nvar myAudioStream;\nvar peerConnections = {};\nvar mediaContainer = document.getElementById('myMediaContainer');\nvar videoGrid = document.getElementById('videoGrid');\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {\n      console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError); // Attach audio output device to video element using device/sink ID.\n\nfunction attachSinkId(element, sinkId) {\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {\n      console.log(\"Success, audio output device attached: \".concat(sinkId));\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n\n      console.error(errorMessage); // Jump back to first output device in the list as it's the default.\n\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n  attachSinkId(videoElement, audioDestination);\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n\n  videoElement.srcObject = stream; //Register the video stream to my Stream\n\n  myVideoStream = stream; // Refresh button list in case labels have become available\n\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction handleError(error) {\n  console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\n  data = {\n    'id': myId,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data); //start a video with audio connection width data of user\n\n  var video = false;\n  var audio = true;\n  console.log(data);\n  start(video, audio, data);\n}\n\nfunction addMyAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  mediaContainer.append(audio);\n}\n\nfunction addMyVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  mediaContainer.append(video);\n}\n\nfunction addAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\n\nfunction removeElementByID(id) {\n  var element = document.getElementById(id);\n\n  if (element) {\n    element.remove();\n  }\n}\n\nfunction connectMedia(video, audio, constraints) {\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    removeElementByID(\"myVideo\");\n    removeElementByID(\"myAudio\");\n\n    if (audio == true && video == true) {\n      //Register the video stream to my Stream\n      myVideoStream = stream;\n      window.stream = stream; // make stream available to console       \n\n      myAudioStream = null;\n      console.log(\"this is a video\");\n      videoElement = document.createElement('video');\n      videoElement.setAttribute(\"id\", \"myVideo\");\n      videoElement.muted = true;\n      addMyVideo(videoElement, stream);\n      console.log(\"calling change media, so we can get contact video\");\n      socket.emit(\"changeMedia\", data);\n    } else {\n      //Register the video stream to my Stream\n      myVideoStream = null;\n      window.stream = stream; // make stream available to console       \n\n      myAudioStream = stream;\n      console.log(\"this is a audio only\");\n      audio = document.createElement('audio');\n      audio.setAttribute(\"class\", \"myAudio\");\n      audio.setAttribute(\"controls\", \"controls\");\n      audio.muted = true;\n      addMyAudio(audio, stream);\n      socket.emit(\"changeMedia\", data);\n    }\n\n    return navigator.mediaDevices.enumerateDevices();\n  }).then(gotDevices)[\"catch\"](function (err) {\n    if (video == true && audio == true) {\n      handleError(err);\n    } else {\n      alert(\"no media detected, please connect and try again\");\n    }\n  });\n}\n\nfunction start(video, audio, data) {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n\n  if (video == true && audio == true) {\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: {\n        deviceId: videoSource ? {\n          exact: videoSource\n        } : undefined\n      }\n    };\n    connectMedia(video, audio, constraints);\n  } else if (video == false && audio == true) {\n    var _constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    connectMedia(video, audio, _constraints);\n  } else {\n    alert(\"no media detected, please connect and try again\");\n  }\n}\n\nfunction restart() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    console.log(\"restart\");\n    window.stream = stream; // make stream available to console\n\n    videoElement.srcObject = stream; //Register the video stream to my Stream\n\n    myVideoStream = stream;\n    data = {\n      'id': myId,\n      'user': user,\n      'roomID': roomID,\n      'videoStream': myVideoStream\n    };\n    socket.emit(\"changeMedia\", data);\n    removeElementByID(myId);\n  })[\"catch\"](handleError);\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\npeer.on('connection', function (conn) {\n  conn.on('data', function (data) {\n    console.log(\"peer connected\", data);\n  });\n  conn.on('close', function () {\n    alert(\"close\");\n  });\n});\npeer.on('open', function (id) {\n  console.log(\"my peer id\" + id);\n  console.log(\"my user \", user);\n  console.log(\"my room id \", roomID);\n  myId = id;\n  data = {\n    'id': id,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data); //start a video with audio connection width data of user\n\n  var video = true;\n  var audio = true;\n  start(video, audio, data);\n});\npeer.on('call', function (call) {\n  var ctr = 0;\n  console.log(\"call\");\n  call.answer(myVideoStream);\n  call.on('stream', function (userStream) {\n    if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n      console.log(\"callback is a video\");\n      removeElementByID(data.id);\n      callerElement = document.createElement('video');\n      callerElement.setAttribute(\"id\", data.id);\n      callerElement.setAttribute(\"class\", \"callerBackVideo\");\n      callerElement.muted = false;\n      addVideo(callerElement, userStream);\n    } else {\n      console.log(\"callback AUDIO\");\n      removeElementByID(data.id);\n      callerElement = document.createElement('audio');\n      callerElement.setAttribute(\"id\", data.id);\n      callerElement.setAttribute(\"class\", \"callbackAudio\");\n      callerElement.setAttribute(\"controls\", \"controls\");\n      callerElement.muted = false;\n      addAudio(callerElement, userStream);\n    } // }\n\n\n    ctr++;\n  });\n  call.on('close', function () {\n    removeElementByID(call.peer);\n    console.log(\"user disconected\");\n  });\n});\npeer.on('close', function (id) {\n  document.getElementById(id).remove();\n});\nsocket.on('userJoined', function (data) {\n  /*\n   let id = data.id;\n  let roomID = data.roomID;\n  let user = data.user;\n   const callback = peer.call(id, myVideoStream);\n   if (callback) {\n       let ctr = 0;\n      callback.on('stream', (userStream) => {\n           if (ctr == 1) {\n               removeElementByID(data.id);\n               callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n          }\n          ctr++;\n      });\n       callback.on('close', () => {\n          console.log(\"closing! callback video...\")\n          removeElementByID(data.id);\n      });\n       callback.on('error', (err) => {\n          console.log(err);\n      });\n  }\n  */\n});\nsocket.on('mediaChanged', function (data) {\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (userStream) {\n    console.log(userStream.getAudioTracks().length);\n    console.log(userStream.getVideoTracks().length);\n    callback = peer.call(data.id, userStream);\n\n    if (callback) {\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          console.log(userStream.getAudioTracks().length);\n          console.log(userStream.getVideoTracks().length);\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            console.log(\"user sent a video\");\n            removeElementByID(allback.peer);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", callback.peer);\n            callerElement.setAttribute(\"class\", \"callerBackVideo\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            console.log(\"user sent a AUDIO\");\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"callbackAudio\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        console.log(err);\n      });\n      peerConnections[data.id] = callback;\n    }\n  })[\"catch\"](function (error) {\n    alert(\"\");\n    console.log(error);\n  });\n  /*\n  let id = data.id;\n  let roomID = data.roomID;\n  let user = data.user;\n   let callback = null;\n     if (myVideoStream !== null) {\n      callback = peer.call(id, myVideoStream);\n  } else if (myAudioStream !== null) {\n      callback = peer.call(id, myAudioStream);\n  }\n   console.log(\"my video\", myVideoStream);\n  console.log(\"my video\", myAudioStream);\n     if (callback) {\n       let ctr = 0;\n       callback.on('stream', (userStream) => {\n           if (ctr == 0) {\n               console.log(userStream.getAudioTracks().length)\n              console.log(userStream.getVideoTracks().length)\n               if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n                   console.log(\"user sent a video\")\n                   removeElementByID(data.id);\n                    callerElement = document.createElement('video');\n                  callerElement.setAttribute(\"id\", data.id);\n                  callerElement.setAttribute(\"class\", \"callerBackVideo\");\n                  callerElement.muted = false;\n                   addVideo(callerElement, userStream);\n                } else {\n                   console.log(\"user sent a AUDIO\")\n                   removeElementByID(data.id);\n                    callerElement = document.createElement('audio');\n                  callerElement.setAttribute(\"id\", data.id);\n                  callerElement.setAttribute(\"class\", \"callbackAudio\");\n                  callerElement.setAttribute(\"controls\", \"controls\");\n                  callerElement.muted = false;\n                   addAudio(callerElement, userStream);\n              }\n           }\n            ctr++;\n      });\n       callback.on('close', () => {\n          removeElementByID(data.id);\n      });\n       callback.on('error', (err) => {\n          console.log(err);\n      });\n       peerConnections[data.id] = callback;\n  }\n  */\n});\nsocket.on('userDisconnect', function (id) {\n  console.log(\"userDisconnected\", id);\n  removeElementByID(id);\n\n  if (peerConnections[id]) {\n    peerConnections[id].close();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvd2ViUlRDLmpzP2MzMGQiXSwibmFtZXMiOlsic29ja2V0IiwiaW8iLCJwZWVyIiwiUGVlciIsImluaXRpYXRvciIsInRyaWNrbGUiLCJteVZpZGVvU3RyZWFtIiwibXlBdWRpb1N0cmVhbSIsInBlZXJDb25uZWN0aW9ucyIsIm1lZGlhQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZpZGVvR3JpZCIsImF1ZGlvSW5wdXRTZWxlY3QiLCJxdWVyeVNlbGVjdG9yIiwiYXVkaW9PdXRwdXRTZWxlY3QiLCJ2aWRlb1NlbGVjdCIsInNlbGVjdG9ycyIsImRpc2FibGVkIiwiSFRNTE1lZGlhRWxlbWVudCIsInByb3RvdHlwZSIsImdvdERldmljZXMiLCJkZXZpY2VJbmZvcyIsInZhbHVlcyIsIm1hcCIsInNlbGVjdCIsInZhbHVlIiwiZm9yRWFjaCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImkiLCJsZW5ndGgiLCJkZXZpY2VJbmZvIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImRldmljZUlkIiwia2luZCIsInRleHQiLCJsYWJlbCIsImFwcGVuZENoaWxkIiwiY29uc29sZSIsImxvZyIsInNlbGVjdG9ySW5kZXgiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImNoaWxkTm9kZXMiLCJzb21lIiwibiIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImVudW1lcmF0ZURldmljZXMiLCJ0aGVuIiwiaGFuZGxlRXJyb3IiLCJhdHRhY2hTaW5rSWQiLCJlbGVtZW50Iiwic2lua0lkIiwic2V0U2lua0lkIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJuYW1lIiwic2VsZWN0ZWRJbmRleCIsIndhcm4iLCJjaGFuZ2VBdWRpb0Rlc3RpbmF0aW9uIiwiYXVkaW9EZXN0aW5hdGlvbiIsInZpZGVvRWxlbWVudCIsImdvdFN0cmVhbSIsInN0cmVhbSIsIndpbmRvdyIsInNyY09iamVjdCIsIm1lc3NhZ2UiLCJkYXRhIiwibXlJZCIsInVzZXIiLCJyb29tSUQiLCJlbWl0IiwidmlkZW8iLCJhdWRpbyIsInN0YXJ0IiwiYWRkTXlBdWRpbyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwbGF5IiwiYXBwZW5kIiwiYWRkTXlWaWRlbyIsImFkZEF1ZGlvIiwiYWRkVmlkZW8iLCJyZW1vdmVFbGVtZW50QnlJRCIsImlkIiwicmVtb3ZlIiwiY29ubmVjdE1lZGlhIiwiY29uc3RyYWludHMiLCJnZXRVc2VyTWVkaWEiLCJzZXRBdHRyaWJ1dGUiLCJtdXRlZCIsImVyciIsImFsZXJ0IiwiZ2V0VHJhY2tzIiwidHJhY2siLCJzdG9wIiwiYXVkaW9Tb3VyY2UiLCJ2aWRlb1NvdXJjZSIsImV4YWN0IiwidW5kZWZpbmVkIiwicmVzdGFydCIsIm9uY2hhbmdlIiwib24iLCJjb25uIiwiY3RyIiwiYW5zd2VyIiwidXNlclN0cmVhbSIsImdldEF1ZGlvVHJhY2tzIiwiZ2V0VmlkZW9UcmFja3MiLCJjYWxsZXJFbGVtZW50IiwiY2FsbGJhY2siLCJhbGxiYWNrIiwiY2xvc2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsTUFBTSxHQUFHQyxFQUFFLENBQUMsMENBQUQsRUFBNkMsRUFBN0MsQ0FBakI7QUFFQSxJQUFNQyxJQUFJLEdBQUcsSUFBSUMsSUFBSixDQUFTO0VBQ2xCQyxTQUFTLEVBQUUsS0FETztFQUVsQkMsT0FBTyxFQUFFO0FBRlMsQ0FBVCxDQUFiO0FBS0E7O0FBQ0EsSUFBSUMsYUFBSjtBQUNBLElBQUlDLGFBQUo7QUFHQSxJQUFNQyxlQUFlLEdBQUcsRUFBeEI7QUFHQSxJQUFJQyxjQUFjLEdBQUdDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixrQkFBeEIsQ0FBckI7QUFHQSxJQUFJQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixXQUF4QixDQUFoQjtBQUVBLElBQU1FLGdCQUFnQixHQUFHSCxRQUFRLENBQUNJLGFBQVQsQ0FBdUIs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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWdDQyxDQW5LRDtBQXNLQTFELE1BQU0sQ0FBQ3lHLEVBQVAsQ0FBVSxnQkFBVixFQUE0QixVQUFBbEIsRUFBRSxFQUFJO0VBRTlCL0MsT0FBTyxDQUFDQyxHQUFSLENBQVksa0JBQVosRUFBZ0M4QyxFQUFoQztFQUVBRCxpQkFBaUIsQ0FBQ0MsRUFBRCxDQUFqQjs7RUFFQSxJQUFJL0UsZUFBZSxDQUFDK0UsRUFBRCxDQUFuQixFQUF5QjtJQUNyQi9FLGVBQWUsQ0FBQytFLEVBQUQsQ0FBZixDQUFvQjRCLEtBQXBCO0VBQ0g7QUFDSixDQVREIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3dlYlJUQy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgQ29weXJpZ2h0IChjKSAyMDE1IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlXG4gKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlXG4gKiAgdHJlZS5cbiAqL1xuXG5jb25zdCBzb2NrZXQgPSBpbygnaHR0cHM6Ly9ydGNzZXJ2ZXIuZXN1Y2Nlc3MtaW5jLmNvbTo0MDAwMicsIHt9KTtcblxuY29uc3QgcGVlciA9IG5ldyBQZWVyKHtcbiAgICBpbml0aWF0b3I6IGZhbHNlLFxuICAgIHRyaWNrbGU6IGZhbHNlLFxufSk7XG5cbid1c2Ugc3RyaWN0JztcbmxldCBteVZpZGVvU3RyZWFtO1xubGV0IG15QXVkaW9TdHJlYW07XG5cblxuY29uc3QgcGVlckNvbm5lY3Rpb25zID0ge31cblxuXG5sZXQgbWVkaWFDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXlNZWRpYUNvbnRhaW5lcicpO1xuXG5cbmxldCB2aWRlb0dyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlkZW9HcmlkJyk7XG5cbmNvbnN0IGF1ZGlvSW5wdXRTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QjYXVkaW9Tb3VyY2UnKTtcbmNvbnN0IGF1ZGlvT3V0cHV0U2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc2VsZWN0I2F1ZGlvT3V0cHV0Jyk7XG5jb25zdCB2aWRlb1NlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdCN2aWRlb1NvdXJjZScpO1xuY29uc3Qgc2VsZWN0b3JzID0gW2F1ZGlvSW5wdXRTZWxlY3QsIGF1ZGlvT3V0cHV0U2VsZWN0LCB2aWRlb1NlbGVjdF07XG5cbmF1ZGlvT3V0cHV0U2VsZWN0LmRpc2FibGVkID0gISgnc2lua0lkJyBpbiBIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGdvdERldmljZXMoZGV2aWNlSW5mb3MpIHtcbiAgICAvLyBIYW5kbGVzIGJlaW5nIGNhbGxlZCBzZXZlcmFsIHRpbWVzIHRvIHVwZGF0ZSBsYWJlbHMuIFByZXNlcnZlIHZhbHVlcy5cbiAgICBjb25zdCB2YWx1ZXMgPSBzZWxlY3RvcnMubWFwKHNlbGVjdCA9PiBzZWxlY3QudmFsdWUpO1xuICAgIHNlbGVjdG9ycy5mb3JFYWNoKHNlbGVjdCA9PiB7XG4gICAgICAgIHdoaWxlIChzZWxlY3QuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgc2VsZWN0LnJlbW92ZUNoaWxkKHNlbGVjdC5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBkZXZpY2VJbmZvcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBkZXZpY2VJbmZvID0gZGV2aWNlSW5mb3NbaV07XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBvcHRpb24udmFsdWUgPSBkZXZpY2VJbmZvLmRldmljZUlkO1xuICAgICAgICBpZiAoZGV2aWNlSW5mby5raW5kID09PSAnYXVkaW9pbnB1dCcpIHtcbiAgICAgICAgICAgIG9wdGlvbi50ZXh0ID0gZGV2aWNlSW5mby5sYWJlbCB8fCBgbWljcm9waG9uZSAke2F1ZGlvSW5wdXRTZWxlY3QubGVuZ3RoICsgMX1gO1xuICAgICAgICAgICAgYXVkaW9JbnB1dFNlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKGRldmljZUluZm8ua2luZCA9PT0gJ2F1ZGlvb3V0cHV0Jykge1xuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBkZXZpY2VJbmZvLmxhYmVsIHx8IGBzcGVha2VyICR7YXVkaW9PdXRwdXRTZWxlY3QubGVuZ3RoICsgMX1gO1xuICAgICAgICAgICAgYXVkaW9PdXRwdXRTZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgfSBlbHNlIGlmIChkZXZpY2VJbmZvLmtpbmQgPT09ICd2aWRlb2lucHV0Jykge1xuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBkZXZpY2VJbmZvLmxhYmVsIHx8IGBjYW1lcmEgJHt2aWRlb1NlbGVjdC5sZW5ndGggKyAxfWA7XG4gICAgICAgICAgICB2aWRlb1NlbGVjdC5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1NvbWUgb3RoZXIga2luZCBvZiBzb3VyY2UvZGV2aWNlOiAnLCBkZXZpY2VJbmZvKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3RvcnMuZm9yRWFjaCgoc2VsZWN0LCBzZWxlY3RvckluZGV4KSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxlY3QuY2hpbGROb2Rlcykuc29tZShuID0+IG4udmFsdWUgPT09IHZhbHVlc1tzZWxlY3RvckluZGV4XSkpIHtcbiAgICAgICAgICAgIHNlbGVjdC52YWx1ZSA9IHZhbHVlc1tzZWxlY3RvckluZGV4XTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKS50aGVuKGdvdERldmljZXMpLmNhdGNoKGhhbmRsZUVycm9yKTtcblxuLy8gQXR0YWNoIGF1ZGlvIG91dHB1dCBkZXZpY2UgdG8gdmlkZW8gZWxlbWVudCB1c2luZyBkZXZpY2Uvc2luayBJRC5cbmZ1bmN0aW9uIGF0dGFjaFNpbmtJZChlbGVtZW50LCBzaW5rSWQpIHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQuc2lua0lkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBlbGVtZW50LnNldFNpbmtJZChzaW5rSWQpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3MsIGF1ZGlvIG91dHB1dCBkZXZpY2UgYXR0YWNoZWQ6ICR7c2lua0lkfWApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnU2VjdXJpdHlFcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gYFlvdSBuZWVkIHRvIHVzZSBIVFRQUyBmb3Igc2VsZWN0aW5nIGF1ZGlvIG91dHB1dCBkZXZpY2U6ICR7ZXJyb3J9YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIC8vIEp1bXAgYmFjayB0byBmaXJzdCBvdXRwdXQgZGV2aWNlIGluIHRoZSBsaXN0IGFzIGl0J3MgdGhlIGRlZmF1bHQuXG4gICAgICAgICAgICAgICAgYXVkaW9PdXRwdXRTZWxlY3Quc2VsZWN0ZWRJbmRleCA9IDA7XG4gICAgICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBvdXRwdXQgZGV2aWNlIHNlbGVjdGlvbi4nKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoYW5nZUF1ZGlvRGVzdGluYXRpb24oKSB7XG4gICAgY29uc3QgYXVkaW9EZXN0aW5hdGlvbiA9IGF1ZGlvT3V0cHV0U2VsZWN0LnZhbHVlO1xuICAgIGF0dGFjaFNpbmtJZCh2aWRlb0VsZW1lbnQsIGF1ZGlvRGVzdGluYXRpb24pO1xufVxuXG5mdW5jdGlvbiBnb3RTdHJlYW0oc3RyZWFtKSB7XG4gICAgd2luZG93LnN0cmVhbSA9IHN0cmVhbTsgLy8gbWFrZSBzdHJlYW0gYXZhaWxhYmxlIHRvIGNvbnNvbGVcbiAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuXG4gICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxuICAgIG15VmlkZW9TdHJlYW0gPSBzdHJlYW07XG5cbiAgICAvLyBSZWZyZXNoIGJ1dHRvbiBsaXN0IGluIGNhc2UgbGFiZWxzIGhhdmUgYmVjb21lIGF2YWlsYWJsZVxuICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcblxuICAgIGNvbnNvbGUubG9nKCduYXZpZ2F0b3IuTWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSBlcnJvcjogJywgZXJyb3IubWVzc2FnZSwgZXJyb3IubmFtZSk7XG5cblxuICAgIGRhdGEgPSB7XG4gICAgICAgICdpZCc6IG15SWQsXG4gICAgICAgICd1c2VyJzogdXNlcixcbiAgICAgICAgJ3Jvb21JRCc6IHJvb21JRFxuICAgIH1cblxuICAgIHNvY2tldC5lbWl0KFwibmV3VXNlclwiLCBkYXRhKTtcblxuICAgIC8vc3RhcnQgYSB2aWRlbyB3aXRoIGF1ZGlvIGNvbm5lY3Rpb24gd2lkdGggZGF0YSBvZiB1c2VyXG4gICAgbGV0IHZpZGVvID0gZmFsc2U7XG4gICAgbGV0IGF1ZGlvID0gdHJ1ZTtcblxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gICAgc3RhcnQodmlkZW8sIGF1ZGlvLCBkYXRhKTtcbn1cblxuXG5mdW5jdGlvbiBhZGRNeUF1ZGlvKGF1ZGlvLCBzdHJlYW0pIHtcbiAgICBhdWRpby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XG4gICAgICAgIGF1ZGlvLnBsYXkoKVxuICAgIH0pXG4gICAgbWVkaWFDb250YWluZXIuYXBwZW5kKGF1ZGlvKTtcbn1cblxuXG5mdW5jdGlvbiBhZGRNeVZpZGVvKHZpZGVvLCBzdHJlYW0pIHtcbiAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XG4gICAgICAgIHZpZGVvLnBsYXkoKVxuICAgIH0pXG4gICAgbWVkaWFDb250YWluZXIuYXBwZW5kKHZpZGVvKTtcbn1cblxuXG5mdW5jdGlvbiBhZGRBdWRpbyhhdWRpbywgc3RyZWFtKSB7XG4gICAgYXVkaW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgKCkgPT4ge1xuICAgICAgICBhdWRpby5wbGF5KClcbiAgICB9KVxuICAgIHZpZGVvR3JpZC5hcHBlbmQoYXVkaW8pO1xufVxuXG5mdW5jdGlvbiBhZGRWaWRlbyh2aWRlbywgc3RyZWFtKSB7XG4gICAgdmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xuICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgKCkgPT4ge1xuICAgICAgICB2aWRlby5wbGF5KClcbiAgICB9KVxuICAgIHZpZGVvR3JpZC5hcHBlbmQodmlkZW8pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50QnlJRChpZCkge1xuICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb25uZWN0TWVkaWEodmlkZW8sIGF1ZGlvLCBjb25zdHJhaW50cykge1xuXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKHN0cmVhbSkgPT4ge1xuXG4gICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKFwibXlWaWRlb1wiKTtcbiAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoXCJteUF1ZGlvXCIpO1xuXG4gICAgICAgIGlmIChhdWRpbyA9PSB0cnVlICYmIHZpZGVvID09IHRydWUpIHtcblxuICAgICAgICAgICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxuICAgICAgICAgICAgbXlWaWRlb1N0cmVhbSA9IHN0cmVhbTtcbiAgICAgICAgICAgIHdpbmRvdy5zdHJlYW0gPSBzdHJlYW07IC8vIG1ha2Ugc3RyZWFtIGF2YWlsYWJsZSB0byBjb25zb2xlICAgICAgIFxuXG4gICAgICAgICAgICBteUF1ZGlvU3RyZWFtID0gbnVsbDtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aGlzIGlzIGEgdmlkZW9cIik7XG5cbiAgICAgICAgICAgIHZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJteVZpZGVvXCIpO1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50Lm11dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGFkZE15VmlkZW8odmlkZW9FbGVtZW50LCBzdHJlYW0pO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbGxpbmcgY2hhbmdlIG1lZGlhLCBzbyB3ZSBjYW4gZ2V0IGNvbnRhY3QgdmlkZW9cIik7XG5cbiAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiY2hhbmdlTWVkaWFcIiwgZGF0YSk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICAvL1JlZ2lzdGVyIHRoZSB2aWRlbyBzdHJlYW0gdG8gbXkgU3RyZWFtXG4gICAgICAgICAgICBteVZpZGVvU3RyZWFtID0gbnVsbDtcblxuICAgICAgICAgICAgd2luZG93LnN0cmVhbSA9IHN0cmVhbTsgLy8gbWFrZSBzdHJlYW0gYXZhaWxhYmxlIHRvIGNvbnNvbGUgICAgICAgXG4gICAgICAgICAgICBteUF1ZGlvU3RyZWFtID0gc3RyZWFtO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRoaXMgaXMgYSBhdWRpbyBvbmx5XCIpXG5cbiAgICAgICAgICAgIGF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgIGF1ZGlvLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwibXlBdWRpb1wiKTtcbiAgICAgICAgICAgIGF1ZGlvLnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICBhdWRpby5tdXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGFkZE15QXVkaW8oYXVkaW8sIHN0cmVhbSk7XG5cbiAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiY2hhbmdlTWVkaWFcIiwgZGF0YSk7XG5cbiAgICAgICAgfVxuXG5cblxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCk7XG5cblxuICAgIH0pLnRoZW4oZ290RGV2aWNlcykuY2F0Y2goKGVycikgPT4ge1xuXG4gICAgICAgIGlmICh2aWRlbyA9PSB0cnVlICYmIGF1ZGlvID09IHRydWUpIHtcbiAgICAgICAgICAgIGhhbmRsZUVycm9yKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGFsZXJ0KFwibm8gbWVkaWEgZGV0ZWN0ZWQsIHBsZWFzZSBjb25uZWN0IGFuZCB0cnkgYWdhaW5cIilcbiAgICAgICAgfVxuICAgIH0pO1xuXG5cbn1cblxuZnVuY3Rpb24gc3RhcnQodmlkZW8sIGF1ZGlvLCBkYXRhKSB7XG5cbiAgICBpZiAod2luZG93LnN0cmVhbSkge1xuXG4gICAgICAgIHdpbmRvdy5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XG4gICAgICAgICAgICB0cmFjay5zdG9wKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XG4gICAgY29uc3QgdmlkZW9Tb3VyY2UgPSB2aWRlb1NlbGVjdC52YWx1ZTtcblxuICAgIGlmICh2aWRlbyA9PSB0cnVlICYmIGF1ZGlvID09IHRydWUpIHtcblxuICAgICAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcbiAgICAgICAgICAgIHZpZGVvOiB7IGRldmljZUlkOiB2aWRlb1NvdXJjZSA/IHsgZXhhY3Q6IHZpZGVvU291cmNlIH0gOiB1bmRlZmluZWQgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbm5lY3RNZWRpYSh2aWRlbywgYXVkaW8sIGNvbnN0cmFpbnRzKVxuXG4gICAgfSBlbHNlIGlmICh2aWRlbyA9PSBmYWxzZSAmJiBhdWRpbyA9PSB0cnVlKSB7XG5cbiAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB7XG4gICAgICAgICAgICBhdWRpbzogeyBkZXZpY2VJZDogYXVkaW9Tb3VyY2UgPyB7IGV4YWN0OiBhdWRpb1NvdXJjZSB9IDogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICB2aWRlbzogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBjb25uZWN0TWVkaWEodmlkZW8sIGF1ZGlvLCBjb25zdHJhaW50cylcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgYWxlcnQoXCJubyBtZWRpYSBkZXRlY3RlZCwgcGxlYXNlIGNvbm5lY3QgYW5kIHRyeSBhZ2FpblwiKVxuICAgIH1cblxufVxuXG5mdW5jdGlvbiByZXN0YXJ0KCkge1xuXG4gICAgaWYgKHdpbmRvdy5zdHJlYW0pIHtcbiAgICAgICAgd2luZG93LnN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYXVkaW9Tb3VyY2UgPSBhdWRpb0lucHV0U2VsZWN0LnZhbHVlO1xuICAgIGNvbnN0IHZpZGVvU291cmNlID0gdmlkZW9TZWxlY3QudmFsdWU7XG4gICAgY29uc3QgY29uc3RyYWludHMgPSB7XG4gICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcbiAgICAgICAgdmlkZW86IHsgZGV2aWNlSWQ6IHZpZGVvU291cmNlID8geyBleGFjdDogdmlkZW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9XG4gICAgfTtcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbigoc3RyZWFtKSA9PiB7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJyZXN0YXJ0XCIpXG5cblxuICAgICAgICB3aW5kb3cuc3RyZWFtID0gc3RyZWFtOyAvLyBtYWtlIHN0cmVhbSBhdmFpbGFibGUgdG8gY29uc29sZVxuICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xuXG4gICAgICAgIC8vUmVnaXN0ZXIgdGhlIHZpZGVvIHN0cmVhbSB0byBteSBTdHJlYW1cbiAgICAgICAgbXlWaWRlb1N0cmVhbSA9IHN0cmVhbTtcblxuICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgJ2lkJzogbXlJZCxcbiAgICAgICAgICAgICd1c2VyJzogdXNlcixcbiAgICAgICAgICAgICdyb29tSUQnOiByb29tSUQsXG4gICAgICAgICAgICAndmlkZW9TdHJlYW0nOiBteVZpZGVvU3RyZWFtXG4gICAgICAgIH1cblxuICAgICAgICBzb2NrZXQuZW1pdChcImNoYW5nZU1lZGlhXCIsIGRhdGEpO1xuXG4gICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKG15SWQpO1xuXG5cbiAgICB9KS5jYXRjaChoYW5kbGVFcnJvcik7XG59XG5cbmF1ZGlvSW5wdXRTZWxlY3Qub25jaGFuZ2UgPSByZXN0YXJ0O1xuYXVkaW9PdXRwdXRTZWxlY3Qub25jaGFuZ2UgPSBjaGFuZ2VBdWRpb0Rlc3RpbmF0aW9uO1xudmlkZW9TZWxlY3Qub25jaGFuZ2UgPSByZXN0YXJ0O1xuXG5cblxuXG5wZWVyLm9uKCdjb25uZWN0aW9uJywgZnVuY3Rpb24oY29ubikge1xuICAgIGNvbm4ub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicGVlciBjb25uZWN0ZWRcIiwgZGF0YSlcbiAgICB9KTtcbiAgICBjb25uLm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgYWxlcnQoXCJjbG9zZVwiKVxuICAgIH0pO1xufSk7XG5cbnBlZXIub24oJ29wZW4nLCAoaWQpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIm15IHBlZXIgaWRcIiArIGlkKVxuICAgIGNvbnNvbGUubG9nKFwibXkgdXNlciBcIiwgdXNlcilcbiAgICBjb25zb2xlLmxvZyhcIm15IHJvb20gaWQgXCIsIHJvb21JRClcblxuICAgIG15SWQgPSBpZDtcblxuICAgIGRhdGEgPSB7XG4gICAgICAgICdpZCc6IGlkLFxuICAgICAgICAndXNlcic6IHVzZXIsXG4gICAgICAgICdyb29tSUQnOiByb29tSURcbiAgICB9XG5cbiAgICBzb2NrZXQuZW1pdChcIm5ld1VzZXJcIiwgZGF0YSk7XG5cbiAgICAvL3N0YXJ0IGEgdmlkZW8gd2l0aCBhdWRpbyBjb25uZWN0aW9uIHdpZHRoIGRhdGEgb2YgdXNlclxuICAgIGxldCB2aWRlbyA9IHRydWU7XG4gICAgbGV0IGF1ZGlvID0gdHJ1ZTtcblxuICAgIHN0YXJ0KHZpZGVvLCBhdWRpbywgZGF0YSlcblxufSk7XG5cblxuXG5wZWVyLm9uKCdjYWxsJywgY2FsbCA9PiB7XG5cbiAgICBsZXQgY3RyID0gMDtcblxuICAgIGNvbnNvbGUubG9nKFwiY2FsbFwiKTtcblxuICAgIGNhbGwuYW5zd2VyKG15VmlkZW9TdHJlYW0pO1xuXG4gICAgY2FsbC5vbignc3RyZWFtJywgKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICBpZiAodXNlclN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNhbGxiYWNrIGlzIGEgdmlkZW9cIilcblxuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG5cbiAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjYWxsZXJCYWNrVmlkZW9cIik7XG4gICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYWxsYmFjayBBVURJT1wiKVxuXG4gICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcblxuICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XG4gICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGRhdGEuaWQpO1xuICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxiYWNrQXVkaW9cIik7XG4gICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XG4gICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICBjdHIrK1xuXG5cbiAgICB9KTtcblxuICAgIGNhbGwub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcInVzZXIgZGlzY29uZWN0ZWRcIilcbiAgICB9KTtcblxufSk7XG5cbnBlZXIub24oJ2Nsb3NlJywgKGlkKSA9PiB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpLnJlbW92ZSgpO1xufSk7XG5cblxuc29ja2V0Lm9uKCd1c2VySm9pbmVkJywgKGRhdGEpID0+IHtcblxuICAgIC8qXG5cbiAgICBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIGxldCByb29tSUQgPSBkYXRhLnJvb21JRDtcbiAgICBsZXQgdXNlciA9IGRhdGEudXNlcjtcblxuICAgIGNvbnN0IGNhbGxiYWNrID0gcGVlci5jYWxsKGlkLCBteVZpZGVvU3RyZWFtKTtcblxuICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgIGxldCBjdHIgPSAwO1xuICAgICAgICBjYWxsYmFjay5vbignc3RyZWFtJywgKHVzZXJTdHJlYW0pID0+IHtcblxuICAgICAgICAgICAgaWYgKGN0ciA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcblxuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxlckJhY2tWaWRlb1wiKTtcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYWRkVmlkZW8oY2FsbGVyRWxlbWVudCwgdXNlclN0cmVhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHIrKztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FsbGJhY2sub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjbG9zaW5nISBjYWxsYmFjayB2aWRlby4uLlwiKVxuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNhbGxiYWNrLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAqL1xuXG59KTtcblxuXG5zb2NrZXQub24oJ21lZGlhQ2hhbmdlZCcsIChkYXRhKSA9PiB7XG5cblxuICAgIGNvbnN0IGF1ZGlvU291cmNlID0gYXVkaW9JbnB1dFNlbGVjdC52YWx1ZTtcbiAgICBjb25zdCB2aWRlb1NvdXJjZSA9IHZpZGVvU2VsZWN0LnZhbHVlO1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0ge1xuICAgICAgICBhdWRpbzogeyBkZXZpY2VJZDogYXVkaW9Tb3VyY2UgPyB7IGV4YWN0OiBhdWRpb1NvdXJjZSB9IDogdW5kZWZpbmVkIH0sXG4gICAgICAgIHZpZGVvOiB7IGRldmljZUlkOiB2aWRlb1NvdXJjZSA/IHsgZXhhY3Q6IHZpZGVvU291cmNlIH0gOiB1bmRlZmluZWQgfVxuICAgIH07XG5cbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbigodXNlclN0cmVhbSkgPT4ge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGgpXG4gICAgICAgIGNvbnNvbGUubG9nKHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGgpO1xuXG4gICAgICAgIGNhbGxiYWNrID0gcGVlci5jYWxsKGRhdGEuaWQsIHVzZXJTdHJlYW0pO1xuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgICAgICBsZXQgY3RyID0gMDtcblxuICAgICAgICAgICAgY2FsbGJhY2sub24oJ3N0cmVhbScsICh1c2VyU3RyZWFtKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh1c2VyU3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXNlciBzZW50IGEgdmlkZW9cIilcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoYWxsYmFjay5wZWVyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGNhbGxiYWNrLnBlZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxlckJhY2tWaWRlb1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVmlkZW8oY2FsbGVyRWxlbWVudCwgdXNlclN0cmVhbSk7XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVzZXIgc2VudCBhIEFVRElPXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjYWxsYmFja0F1ZGlvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb250cm9sc1wiLCBcImNvbnRyb2xzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRBdWRpbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBjdHIrKztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjYWxsYmFjay5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGVlckNvbm5lY3Rpb25zW2RhdGEuaWRdID0gY2FsbGJhY2s7XG4gICAgICAgIH1cblxuXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG5cbiAgICAgICAgYWxlcnQoXCJcIilcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgfSk7XG5cblxuXG4gICAgLypcbiAgICBsZXQgaWQgPSBkYXRhLmlkO1xuICAgIGxldCByb29tSUQgPSBkYXRhLnJvb21JRDtcbiAgICBsZXQgdXNlciA9IGRhdGEudXNlcjtcblxuICAgIGxldCBjYWxsYmFjayA9IG51bGw7XG5cblxuXG4gICAgaWYgKG15VmlkZW9TdHJlYW0gIT09IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBwZWVyLmNhbGwoaWQsIG15VmlkZW9TdHJlYW0pO1xuICAgIH0gZWxzZSBpZiAobXlBdWRpb1N0cmVhbSAhPT0gbnVsbCkge1xuICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChpZCwgbXlBdWRpb1N0cmVhbSk7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coXCJteSB2aWRlb1wiLCBteVZpZGVvU3RyZWFtKTtcbiAgICBjb25zb2xlLmxvZyhcIm15IHZpZGVvXCIsIG15QXVkaW9TdHJlYW0pO1xuXG5cblxuICAgIGlmIChjYWxsYmFjaykge1xuXG4gICAgICAgIGxldCBjdHIgPSAwO1xuXG4gICAgICAgIGNhbGxiYWNrLm9uKCdzdHJlYW0nLCAodXNlclN0cmVhbSkgPT4ge1xuXG4gICAgICAgICAgICBpZiAoY3RyID09IDApIHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVzZXJTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aClcblxuICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ1c2VyIHNlbnQgYSB2aWRlb1wiKVxuXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJjYWxsZXJCYWNrVmlkZW9cIik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcblxuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInVzZXIgc2VudCBhIEFVRElPXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XG5cblxuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkYXRhLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImNhbGxiYWNrQXVkaW9cIik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGN0cisrO1xuICAgICAgICB9KTtcblxuICAgICAgICBjYWxsYmFjay5vbignY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY2FsbGJhY2sub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGVlckNvbm5lY3Rpb25zW2RhdGEuaWRdID0gY2FsbGJhY2s7XG4gICAgfVxuICAgICovXG59KTtcblxuXG5zb2NrZXQub24oJ3VzZXJEaXNjb25uZWN0JywgaWQgPT4ge1xuXG4gICAgY29uc29sZS5sb2coXCJ1c2VyRGlzY29ubmVjdGVkXCIsIGlkKTtcblxuICAgIHJlbW92ZUVsZW1lbnRCeUlEKGlkKTtcblxuICAgIGlmIChwZWVyQ29ubmVjdGlvbnNbaWRdKSB7XG4gICAgICAgIHBlZXJDb25uZWN0aW9uc1tpZF0uY2xvc2UoKTtcbiAgICB9XG59KTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 7:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /var/www/html/esi_development/resources/js/webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });