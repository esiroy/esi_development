/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar peer = new Peer();\nvar myVideoStream;\nvar myId;\nvar videoGrid = document.getElementById('videoGrid');\nvar myvideo = document.createElement('video');\nmyvideo.setAttribute(\"id\", \"myVideo\");\nmyvideo.muted = true;\nvar mySharedVideo = document.createElement('video');\nmySharedVideo.setAttribute(\"id\", \"sharedVideo\");\nvar isSharedVideo = false;\nvar videoElement = document.querySelector('video');\nvideoElement.setAttribute(\"id\", \"myVideo\");\nvideoElement.muted = true;\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError);\n\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {\n      console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n} // Attach audio output device to video element using device/sink ID.\n\n\nfunction attachSinkId(element, sinkId) {\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {\n      console.log(\"Success, audio output device attached: \".concat(sinkId));\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n\n      console.error(errorMessage); // Jump back to first output device in the list as it's the default.\n\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n  attachSinkId(videoElement, audioDestination);\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n\n  videoElement.srcObject = stream; // Refresh button list in case labels have become available\n  //Register the Video\n\n  myVideoStream = stream;\n  /*\n  var vid = document.createElement('video');\n  vid.setAttribute(\"id\", \"callerVideo\");\n  vid.muted = false;\n   addVideo(myvideo, myVideoStream);\n  */\n\n  connectClientVideo(myVideoStream);\n  Object.keys(peerConnections).forEach(function (peerID) {\n    peer.call(peerID, myVideoStream);\n\n    if (call) {\n      call.on('error', function (err) {\n        console.log(err);\n      });\n      call.on('stream', function (userStream) {// addVideo(vid, userStream);\n      });\n      call.on('close', function () {\n        vid.remove();\n        console.log(\"user disconected\");\n      });\n      peerConnections[id] = call;\n    }\n  });\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nvar peerConnections = {};\nsocket.on(\"connect\", function () {\n  audioInputSelect.onchange = createUserMedia;\n  audioOutputSelect.onchange = changeAudioDestination;\n  videoSelect.onchange = createUserMedia;\n  createUserMedia();\n});\nsocket.on('userJoined', function (id) {\n  console.log(\"new user joined\", id);\n  var call = peer.call(id, myVideoStream);\n  var vid = document.createElement('video');\n  vid.setAttribute(\"id\", \"userVid\");\n  vid.muted = false;\n\n  if (call) {\n    call.on('error', function (err) {\n      console.log(err);\n    });\n    call.on('stream', function (userStream) {\n      addVideo(vid, userStream);\n    });\n    call.on('close', function () {\n      vid.remove();\n      console.log(\"user disconected\");\n    });\n    peerConnections[id] = call;\n  }\n});\n\nfunction handleError(error) {\n  console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name); // createUserAudio();\n}\n\nfunction createUserMedia() {\n  /*\n  if (window.stream) {\n      window.stream.getTracks().forEach(track => {\n          track.stop();\n      });\n  }\n  */\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(gotStream).then(gotDevices)[\"catch\"](handleError);\n}\n\nfunction createUserAudio() {\n  //media device only\n  navigator.mediaDevices.getUserMedia({\n    video: false,\n    audio: true\n  }).then(function (stream) {\n    myVideoStream = stream;\n    var vid = document.createElement('video');\n    vid.setAttribute(\"id\", \"callerVideo\");\n    vid.muted = false;\n    addVideo(myvideo, myVideoStream);\n    connectClientVideo(myVideoStream);\n  })[\"catch\"](function (err) {\n    alert(\"Can't create audio\");\n  });\n}\n\nfunction connectClientVideo(stream) {\n  var vid = document.createElement('video');\n  vid.setAttribute(\"id\", \"callerVideo\");\n  vid.muted = false;\n  peer.on('connection', function (conn) {\n    conn.on('data', function (isSharedScreen) {\n      if (isSharedScreen == true) {\n        vid = document.createElement('video');\n        vid.setAttribute(\"id\", \"sharedVideo\");\n      } else {\n        stopSharing();\n        return false;\n      }\n\n      console.log(isSharedScreen);\n    });\n  });\n  peer.on('close', function (conn) {\n    console.log(\"close\");\n  });\n  peer.on('call', function (call) {\n    if (stream == null) {\n      call.answer();\n    } else {\n      call.answer(stream);\n    }\n\n    call.on('stream', function (userStream) {\n      addVideo(vid, userStream);\n    });\n    call.on('finish', function () {\n      console.log(\"called finish\");\n    });\n    call.on('error', function (err) {\n      alert(err);\n    });\n    call.on(\"close\", function () {\n      console.log(vid);\n      vid.remove();\n    });\n    peerConnections[call.peer] = call;\n  });\n}\n\npeer.on('open', function (id) {\n  console.log(\"my peer id\" + id);\n  myId = id;\n  socket.emit(\"newUser\", id, roomID);\n});\npeer.on('error', function (err) {\n  console.log(err + \" : \" + err.type);\n});\nsocket.on('userShared', function (roomID, stream) {\n  /*\n  console.log(\"user shared :\" + myId);\n  const call = peer.call(myId, stream);\n   call.on(\"stream\", (remoteStream) => {\n      // Show stream in some <video> element.\n  });\n  */\n}); //user end stop sharing\n\nfunction stopSharing() {\n  document.getElementById(\"sharedVideo\").remove();\n}\n\nfunction shareScreen() {\n  navigator.mediaDevices.getDisplayMedia({\n    video: true,\n    audio: true\n  }).then(function (stream) {\n    sharedScreen = stream; //The screen record is stopped by myself\n\n    sharedScreen.getVideoTracks()[0].onended = function () {\n      document.getElementById(\"sharedVideo\").remove(); //send this shared screen false to stop peer\n\n      Object.keys(peerConnections).forEach(function (peerID) {\n        var conn = peer.connect(peerID);\n        conn.on('open', function () {\n          var isSharedScreen = false;\n          conn.send(isSharedScreen);\n        });\n      });\n    }; //Connect to peers\n\n\n    Object.keys(peerConnections).forEach(function (peerID) {\n      //connect and send\n      var conn = peer.connect(peerID);\n      conn.on('open', function () {\n        var isSharedScreen = true;\n        conn.send(isSharedScreen);\n        var vid = document.createElement('video');\n        vid.setAttribute(\"id\", \"vid\");\n        var newcall = peer.call(peerID, sharedScreen);\n        newcall.on('error', function (err) {\n          console.log(err);\n        });\n        newcall.on('stream', function (userStream) {// addVideo(vid, userStream);\n        });\n        newcall.on('close', function () {\n          vid.remove();\n          console.log(\"user disconect\");\n        });\n      });\n    });\n    replaceVideo(mySharedVideo, sharedScreen); //socket.emit(\"userShare\", roomID, sharedScreen);\n  });\n}\n\nsocket.on('userDisconnect', function (id) {\n  if (peerConnections[id]) {\n    peerConnections[id].close();\n  }\n});\n\nfunction replaceVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\n\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\n\nfunction stopCam() {\n  //myVideoStream.getVideoTracks().forEach(track => track.stop());\n  myVideoStream.getVideoTracks().forEach(function (track) {\n    if (track.readyState == 'live') {\n      track.stop();\n    } else {\n      console.log(\"video broadcasting live\");\n    }\n  });\n  myVideoStream.getTracks().forEach(function (track) {\n    if (track.readyState == 'live') {\n      track.stop();\n    } else {\n      console.log(\"audio not broadcasting live\");\n    }\n  });\n} // stop only camera\n\n\nfunction stopVideoOnly(stream) {\n  stream.getTracks().forEach(function (track) {\n    if (track.readyState == 'live' && track.kind === 'video') {\n      track.stop();\n    }\n  });\n} // stop only mic\n\n\nfunction stopAudioOnly(stream) {\n  stream.getTracks().forEach(function (track) {\n    if (track.readyState == 'live' && track.kind === 'audio') {\n      track.stop();\n    }\n  });\n}\n\nfunction muteCam() {\n  myVideoStream.getVideoTracks().forEach(function (track) {\n    track.enabled = !track.enabled;\n    console.log(track);\n  });\n}\n\nfunction muteMic() {\n  myVideoStream.getAudioTracks().forEach(function (track) {\n    return track.enabled = !track.enabled;\n  });\n} //DOM Execution\n\n\ndocument.getElementById(\"stopCamera\").addEventListener(\"click\", function () {\n  stopCam();\n});\ndocument.getElementById(\"toggleCamera\").addEventListener(\"click\", function () {\n  muteCam();\n});\ndocument.getElementById(\"toggleAudio\").addEventListener(\"click\", function () {\n  muteMic();\n});\ndocument.getElementById(\"shareScreen\").addEventListener(\"click\", function () {\n  shareScreen();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 7:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /var/www/html/esi_development/resources/js/webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });