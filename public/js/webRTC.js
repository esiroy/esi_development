/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\r\n *  Copyright (c) 2015 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\nvar socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar peer = new Peer({\n  initiator: false,\n  trickle: false\n});\n'use strict';\n\nvar myVideoStream = null;\nvar myAudioStream = null;\nvar videoElement;\nvar audioElement;\nvar sharedScreen = false;\nvar peerConnections = {};\nvar mediaContainer = document.getElementById('myMediaContainer');\nvar videoGrid = document.getElementById('videoGrid');\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {\n      console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError); // Attach audio output device to video element using device/sink ID.\n\nfunction attachSinkId(element, sinkId) {\n  //(mute element, feedback if false)\n  element.muted = true;\n\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {\n      console.log(\"Success, audio output device attached: \".concat(sinkId));\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n\n      console.error(errorMessage); // Jump back to first output device in the list as it's the default.\n\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n\n  if (myVideoStream) {\n    attachSinkId(videoElement, audioDestination);\n  } else {\n    attachSinkId(audioElement, audioDestination);\n  }\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n\n  videoElement.srcObject = stream; //Register the video stream to my Stream\n\n  myVideoStream = stream; // Refresh button list in case labels have become available\n\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction handleError(error) {\n  //start a video with audio connection width data of user\n  var video = false;\n  var audio = true; //start audio\n\n  data = {\n    'id': myId,\n    'user': user,\n    'roomID': roomID\n  };\n  start(video, audio, data);\n}\n\nfunction addMyAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.muted = true;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  mediaContainer.append(audio);\n}\n\nfunction addMyVideo(video, stream) {\n  video.srcObject = stream;\n  video.muted = true;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  mediaContainer.append(video);\n}\n\nfunction addAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  videoGrid.append(audio);\n}\n\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\n\nfunction addVideoContent(containerID, video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  var containerElement = document.getElementById(containerID);\n\n  if (containerElement) {\n    containerElement.append(video);\n  }\n}\n\nfunction showByElementId(elementID) {\n  var el = document.getElementById(elementID);\n\n  if (el) {\n    el.style.display = 'block';\n  }\n}\n\nfunction hideByElementId(elementID) {\n  var el = document.getElementById(elementID);\n\n  if (el) {\n    el.style.display = 'none';\n  }\n}\n\nfunction removeElementByID(id) {\n  var element = document.getElementById(id);\n\n  if (element) {\n    element.remove();\n  }\n}\n\nfunction createUserMedia(video, audio, constraints) {\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    removeElementByID(\"myVideo\");\n    removeElementByID(\"myAudio\");\n\n    if (audio == true && video == true) {\n      myAudioStream = null; //Register the video stream to my Stream\n\n      myVideoStream = stream;\n      window.stream = stream; // make stream available to console     \n\n      /*******\r\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n      *******/\n\n      videoElement = document.createElement('video');\n      videoElement.setAttribute(\"id\", \"myVideo\");\n      videoElement.muted = false; //videoElement.muted = true;\n\n      addMyVideo(videoElement, stream); // detectDesktopShared(stream)\n    } else {\n      //Register the video stream to my Stream\n      myVideoStream = null;\n      window.stream = stream; // make stream available to console       \n      //add to my audio stream\n\n      myAudioStream = stream;\n      console.log(\"this is a audio only\");\n      /*******\r\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n      *******/\n\n      audioElement = document.createElement('audio');\n      audioElement.setAttribute(\"id\", \"myAudio\");\n      audioElement.setAttribute(\"controls\", \"controls\"); //audioElement.muted = false;\n\n      audioElement.muted = true;\n      addMyAudio(audioElement, stream); // detectDesktopShared(stream)\n    }\n\n    return navigator.mediaDevices.enumerateDevices();\n  }).then(gotDevices)[\"catch\"](function (err) {\n    if (video == true && audio == true) {\n      handleError(err);\n    } else {//alert(\"no media detected, please connect and try again\")\n    }\n  });\n}\n\nfunction start(video, audio, data) {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n\n  if (video == true && audio == true) {\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: {\n        deviceId: videoSource ? {\n          exact: videoSource\n        } : undefined\n      }\n    };\n    console.log(\"connect video : start\");\n    createUserMedia(video, audio, constraints);\n  } else if (video == false && audio == true) {\n    var _constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    console.log(\"connect audio : start\");\n    createUserMedia(video, audio, _constraints);\n  } else {//alert(\"no media detected, please connect and try again\")\n  }\n}\n\nfunction restart() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    console.log(\"restarted\");\n    window.stream = stream; // make stream available to console\n\n    videoElement.srcObject = stream; //console.log(\"i have muted this\")\n    //videoElement.muted = true;\n    //Register the video stream to my Stream\n\n    myVideoStream = stream;\n    data = {\n      'id': myId,\n      'user': user,\n      'roomID': roomID,\n      'videoStream': myVideoStream\n    };\n    socket.emit(\"changeMedia\", data);\n    removeElementByID(myId);\n  })[\"catch\"](handleError);\n} //user end stop sharing\n\n\nfunction stopSharing() {\n  var showElement = document.getElementById(\"lessonSlide\");\n\n  if (showElement) {\n    showElement.style.display = 'block';\n  }\n\n  var removeElement = document.getElementById(\"sharedVideo\");\n\n  if (removeElement) {\n    removeElement.remove();\n  }\n}\n\nfunction detectDesktopShared(stream) {\n  peer.on('connection', function (conn) {\n    conn.on('data', function (data) {\n      if (data.sharedScreen == true) {\n        //@toto peer.stream to wait for the\n        sharedScreen = true;\n      } else if (data.sharedScreen == false) {\n        stopSharing();\n        sharedScreen = false;\n        return false;\n      } else {\n        alert(\"the stream data\");\n      }\n    });\n  });\n  peer.on('close', function (conn) {\n    console.log(\"close\");\n  });\n  peer.on('call', function (call) {\n    if (stream == null) {\n      console.log(\"answer the stream without any stream\", call);\n      call.answer();\n    } else {\n      console.log(\"answer the stream\", stream);\n      call.answer(stream);\n\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        alert(\"reciever from sender is a video 11-25 :: (peer)\" + call.peer);\n        removeElementByID(call.peer);\n        callerElement = document.createElement('video');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n        callerElement.muted = false;\n        addVideo(callerElement, stream);\n      } else {\n        alert(\"reciever from sender is a audio 22-25 :: (peer)\" + call.peer);\n        removeElementByID(call.peer);\n        callerElement = document.createElement('audio');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n        callerElement.setAttribute(\"controls\", \"controls\");\n        callerElement.muted = false;\n        addAudio(callerElement, stream);\n      }\n    }\n\n    call.on('stream', function (userStream) {\n      if (sharedScreen == true) {\n        sharedVid = document.createElement('video');\n        sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n        addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n        hideByElementId(\"lessonSlide\");\n      } else {\n        //the user did not\n        alert(\"user video \");\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n      }\n    });\n    call.on('finish', function () {\n      console.log(\"called finish\");\n    });\n    call.on('error', function (err) {\n      alert(err);\n    });\n    call.on(\"close\", function () {\n      alert(\"closed shared\");\n      sharedVid.remove();\n    });\n  });\n}\n\n;\n\nfunction shareScreen() {\n  navigator.mediaDevices.getDisplayMedia({\n    video: true,\n    audio: true\n  }).then(function (userStream) {\n    sharedScreen = userStream; //@todo: (hide slide then show the user shared)\n\n    var sharedVid = document.createElement('video');\n    sharedVid.setAttribute(\"id\", \"sharedVideo\");\n    sharedVid.muted = false; //the lesson shared container must be on the member lesson slider component\n\n    addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n    hideByElementId(\"lessonSlide\");\n    console.log(peerConnections); //Connect to peers\n\n    Object.keys(peerConnections).forEach(function (peerID) {\n      //connect and send\n      var conn = peer.connect(peerID);\n      conn.on('open', function () {\n        /*********************               \r\n            (NEW) share screen data\r\n        *************************/\n        var data = {\n          'id': peerID,\n          'sharedScreen': true\n        }; //add to the connection, and send then call\n\n        conn.send(data);\n        var sharingScreen = peer.call(peerID, sharedScreen);\n      });\n    }); //The screen record is stopped by myself\n\n    sharedScreen.getVideoTracks()[0].onended = function () {\n      showByElementId(\"lessonSlide\");\n      document.getElementById(\"sharedVideo\").remove(); //send this shared screen false to stop peer\n\n      Object.keys(peerConnections).forEach(function (peerID) {\n        var conn = peer.connect(peerID);\n        conn.on('open', function () {\n          /*********************               \r\n              (STOP SHARE) share screen data\r\n          *************************/\n          var data = {\n            'id': peerID,\n            'sharedScreen': false\n          };\n          conn.send(data);\n        });\n      });\n    }; //socket.emit(\"userShare\", roomID, sharedScreen);\n\n  });\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\npeer.on('connection', function (conn) {\n  conn.on('data', function (data) {\n    console.log(\"peer connected\", data);\n\n    if (data.sharedScreen == true) {\n      sharedScreen = true;\n    } else if (data.sharedScreen == false) {\n      stopSharing();\n      sharedScreen = false;\n      return false;\n    } else {\n      alert(\"the stream data\");\n    }\n  });\n  conn.on('close', function (conn) {\n    console.log(\"connection of peer has been closed\", conn);\n  });\n});\npeer.on('open', function (id) {\n  console.log(\"my peer id\" + id);\n  console.log(\"my user \", user);\n  console.log(\"my room id \", roomID);\n  myId = id;\n  data = {\n    'id': id,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data); //start a video with audio connection width data of user\n\n  var video = true;\n  var audio = true; //start the my own video camera\n\n  start(video, audio, data);\n});\npeer.on('call', function (call) {\n  var ctr = 0;\n  console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {//alert(\"stream from sender is a video 1\")\n    } else {//alert(\"stream from sender is a audio 2\")\n    }\n\n    call.answer(stream);\n    call.on('stream', function (userStream) {\n      peerConnections[call.peer] = call;\n      console.log(\"recieve video from initiator \", call);\n\n      if (ctr == 0) {\n        if (sharedScreen == true) {\n          sharedVid = document.createElement('video');\n          sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n          addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n          hideByElementId(\"lessonSlide\");\n          return false;\n        }\n\n        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n          //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n          removeElementByID(call.peer);\n          callerElement = document.createElement('video');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n          callerElement.muted = false;\n          addVideo(callerElement, userStream);\n        } else {\n          //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n          removeElementByID(call.peer);\n          callerElement = document.createElement('audio');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n          callerElement.setAttribute(\"controls\", \"controls\");\n          callerElement.muted = false;\n          addAudio(callerElement, userStream);\n        }\n      }\n\n      ctr++;\n    });\n    call.on('close', function () {\n      removeElementByID(call.peer);\n      console.log(\"user disconected\");\n    });\n  })[\"catch\"](function (error) {\n    console.log(\"recieve audio from initiator\", call);\n    var audioSource = audioInputSelect.value;\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {//alert(\"stream from sender is a video 3\")\n      } else {//alert(\"stream from sender is a audio 4\")\n      }\n\n      call.answer(stream);\n      call.on('stream', function (userStream) {\n        peerConnections[call.peer] = call;\n\n        if (ctr == 0) {\n          if (sharedScreen == true) {\n            sharedVid = document.createElement('video');\n            sharedVid.setAttribute(\"id\", \"sharedVideo\"); //the lesson shared container must be on the member lesson slider component\n\n            addVideoContent('lessonSharedContainer', sharedVid, userStream); //hide lesson Slide\n\n            hideByElementId(\"lessonSlide\");\n            return false;\n          }\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      call.on('close', function () {\n        removeElementByID(call.peer);\n        console.log(\"user disconected\");\n      });\n    })[\"catch\"](function (error) {//alert(\"I can't send any video r audio to your contact, please check media\")\n    });\n  });\n});\npeer.on('close', function (id) {\n  document.getElementById(id).remove();\n});\nsocket.on('userJoined', function (data) {\n  peerConnections[data.id] = data;\n  console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n    console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n    callback = peer.call(data.id, mediaStream);\n\n    if (callback) {\n      peerConnections[callback.peer] = callback;\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        console.log(err);\n      });\n    }\n  })[\"catch\"](function (error) {\n    //I have only audio, send to the audio to my peer\n    console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (mediaCallStream) {\n      if (myVideoStream) {\n        callback = peer.call(data.id, mediaCallStream);\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data); //never mind callback, i will call change media\n\n        callback = null;\n      }\n\n      if (callback) {\n        peerConnections[callback.peer] = callback;\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          if (ctr == 0) {\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //removeElementByID(data.id);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              removeElementByID(data.id);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n      //alert(\"Please connect audioinput device and try again\");\n      console.log(error);\n    });\n  });\n  /*\r\n  let id = data.id;\r\n  let roomID = data.roomID;\r\n  let user = data.user;\r\n    const callback = peer.call(id, myVideoStream);\r\n    console.log(\"new user joined\", data);\r\n      if (callback) {\r\n        let ctr = 0;\r\n      callback.on('stream', (userStream) => {\r\n            if (ctr == 1) {\r\n                removeElementByID(data.id);\r\n                callerElement = document.createElement('video');\r\n              callerElement.setAttribute(\"id\", data.id);\r\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\r\n              callerElement.muted = false;\r\n              addVideo(callerElement, userStream);\r\n          }\r\n          ctr++;\r\n      });\r\n        callback.on('close', () => {\r\n          console.log(\"closing! callback video...\")\r\n          removeElementByID(data.id);\r\n      });\r\n        callback.on('error', (err) => {\r\n          console.log(err);\r\n      });\r\n  }\r\n  */\n});\nsocket.on('mediaChanged', function (data) {\n  //alert(\"media change\");\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (userStream) {\n    console.log(\"mediaChanged: initiator (recieved)\");\n    callback = peer.call(data.id, userStream);\n\n    if (callback) {\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          console.log(\"repipient callback : video stream\");\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", callback.peer);\n            callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        console.log(err);\n      });\n      peerConnections[data.id] = callback;\n    }\n  })[\"catch\"](function (error) {\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (userStream) {\n      console.log(\"initiator SENT AND AUDIO\");\n      callback = peer.call(data.id, userStream);\n\n      if (callback) {\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          console.log(\"this is for the audio, stream of the initiator\");\n\n          if (ctr == 0) {\n            console.log(userStream.getAudioTracks().length);\n            console.log(userStream.getVideoTracks().length);\n\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              console.log(\"user sent a video\");\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              console.log(\"user sent a AUDIO\");\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n      //alert(\"audio only\");\n      console.log(error);\n    });\n  });\n  /*\r\n  let id = data.id;\r\n  let roomID = data.roomID;\r\n  let user = data.user;\r\n    let callback = null;\r\n  \r\n  if (myVideoStream !== null) {\r\n      callback = peer.call(id, myVideoStream);\r\n  } else if (myAudioStream !== null) {\r\n      callback = peer.call(id, myAudioStream);\r\n  }\r\n    console.log(\"my video\", myVideoStream);\r\n  console.log(\"my video\", myAudioStream);\r\n  \r\n  if (callback) {\r\n        let ctr = 0;\r\n        callback.on('stream', (userStream) => {\r\n            if (ctr == 0) {\r\n                console.log(userStream.getAudioTracks().length)\r\n              console.log(userStream.getVideoTracks().length)\r\n                if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\r\n                    console.log(\"user sent a video\")\r\n                    removeElementByID(data.id);\r\n                      callerElement = document.createElement('video');\r\n                  callerElement.setAttribute(\"id\", data.id);\r\n                  callerElement.setAttribute(\"class\", \"callerBackVideo\");\r\n                  callerElement.muted = false;\r\n                    addVideo(callerElement, userStream);\r\n                  } else {\r\n                    console.log(\"user sent a AUDIO\")\r\n                    removeElementByID(data.id);\r\n                      callerElement = document.createElement('audio');\r\n                  callerElement.setAttribute(\"id\", data.id);\r\n                  callerElement.setAttribute(\"class\", \"callbackAudio\");\r\n                  callerElement.setAttribute(\"controls\", \"controls\");\r\n                  callerElement.muted = false;\r\n                    addAudio(callerElement, userStream);\r\n              }\r\n            }\r\n              ctr++;\r\n      });\r\n        callback.on('close', () => {\r\n          removeElementByID(data.id);\r\n      });\r\n        callback.on('error', (err) => {\r\n          console.log(err);\r\n      });\r\n        peerConnections[data.id] = callback;\r\n  }\r\n  */\n});\nsocket.on('userDisconnect', function (id) {\n  console.log(\"userDisconnected\", id);\n  removeElementByID(id);\n\n  try {\n    peerConnections[id].close();\n  } catch (err) {\n    console.log(\"error disconnect : \", err);\n  }\n});\n\nfunction muteMic() {\n  console.log(\"audio mute mic\");\n\n  if (myVideoStream != null) {\n    console.log(\"muting video\");\n    myVideoStream.getAudioTracks().forEach(function (track) {\n      return track.enabled = !track.enabled;\n    });\n  }\n\n  if (myAudioStream != null) {\n    console.log(\"muting myAudioStream\");\n    myAudioStream.getAudioTracks().forEach(function (track) {\n      return track.enabled = !track.enabled;\n    });\n  }\n}\n\ndocument.getElementById(\"btnShareScreen\").addEventListener(\"click\", function () {\n  shareScreen();\n});\n/*\r\ndocument.getElementById(\"toggleAudio\").addEventListener(\"click\", function() {\r\n    muteMic();\r\n});\r\n*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 7:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! S:\wamp64\www\mytutor\resources\js\webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });