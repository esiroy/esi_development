/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/js/webRTC.js":
/*!********************************!*\
  !*** ./resources/js/webRTC.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nvar socket = io('https://rtcserver.esuccess-inc.com:40002', {});\nvar myId = null;\nvar peer = new Peer({\n  initiator: false,\n  trickle: false\n});\n'use strict';\nvar myVideoStream = null;\nvar myAudioStream = null;\n\n//this will determine who calls\nvar userCallStream = null;\nvar recieverCallStream = null;\nvar userJoinedStream = null;\n\n//Elements\nvar videoElement;\nvar audioElement;\n\n//Share Screen\nvar sharedScreen = false;\nvar checkingInterval = null;\nvar peerConnections = {};\nvar mediaContainer = document.getElementById('myMediaContainer');\nvar videoGrid = document.getElementById('videoGrid');\n\n//Source\nvar audioInputSelect = document.querySelector('select#audioSource');\nvar audioOutputSelect = document.querySelector('select#audioOutput');\nvar videoSelect = document.querySelector('select#videoSource');\nvar selectors = [audioInputSelect, audioOutputSelect, videoSelect];\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\nnavigator.mediaDevices.enumerateDevices().then(gotDevices)[\"catch\"](handleError);\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  var values = selectors.map(function (select) {\n    return select.value;\n  });\n  selectors.forEach(function (select) {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n  for (var i = 0; i !== deviceInfos.length; ++i) {\n    var deviceInfo = deviceInfos[i];\n    var option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || \"microphone \".concat(audioInputSelect.length + 1);\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || \"speaker \".concat(audioOutputSelect.length + 1);\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || \"camera \".concat(videoSelect.length + 1);\n      videoSelect.appendChild(option);\n    } else {\n      //console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n  selectors.forEach(function (select, selectorIndex) {\n    if (Array.prototype.slice.call(select.childNodes).some(function (n) {\n      return n.value === values[selectorIndex];\n    })) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\n// Attach audio output device to video element using device/sink ID.\nfunction attachSinkId(element, sinkId) {\n  //(mute element, feedback if false)\n  element.muted = true;\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId).then(function () {\n      //console.log(`Success, audio output device attached: ${sinkId}`);\n    })[\"catch\"](function (error) {\n      var errorMessage = error;\n      if (error.name === 'SecurityError') {\n        errorMessage = \"You need to use HTTPS for selecting audio output device: \".concat(error);\n      }\n      console.error(errorMessage);\n      // Jump back to first output device in the list as it's the default.\n      audioOutputSelect.selectedIndex = 0;\n    });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\nfunction changeAudioDestination() {\n  var audioDestination = audioOutputSelect.value;\n  if (myVideoStream) {\n    attachSinkId(videoElement, audioDestination);\n  } else {\n    attachSinkId(audioElement, audioDestination);\n  }\n}\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n  videoElement.srcObject = stream;\n\n  //Register the video stream to my Stream\n  myVideoStream = stream;\n\n  // Refresh button list in case labels have become available\n  return navigator.mediaDevices.enumerateDevices();\n}\nfunction handleError(error) {\n  //start a video with audio connection width data of user\n  var video = false;\n  var audio = true;\n\n  //start audio\n  data = {\n    'id': myId,\n    'user': user,\n    'roomID': roomID\n  };\n  start(video, audio, data);\n}\nfunction addMyAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.muted = true;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  mediaContainer.append(audio);\n}\nfunction addMyVideo(video, stream) {\n  video.srcObject = stream;\n  video.muted = true;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  mediaContainer.append(video);\n}\nfunction addAudio(audio, stream) {\n  audio.srcObject = stream;\n  audio.addEventListener('loadedmetadata', function () {\n    audio.play();\n  });\n  videoGrid.append(audio);\n}\nfunction addVideo(video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  videoGrid.append(video);\n}\nfunction addVideoContent(containerID, video, stream) {\n  video.srcObject = stream;\n  video.addEventListener('loadedmetadata', function () {\n    video.play();\n  });\n  var containerElement = document.getElementById(containerID);\n  if (containerElement) {\n    containerElement.append(video);\n  }\n}\nfunction showByElementId(elementID) {\n  var el = document.getElementById(elementID);\n  if (el) {\n    el.style.display = 'block';\n  }\n}\nfunction hideByElementId(elementID) {\n  var el = document.getElementById(elementID);\n  if (el) {\n    el.style.display = 'none';\n  }\n}\nfunction removeElementByID(id) {\n  var element = document.getElementById(id);\n  if (element) {\n    element.remove();\n  }\n}\nfunction createUserMedia(video, audio, constraints) {\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    removeElementByID(\"myVideo\");\n    removeElementByID(\"myAudio\");\n    if (audio == true && video == true) {\n      myAudioStream = null;\n\n      //Register the video stream to my Stream\n      myVideoStream = stream;\n      window.stream = stream; // make stream available to console     \n      /*******\r\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n      *******/\n\n      videoElement = document.createElement('video');\n      videoElement.setAttribute(\"id\", \"myVideo\");\n      videoElement.muted = false;\n      //videoElement.muted = true;\n      addMyVideo(videoElement, stream);\n\n      // detectDesktopShared(stream)\n    } else {\n      //Register the video stream to my Stream\n      myVideoStream = null;\n      window.stream = stream; // make stream available to console       \n\n      //add to my audio stream\n      myAudioStream = stream;\n\n      //console.log(\"this is a audio only\")\n\n      /*******\r\n          (NOTE: THIS SHOULD BE MUTED = TRUE) \r\n      *******/\n      audioElement = document.createElement('audio');\n      audioElement.setAttribute(\"id\", \"myAudio\");\n      audioElement.setAttribute(\"controls\", \"controls\");\n      //audioElement.muted = false;\n      audioElement.muted = true;\n      addMyAudio(audioElement, stream);\n\n      // detectDesktopShared(stream)\n    }\n\n    return navigator.mediaDevices.enumerateDevices();\n  }).then(gotDevices)[\"catch\"](function (err) {\n    if (video == true && audio == true) {\n      handleError(err);\n    } else {\n\n      //alert(\"no media detected, please connect and try again\")\n    }\n  });\n}\nfunction start(video, audio, data) {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  if (video == true && audio == true) {\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: {\n        deviceId: videoSource ? {\n          exact: videoSource\n        } : undefined\n      }\n    };\n\n    //console.log(\"connect video : start\")\n\n    createUserMedia(video, audio, constraints);\n  } else if (video == false && audio == true) {\n    var _constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n\n    //console.log(\"connect audio : start\")\n    createUserMedia(video, audio, _constraints);\n  } else {\n\n    //alert(\"no media detected, please connect and try again\")\n  }\n}\nfunction restart() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    window.stream = stream; // make stream available to console\n    videoElement.srcObject = stream;\n\n    //console.log(\"i have muted this\")\n    //videoElement.muted = true;\n\n    //Register the video stream to my Stream\n    myVideoStream = stream;\n    data = {\n      'id': myId,\n      'user': user,\n      'roomID': roomID,\n      'videoStream': myVideoStream\n    };\n    socket.emit(\"changeMedia\", data);\n    removeElementByID(myId);\n  })[\"catch\"](handleError);\n}\n\n//user end stop sharing\nfunction stopSharing() {\n  console.log(\"stopSharing()\");\n  var showElement = document.getElementById(\"lessonSlide\");\n  if (showElement) {\n    showElement.style.display = 'block';\n  }\n  checkAndRemoveSharedVideo();\n}\nfunction checkAndRemoveSharedVideo() {\n  var removeElement = document.getElementById(\"sharedVideo\");\n  if (removeElement) {\n    removeSharedVideo();\n  } else {\n    console.log(\"rechecking shared video after 1 second\");\n    // If not found, wait for a while and then check again\n    checkingInterval = setTimeout(checkAndRemoveSharedVideo, 1000); // Wait for 1 second (adjust as needed)\n  }\n}\n\nfunction removeSharedVideo() {\n  var container = document.getElementById(\"lessonSharedContainer\");\n  if (container) {\n    // Store the parent element to insert the new container in the same position.\n    var parent = container.parentNode;\n\n    // Create a new container element.\n    var newContainer = document.createElement(\"div\");\n    newContainer.id = \"lessonSharedContainer\";\n\n    // Add content or attributes to the new container if needed.\n    newContainer.textContent = \"\";\n\n    // Replace the old container with the new one.\n    parent.insertBefore(newContainer, container);\n\n    // Remove the old shared video container.\n    container.remove();\n  }\n}\nfunction detectDesktopShared(stream) {\n  peer.on('connection', function (conn) {\n    conn.on('data', function (data) {\n      if (data.sharedScreen == true) {\n        sharedScreen = true;\n      } else if (data.sharedScreen == false) {\n        console.log(\"detectDesktopShared stopped\");\n        stopSharing();\n        sharedScreen = false;\n        return false;\n      } else {\n        alert(\"the stream data\");\n      }\n    });\n  });\n  peer.on('close', function (conn) {\n    //console.log(\"close\")\n  });\n  peer.on('call', function (call) {\n    if (stream == null) {\n      //console.log(\"answer the stream without any stream\", call)\n      call.answer();\n    } else {\n      //console.log(\"answer the stream\", stream)\n\n      call.answer(stream);\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        removeElementByID(call.peer);\n        callerElement = document.createElement('video');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n        callerElement.muted = false;\n        addVideo(callerElement, stream);\n      } else {\n        removeElementByID(call.peer);\n        callerElement = document.createElement('audio');\n        callerElement.setAttribute(\"id\", call.peer);\n        callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n        callerElement.setAttribute(\"controls\", \"controls\");\n        callerElement.muted = false;\n        addAudio(callerElement, stream);\n      }\n    }\n    call.on('stream', function (userStream) {\n      if (sharedScreen == true) {\n        sharedVid = document.createElement('video');\n        sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n        //the lesson shared container must be on the member lesson slider component\n        addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n        //hide lesson Slide\n        hideByElementId(\"lessonSlide\");\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n      }\n    });\n    call.on('finish', function () {\n      //console.log(\"called finish\")\n    });\n    call.on('error', function (err) {\n      alert(err);\n    });\n    call.on(\"close\", function () {\n      sharedVid.remove();\n    });\n  });\n}\n;\nfunction shareScreen() {\n  navigator.mediaDevices.getDisplayMedia({\n    video: true,\n    audio: true\n  }).then(function (userStream) {\n    sharedScreen = userStream;\n\n    //@todo: (hide slide then show the user shared)\n    var sharedVid = document.createElement('video');\n    sharedVid.setAttribute(\"id\", \"sharedVideo\");\n    sharedVid.muted = false;\n\n    //the lesson shared container must be on the member lesson slider component\n    addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n    //hide lesson Slide\n    hideByElementId(\"lessonSlide\");\n\n    //Connect to peers\n    Object.keys(peerConnections).forEach(function (peerID) {\n      //connect and send\n      var conn = peer.connect(peerID);\n      conn.on('open', function () {\n        /*********************               \r\n            (NEW) share screen data\r\n        *************************/\n        var data = {\n          'id': peerID,\n          'sharedScreen': true\n        };\n        //add to the connection, and send then call\n        conn.send(data);\n        var sharingScreen = peer.call(peerID, sharedScreen);\n      });\n    });\n\n    //The screen record is stopped by myself\n    sharedScreen.getVideoTracks()[0].onended = function () {\n      showByElementId(\"lessonSlide\");\n      document.getElementById(\"sharedVideo\").remove();\n      //send this shared screen false to stop peer\n      Object.keys(peerConnections).forEach(function (peerID) {\n        var conn = peer.connect(peerID);\n        conn.on('open', function () {\n          /*********************               \r\n              (STOP SHARE) share screen data\r\n          *************************/\n          var data = {\n            'id': peerID,\n            'sharedScreen': false\n          };\n          conn.send(data);\n        });\n      });\n    };\n\n    //socket.emit(\"userShare\", roomID, sharedScreen);\n  });\n}\n\naudioInputSelect.onchange = restart;\naudioOutputSelect.onchange = changeAudioDestination;\nvideoSelect.onchange = restart;\npeer.on('connection', function (conn) {\n  conn.on('data', function (data) {\n    console.log(\"share connection: peer connected\", data);\n    if (data.sharedScreen == true) {\n      sharedScreen = true;\n    } else if (data.sharedScreen == false) {\n      console.log(\"connection shared stopped\");\n      stopSharing();\n      sharedScreen = false;\n      return false;\n    } else {\n      alert(\"the stream data\");\n    }\n  });\n  conn.on('close', function (conn) {\n    console.log(\"shared video connection of peer has been closed\", conn);\n    var sharedVideo = document.getElementById('sharedVideo');\n\n    // Check if the video element exists before attempting to remove it\n    if (sharedVideo) {\n      // Remove the video element from the DOM\n      sharedVideo.remove();\n    } else {\n      console.log('Element with id \"sharedVideo\" not found.');\n    }\n  });\n});\npeer.on('open', function (id) {\n  //console.log(\"my peer id\" + id)\n  //console.log(\"my user \", user)\n  //console.log(\"my room id \", roomID)\n\n  myId = id;\n  data = {\n    'id': id,\n    'user': user,\n    'roomID': roomID\n  };\n  socket.emit(\"newUser\", data);\n\n  //start a video with audio connection width data of user\n  var video = true;\n  var audio = true;\n\n  //start the my own video camera\n\n  start(video, audio, data);\n});\npeer.on('call', function (call) {\n  var ctr = 0;\n\n  //console.log(\"PEER:: CALLING... for a video stream or audio stream ...\");\n\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n    userCallStream = stream;\n    if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n      //alert(\"stream from sender is a video 1\")\n    } else {\n      //alert(\"stream from sender is a audio 2\")\n    }\n    call.answer(stream);\n    call.on('stream', function (userStream) {\n      recieverCallStream = userStream;\n      peerConnections[call.peer] = call;\n\n      //console.log(\"recieve video from initiator \", call);\n\n      if (ctr == 0) {\n        if (sharedScreen == true) {\n          sharedVid = document.createElement('video');\n          sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n          //the lesson shared container must be on the member lesson slider component\n          addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n          //hide lesson Slide\n          hideByElementId(\"lessonSlide\");\n          return false;\n        }\n        if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n          //alert(\"reciever from sender is a video 5 :: (peer)\" + call.peer)\n\n          removeElementByID(call.peer);\n          callerElement = document.createElement('video');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n          callerElement.muted = false;\n          addVideo(callerElement, userStream);\n        } else {\n          //alert(\"reciever from sender is a audio 6 :: (peer)\" + call.peer)\n\n          removeElementByID(call.peer);\n          callerElement = document.createElement('audio');\n          callerElement.setAttribute(\"id\", call.peer);\n          callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n          callerElement.setAttribute(\"controls\", \"controls\");\n          callerElement.muted = false;\n          addAudio(callerElement, userStream);\n        }\n      }\n      ctr++;\n    });\n    call.on('close', function () {\n      removeElementByID(call.peer);\n      //console.log(\"user disconected\")\n    });\n  })[\"catch\"](function (error) {\n    //console.log(\"recieve audio from initiator\", call);\n\n    var audioSource = audioInputSelect.value;\n    var constraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      userCallStream = stream;\n      if (stream.getAudioTracks().length == 1 && stream.getVideoTracks().length == 1) {\n        //alert(\"stream from sender is a video 3\")\n      } else {\n        //alert(\"stream from sender is a audio 4\")\n      }\n      call.answer(stream);\n      call.on('stream', function (userStream) {\n        recieverCallStream = userStream;\n        peerConnections[call.peer] = call;\n        if (ctr == 0) {\n          if (sharedScreen == true) {\n            sharedVid = document.createElement('video');\n            sharedVid.setAttribute(\"id\", \"sharedVideo\");\n\n            //the lesson shared container must be on the member lesson slider component\n            addVideoContent('lessonSharedContainer', sharedVid, userStream);\n\n            //hide lesson Slide\n            hideByElementId(\"lessonSlide\");\n            return false;\n          }\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            //alert(\"reciever from sender is a video 7  :: (peer) \" + call.peer)\n\n            removeElementByID(call.peer);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackVideo\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            //alert(\"reciever from sender is a audio 8 :: (peer)\" + call.peer)\n            removeElementByID(call.peer);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", call.peer);\n            callerElement.setAttribute(\"class\", \"peerCallBackAudio\"); //call peer\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n        ctr++;\n      });\n      call.on('close', function () {\n        removeElementByID(call.peer);\n        //console.log(\"user disconected\")\n      });\n    })[\"catch\"](function (error) {\n      //alert(\"I can't send any video r audio to your contact, please check media\")\n    });\n  });\n});\npeer.on('close', function (id) {\n  document.getElementById(id).remove();\n});\nsocket.on('userJoined', function (data) {\n  peerConnections[data.id] = data;\n  console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n    //console.log(\"user joined ::: calling initiator with just audio and video\", data.id);\n\n    userJoinedStream = mediaStream;\n    callback = peer.call(data.id, mediaStream);\n    if (callback) {\n      peerConnections[callback.peer] = callback;\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        //console.log(err);\n      });\n    }\n    checkVideoDisabled();\n    checkAudioMuted();\n  })[\"catch\"](function (error) {\n    //I have only audio, send to the audio to my peer\n    //console.log(\"user joined:: I have only audio, send to the audio to my peer\", data.id);\n\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (mediaCallStream) {\n      userJoinedStream = mediaCallStream;\n      if (myVideoStream) {\n        callback = peer.call(data.id, mediaCallStream);\n      } else {\n        data = {\n          'id': myId,\n          'user': user,\n          'roomID': roomID,\n          'videoStream': mediaCallStream\n        };\n        socket.emit(\"changeMedia\", data);\n\n        //never mind callback, i will call change media\n        callback = null;\n      }\n      if (callback) {\n        peerConnections[callback.peer] = callback;\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          if (ctr == 0) {\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //removeElementByID(data.id);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              removeElementByID(data.id);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", data.id);\n              callerElement.setAttribute(\"class\", \"user_joined_peer_call_back\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          //console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n\n      //alert(\"Please connect audioinput device and try again\");\n      // //console.log(error)\n    });\n    checkVideoDisabled();\n    checkAudioMuted();\n  });\n});\nsocket.on('mediaChanged', function (data) {\n  var audioSource = audioInputSelect.value;\n  var videoSource = videoSelect.value;\n  var constraints = {\n    audio: {\n      deviceId: audioSource ? {\n        exact: audioSource\n      } : undefined\n    },\n    video: {\n      deviceId: videoSource ? {\n        exact: videoSource\n      } : undefined\n    }\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(function (userStream) {\n    //console.log(\"mediaChanged: initiator (recieved)\")\n\n    callback = peer.call(data.id, userStream);\n    if (callback) {\n      var ctr = 0;\n      callback.on('stream', function (userStream) {\n        if (ctr == 0) {\n          //console.log(\"recipient callback : video stream\");\n\n          if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n            removeElementByID(data.id);\n            callerElement = document.createElement('video');\n            callerElement.setAttribute(\"id\", callback.peer);\n            callerElement.setAttribute(\"class\", \"repipient_video_changed\");\n            callerElement.muted = false;\n            addVideo(callerElement, userStream);\n          } else {\n            removeElementByID(data.id);\n            callerElement = document.createElement('audio');\n            callerElement.setAttribute(\"id\", data.id);\n            callerElement.setAttribute(\"class\", \"repipient_audio_changed\");\n            callerElement.setAttribute(\"controls\", \"controls\");\n            callerElement.muted = false;\n            addAudio(callerElement, userStream);\n          }\n        }\n        ctr++;\n      });\n      callback.on('close', function () {\n        removeElementByID(data.id);\n      });\n      callback.on('error', function (err) {\n        //console.log(err);\n      });\n      peerConnections[data.id] = callback;\n    }\n  })[\"catch\"](function (error) {\n    var audioConstraints = {\n      audio: {\n        deviceId: audioSource ? {\n          exact: audioSource\n        } : undefined\n      },\n      video: false\n    };\n    navigator.mediaDevices.getUserMedia(audioConstraints).then(function (userStream) {\n      userCallStream = userStream;\n\n      //console.log(\"initiator SENT AND AUDIO\")\n\n      callback = peer.call(data.id, userStream);\n      if (callback) {\n        var ctr = 0;\n        callback.on('stream', function (userStream) {\n          recieverCallStream = userStream;\n\n          //console.log(\"this is for the audio, stream of the initiator\");\n\n          if (ctr == 0) {\n            //console.log(userStream.getAudioTracks().length)\n            //console.log(userStream.getVideoTracks().length)\n\n            if (userStream.getAudioTracks().length == 1 && userStream.getVideoTracks().length == 1) {\n              //console.log(\"user sent a video\")\n\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('video');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callerBackVideo\");\n              callerElement.muted = false;\n              addVideo(callerElement, userStream);\n            } else {\n              //console.log(\"user sent a AUDIO\")\n\n              removeElementByID(callback.peer);\n              callerElement = document.createElement('audio');\n              callerElement.setAttribute(\"id\", callback.peer);\n              callerElement.setAttribute(\"class\", \"callbackAudio_media\");\n              callerElement.setAttribute(\"controls\", \"controls\");\n              callerElement.muted = false;\n              addAudio(callerElement, userStream);\n            }\n          }\n          ctr++;\n        });\n        callback.on('close', function () {\n          removeElementByID(data.id);\n        });\n        callback.on('error', function (err) {\n          //console.log(err);\n        });\n        peerConnections[data.id] = callback;\n      }\n    })[\"catch\"](function (error) {\n\n      //alert(\"audio only\");\n      //console.log(error)\n    });\n  });\n});\nsocket.on('userDisconnect', function (id) {\n  //console.log(\"userDisconnected\", id);\n  removeElementByID(id);\n  try {\n    peerConnections[id].close();\n  } catch (err) {\n    //console.log(\"error disconnect : \", err)\n  }\n});\nfunction checkAudioMuted() {\n  var muteIcon = document.querySelector('.fa-volume-mute');\n\n  // Check if the 'display' property is set to 'none'\n  if (muteIcon.style.display !== 'none') {\n    // The element with class 'fa-volume-mute' is not hidden\n    console.log('fa-volume-mute is visible, we will mute mic');\n    muteMic();\n  }\n}\nfunction muteMic() {\n  userJoinedStream.getAudioTracks().forEach(function (track) {\n    track.enabled = !track.enabled;\n  });\n}\nfunction toggleMic() {\n  if (userJoinedStream != null) {\n    userJoinedStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleAudio .fa-volume-up').show();\n        $('#toggleAudio .fa-volume-mute').hide();\n      } else {\n        $('#toggleAudio .fa-volume-up').hide();\n        $('#toggleAudio .fa-volume-mute').show();\n      }\n    });\n  }\n  if (userCallStream != null) {\n    userCallStream.getAudioTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleAudio .fa-volume-up').show();\n        $('#toggleAudio .fa-volume-mute').hide();\n      } else {\n        $('#toggleAudio .fa-volume-up').hide();\n        $('#toggleAudio .fa-volume-mute').show();\n      }\n    });\n  }\n}\nfunction checkVideoDisabled() {\n  var videoIcon = document.querySelector('.fa-video-slash');\n  if (videoIcon.style.display !== 'none') {\n    console.log('video slash is visible, we will disable video');\n    disableVideo();\n  }\n}\nfunction disableVideo() {\n  userJoinedStream.getVideoTracks().forEach(function (track) {\n    track.enabled = !track.enabled;\n  });\n}\nfunction toggleCamera() {\n  if (userJoinedStream != null) {\n    userJoinedStream.getVideoTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleCamera .fa-video').show();\n        $('#toggleCamera .fa-video-slash').hide();\n      } else {\n        $('#toggleCamera .fa-video').hide();\n        $('#toggleCamera .fa-video-slash').show();\n      }\n    });\n  }\n  if (userCallStream != null) {\n    userCallStream.getVideoTracks().forEach(function (track) {\n      track.enabled = !track.enabled;\n      //console.log(track);\n\n      if (track.enabled == true) {\n        $('#toggleCamera .fa-video').show();\n        $('#toggleCamera .fa-video-slash').hide();\n      } else {\n        $('#toggleCamera .fa-video').hide();\n        $('#toggleCamera .fa-video-slash').show();\n      }\n    });\n  }\n}\nvar shareScreenBtn = document.getElementById(\"btnShareScreen\");\nif (shareScreenBtn) {\n  document.getElementById(\"btnShareScreen\").addEventListener(\"click\", function () {\n    shareScreen();\n  });\n}\nvar toggleCameraBtn = document.getElementById(\"toggleCamera\");\nif (toggleCameraBtn) {\n  document.getElementById(\"toggleCamera\").addEventListener(\"click\", function () {\n    toggleCamera();\n  });\n}\nvar toggleAudioBtn = document.getElementById(\"toggleAudio\");\nif (toggleAudioBtn) {\n  document.getElementById(\"toggleAudio\").addEventListener(\"click\", function () {\n    toggleMic();\n  });\n}\n\n/************VOLUME CONTROL*************** */\nfunction setVolume(volume) {\n  myVideoStream.getAudioTracks().forEach(function (track) {\n    track.applyConstraints({\n      volume: volume\n    });\n  });\n}\nvar volumeControl = document.getElementById('volume-control');\nif (volumeControl) {\n  volumeControl.addEventListener('input', function () {\n    setVolume(volumeControl.value);\n  });\n}\nfunction destroyVideoSteam(mediaStream) {\n  mediaStream.getVideoTracks().forEach(function (track) {\n    track.stop();\n  });\n}\nfunction destroyAudioStream(audioStream) {\n  audioStream.getAudioTracks().forEach(function (track) {\n    track.stop();\n  });\n}\n\n/************ END SESSION *************** */\nfunction destroyUserMediaContainer() {\n  $('.right-fixed').remove();\n}\nfunction destroyUserMedia() {\n  return _destroyUserMedia.apply(this, arguments);\n}\nfunction _destroyUserMedia() {\n  _destroyUserMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          Object.keys(peerConnections).forEach(function (peerID) {\n            peerConnections[peerID].close();\n          });\n          if (myVideoStream != null) {\n            destroyVideoSteam(myVideoStream);\n            destroyAudioStream(myVideoStream);\n          }\n          if (myAudioStream != null) {\n            destroyVideoSteam(myAudioStream);\n            destroyAudioStream(myAudioStream);\n          }\n          if (userJoinedStream != null) {\n            destroyVideoSteam(userJoinedStream);\n            destroyAudioStream(userJoinedStream);\n          }\n          if (userCallStream != null) {\n            destroyVideoSteam(userCallStream);\n            destroyAudioStream(userCallStream);\n          }\n          if (recieverCallStream != null) {\n            destroyVideoSteam(recieverCallStream);\n            destroyAudioStream(recieverCallStream);\n          }\n          destroyUserMediaContainer();\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _destroyUserMedia.apply(this, arguments);\n}\nvar destroySessionMediaBtn = document.getElementById('destroy-session-media');\nif (destroySessionMediaBtn) {\n  destroySessionMediaBtn.addEventListener('click', function () {\n    destroyUserMedia();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvd2ViUlRDLmpzP2MzMGQiXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiaW5mbyIsImVycm9yIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJzb2NrZXQiLCJpbyIsIm15SWQiLCJwZWVyIiwiUGVlciIsImluaXRpYXRvciIsInRyaWNrbGUiLCJteVZpZGVvU3RyZWFtIiwibXlBdWRpb1N0cmVhbSIsInVzZXJDYWxsU3RyZWFtIiwicmVjaWV2ZXJDYWxsU3RyZWFtIiwidXNlckpvaW5lZFN0cmVhbSIsInZpZGVvRWxlbWVudCIsImF1ZGlvRWxlbWVudCIsInNoYXJlZFNjcmVlbiIsImNoZWNraW5nSW50ZXJ2YWwiLCJwZWVyQ29ubmVjdGlvbnMiLCJtZWRpYUNvbnRhaW5lciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ2aWRlb0dyaWQiLCJhdWRpb0lucHV0U2VsZWN0IiwicXVlcnlTZWxlY3RvciIsImF1ZGlvT3V0cHV0U2VsZWN0IiwidmlkZW9TZWxlY3QiLCJzZWxlY3RvcnMiLCJkaXNhYmxlZCIsIkhUTUxNZWRpYUVsZW1lbnQiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwiZ290RGV2aWNlcyIsImhhbmRsZUVycm9yIiwiZGV2aWNlSW5mb3MiLCJtYXAiLCJzZWxlY3QiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJkZXZpY2VJbmZvIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImRldmljZUlkIiwia2luZCIsInRleHQiLCJsYWJlbCIsImNvbmNhdCIsImFwcGVuZENoaWxkIiwic2VsZWN0b3JJbmRleCIsIkFycmF5IiwiY2hpbGROb2RlcyIsInNvbWUiLCJhdHRhY2hTaW5rSWQiLCJlbGVtZW50Iiwic2lua0lkIiwibXV0ZWQiLCJzZXRTaW5rSWQiLCJlcnJvck1lc3NhZ2UiLCJjb25zb2xlIiwic2VsZWN0ZWRJbmRleCIsIndhcm4iLCJjaGFuZ2VBdWRpb0Rlc3RpbmF0aW9uIiwiYXVkaW9EZXN0aW5hdGlvbiIsImdvdFN0cmVhbSIsInN0cmVhbSIsIndpbmRvdyIsInNyY09iamVjdCIsInZpZGVvIiwiYXVkaW8iLCJkYXRhIiwidXNlciIsInJvb21JRCIsInN0YXJ0IiwiYWRkTXlBdWRpbyIsImFkZEV2ZW50TGlzdGVuZXIiLCJwbGF5IiwiYXBwZW5kIiwiYWRkTXlWaWRlbyIsImFkZEF1ZGlvIiwiYWRkVmlkZW8iLCJhZGRWaWRlb0NvbnRlbnQiLCJjb250YWluZXJJRCIsImNvbnRhaW5lckVsZW1lbnQiLCJzaG93QnlFbGVtZW50SWQiLCJlbGVtZW50SUQiLCJlbCIsInN0eWxlIiwiZGlzcGxheSIsImhpZGVCeUVsZW1lbnRJZCIsInJlbW92ZUVsZW1lbnRCeUlEIiwiaWQiLCJyZW1vdmUiLCJjcmVhdGVVc2VyTWVkaWEiLCJjb25zdHJhaW50cyIsImdldFVzZXJNZWRpYSIsInNldEF0dHJpYnV0ZSIsImdldFRyYWNrcyIsInRyYWNrIiwiYXVkaW9Tb3VyY2UiLCJ2aWRlb1NvdXJjZSIsImV4YWN0IiwicmVzdGFydCIsImVtaXQiLCJzdG9wU2hhcmluZyIsImxvZyIsInNob3dFbGVtZW50IiwiY2hlY2tBbmRSZW1vdmVTaGFyZWRWaWRlbyIsInJlbW92ZUVsZW1lbnQiLCJyZW1vdmVTaGFyZWRWaWRlbyIsInNldFRpbWVvdXQiLCJjb250YWluZXIiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwibmV3Q29udGFpbmVyIiwidGV4dENvbnRlbnQiLCJpbnNlcnRCZWZvcmUiLCJkZXRlY3REZXNrdG9wU2hhcmVkIiwib24iLCJjb25uIiwiYWxlcnQiLCJhbnN3ZXIiLCJnZXRBdWRpb1RyYWNrcyIsImdldFZpZGVvVHJhY2tzIiwiY2FsbGVyRWxlbWVudCIsInVzZXJTdHJlYW0iLCJzaGFyZWRWaWQiLCJtZWRpYUNhbGxTdHJlYW0iLCJzaGFyZVNjcmVlbiIsImdldERpc3BsYXlNZWRpYSIsInBlZXJJRCIsImNvbm5lY3QiLCJzZW5kIiwic2hhcmluZ1NjcmVlbiIsIm9uZW5kZWQiLCJvbmNoYW5nZSIsInNoYXJlZFZpZGVvIiwiY3RyIiwibWVkaWFTdHJlYW0iLCJjYWxsYmFjayIsImNoZWNrVmlkZW9EaXNhYmxlZCIsImNoZWNrQXVkaW9NdXRlZCIsImF1ZGlvQ29uc3RyYWludHMiLCJjbG9zZSIsIm11dGVJY29uIiwibXV0ZU1pYyIsImVuYWJsZWQiLCJ0b2dnbGVNaWMiLCIkIiwic2hvdyIsImhpZGUiLCJ2aWRlb0ljb24iLCJkaXNhYmxlVmlkZW8iLCJ0b2dnbGVDYW1lcmEiLCJzaGFyZVNjcmVlbkJ0biIsInRvZ2dsZUNhbWVyYUJ0biIsInRvZ2dsZUF1ZGlvQnRuIiwic2V0Vm9sdW1lIiwidm9sdW1lIiwiYXBwbHlDb25zdHJhaW50cyIsInZvbHVtZUNvbnRyb2wiLCJkZXN0cm95VmlkZW9TdGVhbSIsImRlc3Ryb3lBdWRpb1N0cmVhbSIsImF1ZGlvU3RyZWFtIiwiZGVzdHJveVVzZXJNZWRpYUNvbnRhaW5lciIsImRlc3Ryb3lVc2VyTWVkaWEiLCJfZGVzdHJveVVzZXJNZWRpYSIsIl9jYWxsZWUiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiZGVzdHJveVNlc3Npb25NZWRpYUJ0biJdLCJtYXBwaW5ncyI6IjsrQ0FDQSxxSkFBQUEsbUJBQUEsWUFBQUEsb0JBQUEsV0FBQUMsQ0FBQSxTQUFBQyxDQUFBLEVBQUFELENBQUEsT0FBQUUsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLFNB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Q0FBQztBQUNOIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL3dlYlJUQy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNvY2tldCA9IGlvKCdodHRwczovL3J0Y3NlcnZlci5lc3VjY2Vzcy1pbmMuY29tOjQwMDAyJywge30pO1xyXG5sZXQgbXlJZCA9IG51bGw7XHJcblxyXG5jb25zdCBwZWVyID0gbmV3IFBlZXIoe1xyXG4gICAgaW5pdGlhdG9yOiBmYWxzZSxcclxuICAgIHRyaWNrbGU6IGZhbHNlLFxyXG59KTtcclxuXHJcbid1c2Ugc3RyaWN0JztcclxuXHJcbmxldCBteVZpZGVvU3RyZWFtID0gbnVsbDtcclxubGV0IG15QXVkaW9TdHJlYW0gPSBudWxsO1xyXG5cclxuLy90aGlzIHdpbGwgZGV0ZXJtaW5lIHdobyBjYWxsc1xyXG5sZXQgdXNlckNhbGxTdHJlYW0gPSBudWxsO1xyXG5sZXQgcmVjaWV2ZXJDYWxsU3RyZWFtID0gbnVsbDtcclxubGV0IHVzZXJKb2luZWRTdHJlYW0gPSBudWxsO1xyXG5cclxuLy9FbGVtZW50c1xyXG5sZXQgdmlkZW9FbGVtZW50O1xyXG5sZXQgYXVkaW9FbGVtZW50O1xyXG5cclxuLy9TaGFyZSBTY3JlZW5cclxubGV0IHNoYXJlZFNjcmVlbiA9IGZhbHNlO1xyXG5sZXQgY2hlY2tpbmdJbnRlcnZhbCA9IG51bGw7XHJcblxyXG5jb25zdCBwZWVyQ29ubmVjdGlvbnMgPSB7fVxyXG5cclxubGV0IG1lZGlhQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215TWVkaWFDb250YWluZXInKTtcclxubGV0IHZpZGVvR3JpZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aWRlb0dyaWQnKTtcclxuXHJcbi8vU291cmNlXHJcbmNvbnN0IGF1ZGlvSW5wdXRTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QjYXVkaW9Tb3VyY2UnKTtcclxuY29uc3QgYXVkaW9PdXRwdXRTZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QjYXVkaW9PdXRwdXQnKTtcclxuY29uc3QgdmlkZW9TZWxlY3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3QjdmlkZW9Tb3VyY2UnKTtcclxuY29uc3Qgc2VsZWN0b3JzID0gW2F1ZGlvSW5wdXRTZWxlY3QsIGF1ZGlvT3V0cHV0U2VsZWN0LCB2aWRlb1NlbGVjdF07XHJcblxyXG5hdWRpb091dHB1dFNlbGVjdC5kaXNhYmxlZCA9ICEoJ3NpbmtJZCcgaW4gSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUpO1xyXG5cclxubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkudGhlbihnb3REZXZpY2VzKS5jYXRjaChoYW5kbGVFcnJvcik7XHJcblxyXG5cclxuZnVuY3Rpb24gZ290RGV2aWNlcyhkZXZpY2VJbmZvcykge1xyXG4gICAgLy8gSGFuZGxlcyBiZWluZyBjYWxsZWQgc2V2ZXJhbCB0aW1lcyB0byB1cGRhdGUgbGFiZWxzLiBQcmVzZXJ2ZSB2YWx1ZXMuXHJcbiAgICBjb25zdCB2YWx1ZXMgPSBzZWxlY3RvcnMubWFwKHNlbGVjdCA9PiBzZWxlY3QudmFsdWUpO1xyXG4gICAgc2VsZWN0b3JzLmZvckVhY2goc2VsZWN0ID0+IHtcclxuICAgICAgICB3aGlsZSAoc2VsZWN0LmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgc2VsZWN0LnJlbW92ZUNoaWxkKHNlbGVjdC5maXJzdENoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpICE9PSBkZXZpY2VJbmZvcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGRldmljZUluZm8gPSBkZXZpY2VJbmZvc1tpXTtcclxuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuICAgICAgICBvcHRpb24udmFsdWUgPSBkZXZpY2VJbmZvLmRldmljZUlkO1xyXG5cclxuICAgICAgICBpZiAoZGV2aWNlSW5mby5raW5kID09PSAnYXVkaW9pbnB1dCcpIHtcclxuICAgICAgICAgICAgb3B0aW9uLnRleHQgPSBkZXZpY2VJbmZvLmxhYmVsIHx8IGBtaWNyb3Bob25lICR7YXVkaW9JbnB1dFNlbGVjdC5sZW5ndGggKyAxfWA7XHJcbiAgICAgICAgICAgIGF1ZGlvSW5wdXRTZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRldmljZUluZm8ua2luZCA9PT0gJ2F1ZGlvb3V0cHV0Jykge1xyXG4gICAgICAgICAgICBvcHRpb24udGV4dCA9IGRldmljZUluZm8ubGFiZWwgfHwgYHNwZWFrZXIgJHthdWRpb091dHB1dFNlbGVjdC5sZW5ndGggKyAxfWA7XHJcbiAgICAgICAgICAgIGF1ZGlvT3V0cHV0U2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkZXZpY2VJbmZvLmtpbmQgPT09ICd2aWRlb2lucHV0Jykge1xyXG4gICAgICAgICAgICBvcHRpb24udGV4dCA9IGRldmljZUluZm8ubGFiZWwgfHwgYGNhbWVyYSAke3ZpZGVvU2VsZWN0Lmxlbmd0aCArIDF9YDtcclxuICAgICAgICAgICAgdmlkZW9TZWxlY3QuYXBwZW5kQ2hpbGQob3B0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdTb21lIG90aGVyIGtpbmQgb2Ygc291cmNlL2RldmljZTogJywgZGV2aWNlSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdCwgc2VsZWN0b3JJbmRleCkgPT4ge1xyXG4gICAgICAgIGlmIChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChzZWxlY3QuY2hpbGROb2Rlcykuc29tZShuID0+IG4udmFsdWUgPT09IHZhbHVlc1tzZWxlY3RvckluZGV4XSkpIHtcclxuICAgICAgICAgICAgc2VsZWN0LnZhbHVlID0gdmFsdWVzW3NlbGVjdG9ySW5kZXhdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIEF0dGFjaCBhdWRpbyBvdXRwdXQgZGV2aWNlIHRvIHZpZGVvIGVsZW1lbnQgdXNpbmcgZGV2aWNlL3NpbmsgSUQuXHJcbmZ1bmN0aW9uIGF0dGFjaFNpbmtJZChlbGVtZW50LCBzaW5rSWQpIHtcclxuXHJcbiAgICAvLyhtdXRlIGVsZW1lbnQsIGZlZWRiYWNrIGlmIGZhbHNlKVxyXG4gICAgZWxlbWVudC5tdXRlZCA9IHRydWU7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBlbGVtZW50LnNpbmtJZCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBlbGVtZW50LnNldFNpbmtJZChzaW5rSWQpXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYFN1Y2Nlc3MsIGF1ZGlvIG91dHB1dCBkZXZpY2UgYXR0YWNoZWQ6ICR7c2lua0lkfWApO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdTZWN1cml0eUVycm9yJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGBZb3UgbmVlZCB0byB1c2UgSFRUUFMgZm9yIHNlbGVjdGluZyBhdWRpbyBvdXRwdXQgZGV2aWNlOiAke2Vycm9yfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBKdW1wIGJhY2sgdG8gZmlyc3Qgb3V0cHV0IGRldmljZSBpbiB0aGUgbGlzdCBhcyBpdCdzIHRoZSBkZWZhdWx0LlxyXG4gICAgICAgICAgICAgICAgYXVkaW9PdXRwdXRTZWxlY3Quc2VsZWN0ZWRJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBvdXRwdXQgZGV2aWNlIHNlbGVjdGlvbi4nKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlQXVkaW9EZXN0aW5hdGlvbigpIHtcclxuICAgIGNvbnN0IGF1ZGlvRGVzdGluYXRpb24gPSBhdWRpb091dHB1dFNlbGVjdC52YWx1ZTtcclxuXHJcblxyXG4gICAgaWYgKG15VmlkZW9TdHJlYW0pIHtcclxuICAgICAgICBhdHRhY2hTaW5rSWQodmlkZW9FbGVtZW50LCBhdWRpb0Rlc3RpbmF0aW9uKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYXR0YWNoU2lua0lkKGF1ZGlvRWxlbWVudCwgYXVkaW9EZXN0aW5hdGlvbik7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdvdFN0cmVhbShzdHJlYW0pIHtcclxuICAgIHdpbmRvdy5zdHJlYW0gPSBzdHJlYW07IC8vIG1ha2Ugc3RyZWFtIGF2YWlsYWJsZSB0byBjb25zb2xlXHJcbiAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gc3RyZWFtO1xyXG5cclxuICAgIC8vUmVnaXN0ZXIgdGhlIHZpZGVvIHN0cmVhbSB0byBteSBTdHJlYW1cclxuICAgIG15VmlkZW9TdHJlYW0gPSBzdHJlYW07XHJcblxyXG4gICAgLy8gUmVmcmVzaCBidXR0b24gbGlzdCBpbiBjYXNlIGxhYmVscyBoYXZlIGJlY29tZSBhdmFpbGFibGVcclxuICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IpIHtcclxuICAgIC8vc3RhcnQgYSB2aWRlbyB3aXRoIGF1ZGlvIGNvbm5lY3Rpb24gd2lkdGggZGF0YSBvZiB1c2VyXHJcbiAgICBsZXQgdmlkZW8gPSBmYWxzZTtcclxuICAgIGxldCBhdWRpbyA9IHRydWU7XHJcblxyXG5cclxuICAgIC8vc3RhcnQgYXVkaW9cclxuICAgIGRhdGEgPSB7XHJcbiAgICAgICAgJ2lkJzogbXlJZCxcclxuICAgICAgICAndXNlcic6IHVzZXIsXHJcbiAgICAgICAgJ3Jvb21JRCc6IHJvb21JRFxyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KHZpZGVvLCBhdWRpbywgZGF0YSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBhZGRNeUF1ZGlvKGF1ZGlvLCBzdHJlYW0pIHtcclxuICAgIGF1ZGlvLnNyY09iamVjdCA9IHN0cmVhbTtcclxuICAgIGF1ZGlvLm11dGVkID0gdHJ1ZTtcclxuXHJcbiAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsICgpID0+IHtcclxuICAgICAgICBhdWRpby5wbGF5KClcclxuICAgIH0pXHJcbiAgICBtZWRpYUNvbnRhaW5lci5hcHBlbmQoYXVkaW8pO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gYWRkTXlWaWRlbyh2aWRlbywgc3RyZWFtKSB7XHJcbiAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07XHJcbiAgICB2aWRlby5tdXRlZCA9IHRydWU7XHJcblxyXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlkZW8ucGxheSgpXHJcbiAgICB9KVxyXG4gICAgbWVkaWFDb250YWluZXIuYXBwZW5kKHZpZGVvKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGFkZEF1ZGlvKGF1ZGlvLCBzdHJlYW0pIHtcclxuICAgIGF1ZGlvLnNyY09iamVjdCA9IHN0cmVhbTtcclxuICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgKCkgPT4ge1xyXG4gICAgICAgIGF1ZGlvLnBsYXkoKVxyXG4gICAgfSlcclxuICAgIHZpZGVvR3JpZC5hcHBlbmQoYXVkaW8pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRWaWRlbyh2aWRlbywgc3RyZWFtKSB7XHJcbiAgICB2aWRlby5zcmNPYmplY3QgPSBzdHJlYW07XHJcbiAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsICgpID0+IHtcclxuICAgICAgICB2aWRlby5wbGF5KClcclxuICAgIH0pXHJcbiAgICB2aWRlb0dyaWQuYXBwZW5kKHZpZGVvKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGFkZFZpZGVvQ29udGVudChjb250YWluZXJJRCwgdmlkZW8sIHN0cmVhbSkge1xyXG4gICAgdmlkZW8uc3JjT2JqZWN0ID0gc3RyZWFtO1xyXG4gICAgdmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCAoKSA9PiB7XHJcbiAgICAgICAgdmlkZW8ucGxheSgpXHJcbiAgICB9KVxyXG5cclxuICAgIGxldCBjb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVySUQpO1xyXG4gICAgaWYgKGNvbnRhaW5lckVsZW1lbnQpIHtcclxuICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZCh2aWRlbyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBzaG93QnlFbGVtZW50SWQoZWxlbWVudElEKSB7XHJcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50SUQpO1xyXG4gICAgaWYgKGVsKSB7XHJcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhpZGVCeUVsZW1lbnRJZChlbGVtZW50SUQpIHtcclxuICAgIGxldCBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1lbnRJRCk7XHJcbiAgICBpZiAoZWwpIHtcclxuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50QnlJRChpZCkge1xyXG4gICAgbGV0IGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XHJcbiAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVVzZXJNZWRpYSh2aWRlbywgYXVkaW8sIGNvbnN0cmFpbnRzKSB7XHJcblxyXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKHN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICByZW1vdmVFbGVtZW50QnlJRChcIm15VmlkZW9cIik7XHJcbiAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoXCJteUF1ZGlvXCIpO1xyXG5cclxuICAgICAgICBpZiAoYXVkaW8gPT0gdHJ1ZSAmJiB2aWRlbyA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIG15QXVkaW9TdHJlYW0gPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxyXG4gICAgICAgICAgICBteVZpZGVvU3RyZWFtID0gc3RyZWFtO1xyXG4gICAgICAgICAgICB3aW5kb3cuc3RyZWFtID0gc3RyZWFtOyAvLyBtYWtlIHN0cmVhbSBhdmFpbGFibGUgdG8gY29uc29sZSAgICAgXHJcbiAgICAgICAgICAgIC8qKioqKioqXHJcbiAgICAgICAgICAgICAgICAoTk9URTogVEhJUyBTSE9VTEQgQkUgTVVURUQgPSBUUlVFKSBcclxuICAgICAgICAgICAgKioqKioqKi9cclxuXHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm15VmlkZW9cIik7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvL3ZpZGVvRWxlbWVudC5tdXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGFkZE15VmlkZW8odmlkZW9FbGVtZW50LCBzdHJlYW0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIGRldGVjdERlc2t0b3BTaGFyZWQoc3RyZWFtKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG5cclxuICAgICAgICAgICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxyXG4gICAgICAgICAgICBteVZpZGVvU3RyZWFtID0gbnVsbDtcclxuICAgICAgICAgICAgd2luZG93LnN0cmVhbSA9IHN0cmVhbTsgLy8gbWFrZSBzdHJlYW0gYXZhaWxhYmxlIHRvIGNvbnNvbGUgICAgICAgXHJcblxyXG4gICAgICAgICAgICAvL2FkZCB0byBteSBhdWRpbyBzdHJlYW1cclxuICAgICAgICAgICAgbXlBdWRpb1N0cmVhbSA9IHN0cmVhbTtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ0aGlzIGlzIGEgYXVkaW8gb25seVwiKVxyXG5cclxuICAgICAgICAgICAgLyoqKioqKipcclxuICAgICAgICAgICAgICAgIChOT1RFOiBUSElTIFNIT1VMRCBCRSBNVVRFRCA9IFRSVUUpIFxyXG4gICAgICAgICAgICAqKioqKioqL1xyXG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xyXG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgXCJteUF1ZGlvXCIpO1xyXG4gICAgICAgICAgICBhdWRpb0VsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcclxuICAgICAgICAgICAgLy9hdWRpb0VsZW1lbnQubXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgYXVkaW9FbGVtZW50Lm11dGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGFkZE15QXVkaW8oYXVkaW9FbGVtZW50LCBzdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgLy8gZGV0ZWN0RGVza3RvcFNoYXJlZChzdHJlYW0pXHJcblxyXG5cclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCk7XHJcblxyXG5cclxuICAgIH0pLnRoZW4oZ290RGV2aWNlcykuY2F0Y2goKGVycikgPT4ge1xyXG5cclxuICAgICAgICBpZiAodmlkZW8gPT0gdHJ1ZSAmJiBhdWRpbyA9PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy9hbGVydChcIm5vIG1lZGlhIGRldGVjdGVkLCBwbGVhc2UgY29ubmVjdCBhbmQgdHJ5IGFnYWluXCIpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc3RhcnQodmlkZW8sIGF1ZGlvLCBkYXRhKSB7XHJcblxyXG4gICAgaWYgKHdpbmRvdy5zdHJlYW0pIHtcclxuICAgICAgICB3aW5kb3cuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgICAgICB0cmFjay5zdG9wKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XHJcbiAgICBjb25zdCB2aWRlb1NvdXJjZSA9IHZpZGVvU2VsZWN0LnZhbHVlO1xyXG5cclxuICAgIGlmICh2aWRlbyA9PSB0cnVlICYmIGF1ZGlvID09IHRydWUpIHtcclxuXHJcbiAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcclxuICAgICAgICAgICAgdmlkZW86IHsgZGV2aWNlSWQ6IHZpZGVvU291cmNlID8geyBleGFjdDogdmlkZW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbm5lY3QgdmlkZW8gOiBzdGFydFwiKVxyXG5cclxuICAgICAgICBjcmVhdGVVc2VyTWVkaWEodmlkZW8sIGF1ZGlvLCBjb25zdHJhaW50cylcclxuXHJcbiAgICB9IGVsc2UgaWYgKHZpZGVvID09IGZhbHNlICYmIGF1ZGlvID09IHRydWUpIHtcclxuXHJcbiAgICAgICAgY29uc3QgY29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcclxuICAgICAgICAgICAgdmlkZW86IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImNvbm5lY3QgYXVkaW8gOiBzdGFydFwiKVxyXG4gICAgICAgIGNyZWF0ZVVzZXJNZWRpYSh2aWRlbywgYXVkaW8sIGNvbnN0cmFpbnRzKVxyXG5cclxuICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIC8vYWxlcnQoXCJubyBtZWRpYSBkZXRlY3RlZCwgcGxlYXNlIGNvbm5lY3QgYW5kIHRyeSBhZ2FpblwiKVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzdGFydCgpIHtcclxuXHJcbiAgICBpZiAod2luZG93LnN0cmVhbSkge1xyXG4gICAgICAgIHdpbmRvdy5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB7XHJcbiAgICAgICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XHJcbiAgICBjb25zdCB2aWRlb1NvdXJjZSA9IHZpZGVvU2VsZWN0LnZhbHVlO1xyXG4gICAgY29uc3QgY29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgIHZpZGVvOiB7IGRldmljZUlkOiB2aWRlb1NvdXJjZSA/IHsgZXhhY3Q6IHZpZGVvU291cmNlIH0gOiB1bmRlZmluZWQgfVxyXG4gICAgfTtcclxuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKChzdHJlYW0pID0+IHtcclxuICAgICAgICB3aW5kb3cuc3RyZWFtID0gc3RyZWFtOyAvLyBtYWtlIHN0cmVhbSBhdmFpbGFibGUgdG8gY29uc29sZVxyXG4gICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBzdHJlYW07XHJcblxyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJpIGhhdmUgbXV0ZWQgdGhpc1wiKVxyXG4gICAgICAgIC8vdmlkZW9FbGVtZW50Lm11dGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy9SZWdpc3RlciB0aGUgdmlkZW8gc3RyZWFtIHRvIG15IFN0cmVhbVxyXG4gICAgICAgIG15VmlkZW9TdHJlYW0gPSBzdHJlYW07XHJcblxyXG4gICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICdpZCc6IG15SWQsXHJcbiAgICAgICAgICAgICd1c2VyJzogdXNlcixcclxuICAgICAgICAgICAgJ3Jvb21JRCc6IHJvb21JRCxcclxuICAgICAgICAgICAgJ3ZpZGVvU3RyZWFtJzogbXlWaWRlb1N0cmVhbVxyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICBzb2NrZXQuZW1pdChcImNoYW5nZU1lZGlhXCIsIGRhdGEpO1xyXG5cclxuICAgICAgICByZW1vdmVFbGVtZW50QnlJRChteUlkKTtcclxuXHJcblxyXG4gICAgfSkuY2F0Y2goaGFuZGxlRXJyb3IpO1xyXG5cclxufVxyXG5cclxuXHJcblxyXG4vL3VzZXIgZW5kIHN0b3Agc2hhcmluZ1xyXG5mdW5jdGlvbiBzdG9wU2hhcmluZygpIHtcclxuICAgIGNvbnNvbGUubG9nKFwic3RvcFNoYXJpbmcoKVwiKVxyXG5cclxuICAgIGxldCBzaG93RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGVzc29uU2xpZGVcIik7XHJcblxyXG4gICAgaWYgKHNob3dFbGVtZW50KSB7XHJcbiAgICAgICAgc2hvd0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tBbmRSZW1vdmVTaGFyZWRWaWRlbygpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0FuZFJlbW92ZVNoYXJlZFZpZGVvKCkge1xyXG4gICAgY29uc3QgcmVtb3ZlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hhcmVkVmlkZW9cIik7XHJcbiAgICBpZiAocmVtb3ZlRWxlbWVudCkge1xyXG4gICAgICAgIHJlbW92ZVNoYXJlZFZpZGVvKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVjaGVja2luZyBzaGFyZWQgdmlkZW8gYWZ0ZXIgMSBzZWNvbmRcIilcclxuICAgICAgICAvLyBJZiBub3QgZm91bmQsIHdhaXQgZm9yIGEgd2hpbGUgYW5kIHRoZW4gY2hlY2sgYWdhaW5cclxuICAgICAgICBjaGVja2luZ0ludGVydmFsID0gc2V0VGltZW91dChjaGVja0FuZFJlbW92ZVNoYXJlZFZpZGVvLCAxMDAwKTsgLy8gV2FpdCBmb3IgMSBzZWNvbmQgKGFkanVzdCBhcyBuZWVkZWQpXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiByZW1vdmVTaGFyZWRWaWRlbygpIHtcclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxlc3NvblNoYXJlZENvbnRhaW5lclwiKTtcclxuXHJcbiAgICBpZiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIHBhcmVudCBlbGVtZW50IHRvIGluc2VydCB0aGUgbmV3IGNvbnRhaW5lciBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICAgICAgICBjb25zdCBwYXJlbnQgPSBjb250YWluZXIucGFyZW50Tm9kZTtcclxuICAgIFxyXG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBjb250YWluZXIgZWxlbWVudC5cclxuICAgICAgICBjb25zdCBuZXdDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIG5ld0NvbnRhaW5lci5pZCA9IFwibGVzc29uU2hhcmVkQ29udGFpbmVyXCI7XHJcbiAgICBcclxuICAgICAgICAvLyBBZGQgY29udGVudCBvciBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgY29udGFpbmVyIGlmIG5lZWRlZC5cclxuICAgICAgICBuZXdDb250YWluZXIudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgXHJcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgb2xkIGNvbnRhaW5lciB3aXRoIHRoZSBuZXcgb25lLlxyXG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3Q29udGFpbmVyLCBjb250YWluZXIpO1xyXG4gICAgXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBvbGQgc2hhcmVkIHZpZGVvIGNvbnRhaW5lci5cclxuICAgICAgICBjb250YWluZXIucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBkZXRlY3REZXNrdG9wU2hhcmVkKHN0cmVhbSkge1xyXG4gICAgcGVlci5vbignY29ubmVjdGlvbicsIGZ1bmN0aW9uKGNvbm4pIHtcclxuICAgICAgICBjb25uLm9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5zaGFyZWRTY3JlZW4gPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2hhcmVkU2NyZWVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnNoYXJlZFNjcmVlbiA9PSBmYWxzZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGV0ZWN0RGVza3RvcFNoYXJlZCBzdG9wcGVkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN0b3BTaGFyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBzaGFyZWRTY3JlZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwidGhlIHN0cmVhbSBkYXRhXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICBwZWVyLm9uKCdjbG9zZScsIGZ1bmN0aW9uKGNvbm4pIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiY2xvc2VcIilcclxuICAgIH0pO1xyXG5cclxuICAgIHBlZXIub24oJ2NhbGwnLCBjYWxsID0+IHtcclxuXHJcbiAgICAgICAgaWYgKHN0cmVhbSA9PSBudWxsKSB7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiYW5zd2VyIHRoZSBzdHJlYW0gd2l0aG91dCBhbnkgc3RyZWFtXCIsIGNhbGwpXHJcbiAgICAgICAgICAgIGNhbGwuYW5zd2VyKCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiYW5zd2VyIHRoZSBzdHJlYW1cIiwgc3RyZWFtKVxyXG5cclxuICAgICAgICAgICAgY2FsbC5hbnN3ZXIoc3RyZWFtKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggPT0gMSAmJiBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoY2FsbC5wZWVyKTtcclxuICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInBlZXJDYWxsQmFja1ZpZGVvXCIpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHN0cmVhbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XHJcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGNhbGwucGVlcik7XHJcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrQXVkaW9cIik7IC8vY2FsbCBwZWVyXHJcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XHJcbiAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhZGRBdWRpbyhjYWxsZXJFbGVtZW50LCBzdHJlYW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYWxsLm9uKCdzdHJlYW0nLCB1c2VyU3RyZWFtID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmIChzaGFyZWRTY3JlZW4gPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgc2hhcmVkVmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICAgICAgICAgIHNoYXJlZFZpZC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInNoYXJlZFZpZGVvXCIpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvL3RoZSBsZXNzb24gc2hhcmVkIGNvbnRhaW5lciBtdXN0IGJlIG9uIHRoZSBtZW1iZXIgbGVzc29uIHNsaWRlciBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgIGFkZFZpZGVvQ29udGVudCgnbGVzc29uU2hhcmVkQ29udGFpbmVyJywgc2hhcmVkVmlkLCB1c2VyU3RyZWFtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2hpZGUgbGVzc29uIFNsaWRlXHJcbiAgICAgICAgICAgICAgICBoaWRlQnlFbGVtZW50SWQoXCJsZXNzb25TbGlkZVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogbXlJZCxcclxuICAgICAgICAgICAgICAgICAgICAndXNlcic6IHVzZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3Jvb21JRCc6IHJvb21JRCxcclxuICAgICAgICAgICAgICAgICAgICAndmlkZW9TdHJlYW0nOiBtZWRpYUNhbGxTdHJlYW1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiY2hhbmdlTWVkaWFcIiwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2FsbC5vbignZmluaXNoJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJjYWxsZWQgZmluaXNoXCIpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNhbGwub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gICAgICAgICAgICBhbGVydChlcnIpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNhbGwub24oXCJjbG9zZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHNoYXJlZFZpZC5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgfSk7XHJcbn07XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIHNoYXJlU2NyZWVuKCkge1xyXG5cclxuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhKHtcclxuICAgICAgICB2aWRlbzogdHJ1ZSxcclxuICAgICAgICBhdWRpbzogdHJ1ZVxyXG4gICAgfSkudGhlbigodXNlclN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICBzaGFyZWRTY3JlZW4gPSB1c2VyU3RyZWFtO1xyXG5cclxuICAgICAgICAvL0B0b2RvOiAoaGlkZSBzbGlkZSB0aGVuIHNob3cgdGhlIHVzZXIgc2hhcmVkKVxyXG4gICAgICAgIGNvbnN0IHNoYXJlZFZpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XHJcbiAgICAgICAgc2hhcmVkVmlkLnNldEF0dHJpYnV0ZShcImlkXCIsIFwic2hhcmVkVmlkZW9cIik7XHJcbiAgICAgICAgc2hhcmVkVmlkLm11dGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vdGhlIGxlc3NvbiBzaGFyZWQgY29udGFpbmVyIG11c3QgYmUgb24gdGhlIG1lbWJlciBsZXNzb24gc2xpZGVyIGNvbXBvbmVudFxyXG4gICAgICAgIGFkZFZpZGVvQ29udGVudCgnbGVzc29uU2hhcmVkQ29udGFpbmVyJywgc2hhcmVkVmlkLCB1c2VyU3RyZWFtKTtcclxuXHJcbiAgICAgICAgLy9oaWRlIGxlc3NvbiBTbGlkZVxyXG4gICAgICAgIGhpZGVCeUVsZW1lbnRJZChcImxlc3NvblNsaWRlXCIpO1xyXG5cclxuICAgICAgICAvL0Nvbm5lY3QgdG8gcGVlcnNcclxuICAgICAgICBPYmplY3Qua2V5cyhwZWVyQ29ubmVjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24ocGVlcklEKSB7XHJcbiAgICAgICAgICAgIC8vY29ubmVjdCBhbmQgc2VuZFxyXG4gICAgICAgICAgICB2YXIgY29ubiA9IHBlZXIuY29ubmVjdChwZWVySUQpO1xyXG4gICAgICAgICAgICBjb25uLm9uKCdvcGVuJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIChORVcpIHNoYXJlIHNjcmVlbiBkYXRhXHJcbiAgICAgICAgICAgICAgICAqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IHBlZXJJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NoYXJlZFNjcmVlbic6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gdGhlIGNvbm5lY3Rpb24sIGFuZCBzZW5kIHRoZW4gY2FsbFxyXG4gICAgICAgICAgICAgICAgY29ubi5zZW5kKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHNoYXJpbmdTY3JlZW4gPSBwZWVyLmNhbGwocGVlcklELCBzaGFyZWRTY3JlZW4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8vVGhlIHNjcmVlbiByZWNvcmQgaXMgc3RvcHBlZCBieSBteXNlbGZcclxuICAgICAgICBzaGFyZWRTY3JlZW4uZ2V0VmlkZW9UcmFja3MoKVswXS5vbmVuZGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNob3dCeUVsZW1lbnRJZChcImxlc3NvblNsaWRlXCIpXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hhcmVkVmlkZW9cIikucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIC8vc2VuZCB0aGlzIHNoYXJlZCBzY3JlZW4gZmFsc2UgdG8gc3RvcCBwZWVyXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBlZXJDb25uZWN0aW9ucykuZm9yRWFjaChmdW5jdGlvbihwZWVySUQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb25uID0gcGVlci5jb25uZWN0KHBlZXJJRCk7XHJcbiAgICAgICAgICAgICAgICBjb25uLm9uKCdvcGVuJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8qKioqKioqKioqKioqKioqKioqKiogICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKFNUT1AgU0hBUkUpIHNoYXJlIHNjcmVlbiBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogcGVlcklELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2hhcmVkU2NyZWVuJzogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29ubi5zZW5kKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgICAgIC8vc29ja2V0LmVtaXQoXCJ1c2VyU2hhcmVcIiwgcm9vbUlELCBzaGFyZWRTY3JlZW4pO1xyXG5cclxuICAgIH0pO1xyXG59XHJcblxyXG5hdWRpb0lucHV0U2VsZWN0Lm9uY2hhbmdlID0gcmVzdGFydDtcclxuYXVkaW9PdXRwdXRTZWxlY3Qub25jaGFuZ2UgPSBjaGFuZ2VBdWRpb0Rlc3RpbmF0aW9uO1xyXG52aWRlb1NlbGVjdC5vbmNoYW5nZSA9IHJlc3RhcnQ7XHJcblxyXG5cclxuXHJcblxyXG5wZWVyLm9uKCdjb25uZWN0aW9uJywgZnVuY3Rpb24oY29ubikge1xyXG5cclxuICAgIGNvbm4ub24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2hhcmUgY29ubmVjdGlvbjogcGVlciBjb25uZWN0ZWRcIiwgZGF0YSlcclxuXHJcbiAgICAgICAgaWYgKGRhdGEuc2hhcmVkU2NyZWVuID09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgIHNoYXJlZFNjcmVlbiA9IHRydWU7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zaGFyZWRTY3JlZW4gPT0gZmFsc2UpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGlvbiBzaGFyZWQgc3RvcHBlZFwiKTtcclxuICAgICAgICAgICAgc3RvcFNoYXJpbmcoKTtcclxuICAgICAgICAgICAgc2hhcmVkU2NyZWVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgYWxlcnQoXCJ0aGUgc3RyZWFtIGRhdGFcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgY29ubi5vbignY2xvc2UnLCAoY29ubikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwic2hhcmVkIHZpZGVvIGNvbm5lY3Rpb24gb2YgcGVlciBoYXMgYmVlbiBjbG9zZWRcIiwgY29ubilcclxuXHJcbiAgICAgICAgY29uc3Qgc2hhcmVkVmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hhcmVkVmlkZW8nKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHZpZGVvIGVsZW1lbnQgZXhpc3RzIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJlbW92ZSBpdFxyXG4gICAgICAgIGlmIChzaGFyZWRWaWRlbykge1xyXG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSB2aWRlbyBlbGVtZW50IGZyb20gdGhlIERPTVxyXG4gICAgICAgICAgc2hhcmVkVmlkZW8ucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdFbGVtZW50IHdpdGggaWQgXCJzaGFyZWRWaWRlb1wiIG5vdCBmb3VuZC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgIH0pO1xyXG5cclxufSk7XHJcblxyXG5wZWVyLm9uKCdvcGVuJywgKGlkKSA9PiB7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyhcIm15IHBlZXIgaWRcIiArIGlkKVxyXG4gICAgLy9jb25zb2xlLmxvZyhcIm15IHVzZXIgXCIsIHVzZXIpXHJcbiAgICAvL2NvbnNvbGUubG9nKFwibXkgcm9vbSBpZCBcIiwgcm9vbUlEKVxyXG5cclxuICAgIG15SWQgPSBpZDtcclxuXHJcbiAgICBkYXRhID0ge1xyXG4gICAgICAgICdpZCc6IGlkLFxyXG4gICAgICAgICd1c2VyJzogdXNlcixcclxuICAgICAgICAncm9vbUlEJzogcm9vbUlEXHJcbiAgICB9XHJcblxyXG4gICAgc29ja2V0LmVtaXQoXCJuZXdVc2VyXCIsIGRhdGEpO1xyXG5cclxuICAgIC8vc3RhcnQgYSB2aWRlbyB3aXRoIGF1ZGlvIGNvbm5lY3Rpb24gd2lkdGggZGF0YSBvZiB1c2VyXHJcbiAgICBsZXQgdmlkZW8gPSB0cnVlO1xyXG4gICAgbGV0IGF1ZGlvID0gdHJ1ZTtcclxuXHJcbiAgICAvL3N0YXJ0IHRoZSBteSBvd24gdmlkZW8gY2FtZXJhXHJcblxyXG4gICAgc3RhcnQodmlkZW8sIGF1ZGlvLCBkYXRhKVxyXG5cclxufSk7XHJcblxyXG5cclxuXHJcbnBlZXIub24oJ2NhbGwnLCBjYWxsID0+IHtcclxuXHJcbiAgICBsZXQgY3RyID0gMDtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKFwiUEVFUjo6IENBTExJTkcuLi4gZm9yIGEgdmlkZW8gc3RyZWFtIG9yIGF1ZGlvIHN0cmVhbSAuLi5cIik7XHJcblxyXG4gICAgY29uc3QgYXVkaW9Tb3VyY2UgPSBhdWRpb0lucHV0U2VsZWN0LnZhbHVlO1xyXG4gICAgY29uc3QgdmlkZW9Tb3VyY2UgPSB2aWRlb1NlbGVjdC52YWx1ZTtcclxuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0ge1xyXG4gICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcclxuICAgICAgICB2aWRlbzogeyBkZXZpY2VJZDogdmlkZW9Tb3VyY2UgPyB7IGV4YWN0OiB2aWRlb1NvdXJjZSB9IDogdW5kZWZpbmVkIH1cclxuICAgIH07XHJcblxyXG4gICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKHN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICB1c2VyQ2FsbFN0cmVhbSA9IHN0cmVhbTtcclxuXHJcbiAgICAgICAgaWYgKHN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgIC8vYWxlcnQoXCJzdHJlYW0gZnJvbSBzZW5kZXIgaXMgYSB2aWRlbyAxXCIpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9hbGVydChcInN0cmVhbSBmcm9tIHNlbmRlciBpcyBhIGF1ZGlvIDJcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNhbGwuYW5zd2VyKHN0cmVhbSk7XHJcblxyXG4gICAgICAgIGNhbGwub24oJ3N0cmVhbScsICh1c2VyU3RyZWFtKSA9PiB7XHJcblxyXG4gICAgICAgICAgICByZWNpZXZlckNhbGxTdHJlYW0gPSB1c2VyU3RyZWFtO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uc1tjYWxsLnBlZXJdID0gY2FsbDtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJyZWNpZXZlIHZpZGVvIGZyb20gaW5pdGlhdG9yIFwiLCBjYWxsKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdHIgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzaGFyZWRTY3JlZW4gPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlZFZpZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVkVmlkLnNldEF0dHJpYnV0ZShcImlkXCIsIFwic2hhcmVkVmlkZW9cIik7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBsZXNzb24gc2hhcmVkIGNvbnRhaW5lciBtdXN0IGJlIG9uIHRoZSBtZW1iZXIgbGVzc29uIHNsaWRlciBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICBhZGRWaWRlb0NvbnRlbnQoJ2xlc3NvblNoYXJlZENvbnRhaW5lcicsIHNoYXJlZFZpZCwgdXNlclN0cmVhbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vaGlkZSBsZXNzb24gU2xpZGVcclxuICAgICAgICAgICAgICAgICAgICBoaWRlQnlFbGVtZW50SWQoXCJsZXNzb25TbGlkZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoXCJyZWNpZXZlciBmcm9tIHNlbmRlciBpcyBhIHZpZGVvIDUgOjogKHBlZXIpXCIgKyBjYWxsLnBlZXIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGNhbGwucGVlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwZWVyQ2FsbEJhY2tWaWRlb1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoXCJyZWNpZXZlciBmcm9tIHNlbmRlciBpcyBhIGF1ZGlvIDYgOjogKHBlZXIpXCIgKyBjYWxsLnBlZXIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGNhbGwucGVlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJwZWVyQ2FsbEJhY2tBdWRpb1wiKTsgLy9jYWxsIHBlZXJcclxuICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhZGRBdWRpbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3RyKytcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2FsbC5vbignY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGNhbGwucGVlcik7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJ1c2VyIGRpc2NvbmVjdGVkXCIpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcblxyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJyZWNpZXZlIGF1ZGlvIGZyb20gaW5pdGlhdG9yXCIsIGNhbGwpO1xyXG5cclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGF1ZGlvU291cmNlID0gYXVkaW9JbnB1dFNlbGVjdC52YWx1ZTtcclxuICAgICAgICBjb25zdCBjb25zdHJhaW50cyA9IHtcclxuICAgICAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgICAgICB2aWRlbzogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoY29uc3RyYWludHMpLnRoZW4oKHN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgdXNlckNhbGxTdHJlYW0gPSBzdHJlYW07XHJcbiAgICAgICAgICAgIGlmIChzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggPT0gMSAmJiBzdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgLy9hbGVydChcInN0cmVhbSBmcm9tIHNlbmRlciBpcyBhIHZpZGVvIDNcIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vYWxlcnQoXCJzdHJlYW0gZnJvbSBzZW5kZXIgaXMgYSBhdWRpbyA0XCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhbGwuYW5zd2VyKHN0cmVhbSk7XHJcblxyXG4gICAgICAgICAgICBjYWxsLm9uKCdzdHJlYW0nLCAodXNlclN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHJlY2lldmVyQ2FsbFN0cmVhbSA9IHVzZXJTdHJlYW07XHJcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbY2FsbC5wZWVyXSA9IGNhbGw7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN0ciA9PSAwKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVkU2NyZWVuID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkVmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVkVmlkLnNldEF0dHJpYnV0ZShcImlkXCIsIFwic2hhcmVkVmlkZW9cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZSBsZXNzb24gc2hhcmVkIGNvbnRhaW5lciBtdXN0IGJlIG9uIHRoZSBtZW1iZXIgbGVzc29uIHNsaWRlciBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVmlkZW9Db250ZW50KCdsZXNzb25TaGFyZWRDb250YWluZXInLCBzaGFyZWRWaWQsIHVzZXJTdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9oaWRlIGxlc3NvbiBTbGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlQnlFbGVtZW50SWQoXCJsZXNzb25TbGlkZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KFwicmVjaWV2ZXIgZnJvbSBzZW5kZXIgaXMgYSB2aWRlbyA3ICA6OiAocGVlcikgXCIgKyBjYWxsLnBlZXIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrVmlkZW9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsZXJ0KFwicmVjaWV2ZXIgZnJvbSBzZW5kZXIgaXMgYSBhdWRpbyA4IDo6IChwZWVyKVwiICsgY2FsbC5wZWVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsLnBlZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwicGVlckNhbGxCYWNrQXVkaW9cIik7IC8vY2FsbCBwZWVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRBdWRpbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3RyKytcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjYWxsLm9uKCdjbG9zZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGNhbGwucGVlcik7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwidXNlciBkaXNjb25lY3RlZFwiKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIC8vYWxlcnQoXCJJIGNhbid0IHNlbmQgYW55IHZpZGVvIHIgYXVkaW8gdG8geW91ciBjb250YWN0LCBwbGVhc2UgY2hlY2sgbWVkaWFcIilcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbnBlZXIub24oJ2Nsb3NlJywgKGlkKSA9PiB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkucmVtb3ZlKCk7XHJcbn0pO1xyXG5cclxuXHJcbnNvY2tldC5vbigndXNlckpvaW5lZCcsIChkYXRhKSA9PiB7XHJcblxyXG5cclxuICAgIHBlZXJDb25uZWN0aW9uc1tkYXRhLmlkXSA9IGRhdGE7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJ1c2VyIGpvaW5lZCA6OjogY2FsbGluZyBpbml0aWF0b3Igd2l0aCBqdXN0IGF1ZGlvIGFuZCB2aWRlb1wiLCBkYXRhLmlkKTtcclxuXHJcbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XHJcbiAgICBjb25zdCB2aWRlb1NvdXJjZSA9IHZpZGVvU2VsZWN0LnZhbHVlO1xyXG4gICAgY29uc3QgY29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgIHZpZGVvOiB7IGRldmljZUlkOiB2aWRlb1NvdXJjZSA/IHsgZXhhY3Q6IHZpZGVvU291cmNlIH0gOiB1bmRlZmluZWQgfVxyXG4gICAgfTtcclxuXHJcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbigobWVkaWFTdHJlYW0pID0+IHtcclxuXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInVzZXIgam9pbmVkIDo6OiBjYWxsaW5nIGluaXRpYXRvciB3aXRoIGp1c3QgYXVkaW8gYW5kIHZpZGVvXCIsIGRhdGEuaWQpO1xyXG5cclxuICAgICAgICB1c2VySm9pbmVkU3RyZWFtID0gbWVkaWFTdHJlYW07XHJcblxyXG4gICAgICAgIGNhbGxiYWNrID0gcGVlci5jYWxsKGRhdGEuaWQsIG1lZGlhU3RyZWFtKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbY2FsbGJhY2sucGVlcl0gPSBjYWxsYmFjaztcclxuXHJcbiAgICAgICAgICAgIGxldCBjdHIgPSAwO1xyXG5cclxuICAgICAgICAgICAgY2FsbGJhY2sub24oJ3N0cmVhbScsICh1c2VyU3RyZWFtKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN0ciA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGRhdGEuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidXNlcl9qb2luZWRfcGVlcl9jYWxsX2JhY2tcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFZpZGVvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInVzZXJfam9pbmVkX3BlZXJfY2FsbF9iYWNrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNvbnRyb2xzXCIsIFwiY29udHJvbHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3RyKys7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2hlY2tWaWRlb0Rpc2FibGVkKCk7XHJcbiAgICAgICAgY2hlY2tBdWRpb011dGVkKCk7XHJcblxyXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcblxyXG4gICAgICAgIC8vSSBoYXZlIG9ubHkgYXVkaW8sIHNlbmQgdG8gdGhlIGF1ZGlvIHRvIG15IHBlZXJcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwidXNlciBqb2luZWQ6OiBJIGhhdmUgb25seSBhdWRpbywgc2VuZCB0byB0aGUgYXVkaW8gdG8gbXkgcGVlclwiLCBkYXRhLmlkKTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGF1ZGlvQ29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgICAgIGF1ZGlvOiB7IGRldmljZUlkOiBhdWRpb1NvdXJjZSA/IHsgZXhhY3Q6IGF1ZGlvU291cmNlIH0gOiB1bmRlZmluZWQgfSxcclxuICAgICAgICAgICAgdmlkZW86IGZhbHNlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGF1ZGlvQ29uc3RyYWludHMpLnRoZW4oKG1lZGlhQ2FsbFN0cmVhbSkgPT4ge1xyXG4gICAgICAgICAgICB1c2VySm9pbmVkU3RyZWFtID0gbWVkaWFDYWxsU3RyZWFtO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGlmIChteVZpZGVvU3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChkYXRhLmlkLCBtZWRpYUNhbGxTdHJlYW0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAnaWQnOiBteUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICd1c2VyJzogdXNlcixcclxuICAgICAgICAgICAgICAgICAgICAncm9vbUlEJzogcm9vbUlELFxyXG4gICAgICAgICAgICAgICAgICAgICd2aWRlb1N0cmVhbSc6IG1lZGlhQ2FsbFN0cmVhbVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KFwiY2hhbmdlTWVkaWFcIiwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9uZXZlciBtaW5kIGNhbGxiYWNrLCBpIHdpbGwgY2FsbCBjaGFuZ2UgbWVkaWFcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbY2FsbGJhY2sucGVlcl0gPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIGxldCBjdHIgPSAwO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sub24oJ3N0cmVhbScsICh1c2VyU3RyZWFtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0ciA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlclN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwidXNlcl9qb2luZWRfcGVlcl9jYWxsX2JhY2tcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBkYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ1c2VyX2pvaW5lZF9wZWVyX2NhbGxfYmFja1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGN0cisrO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uc1tkYXRhLmlkXSA9IGNhbGxiYWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAvL2FsZXJ0KFwiUGxlYXNlIGNvbm5lY3QgYXVkaW9pbnB1dCBkZXZpY2UgYW5kIHRyeSBhZ2FpblwiKTtcclxuICAgICAgICAgICAgLy8gLy9jb25zb2xlLmxvZyhlcnJvcilcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY2hlY2tWaWRlb0Rpc2FibGVkKCk7XHJcbiAgICAgICAgY2hlY2tBdWRpb011dGVkKCk7XHJcblxyXG4gICAgfSk7XHJcblxyXG59KTtcclxuXHJcblxyXG5zb2NrZXQub24oJ21lZGlhQ2hhbmdlZCcsIChkYXRhKSA9PiB7XHJcbiAgICBjb25zdCBhdWRpb1NvdXJjZSA9IGF1ZGlvSW5wdXRTZWxlY3QudmFsdWU7XHJcbiAgICBjb25zdCB2aWRlb1NvdXJjZSA9IHZpZGVvU2VsZWN0LnZhbHVlO1xyXG4gICAgY29uc3QgY29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgYXVkaW86IHsgZGV2aWNlSWQ6IGF1ZGlvU291cmNlID8geyBleGFjdDogYXVkaW9Tb3VyY2UgfSA6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgIHZpZGVvOiB7IGRldmljZUlkOiB2aWRlb1NvdXJjZSA/IHsgZXhhY3Q6IHZpZGVvU291cmNlIH0gOiB1bmRlZmluZWQgfVxyXG4gICAgfTtcclxuXHJcbiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykudGhlbigodXNlclN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwibWVkaWFDaGFuZ2VkOiBpbml0aWF0b3IgKHJlY2lldmVkKVwiKVxyXG5cclxuICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChkYXRhLmlkLCB1c2VyU3RyZWFtKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY3RyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdzdHJlYW0nLCAodXNlclN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdHIgPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwicmVjaXBpZW50IGNhbGxiYWNrIDogdmlkZW8gc3RyZWFtXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlclN0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aCA9PSAxICYmIHVzZXJTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGggPT0gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBjYWxsYmFjay5wZWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInJlcGlwaWVudF92aWRlb19jaGFuZ2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRWaWRlbyhjYWxsZXJFbGVtZW50LCB1c2VyU3RyZWFtKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50QnlJRChkYXRhLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgZGF0YS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJyZXBpcGllbnRfYXVkaW9fY2hhbmdlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjb250cm9sc1wiLCBcImNvbnRyb2xzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50Lm11dGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGN0cisrO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdjbG9zZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnRCeUlEKGRhdGEuaWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBwZWVyQ29ubmVjdGlvbnNbZGF0YS5pZF0gPSBjYWxsYmFjaztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBhdWRpb0NvbnN0cmFpbnRzID0ge1xyXG4gICAgICAgICAgICBhdWRpbzogeyBkZXZpY2VJZDogYXVkaW9Tb3VyY2UgPyB7IGV4YWN0OiBhdWRpb1NvdXJjZSB9IDogdW5kZWZpbmVkIH0sXHJcbiAgICAgICAgICAgIHZpZGVvOiBmYWxzZSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShhdWRpb0NvbnN0cmFpbnRzKS50aGVuKCh1c2VyU3RyZWFtKSA9PiB7XHJcblxyXG4gICAgICAgICAgICB1c2VyQ2FsbFN0cmVhbSA9IHVzZXJTdHJlYW07XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiaW5pdGlhdG9yIFNFTlQgQU5EIEFVRElPXCIpXHJcblxyXG4gICAgICAgICAgICBjYWxsYmFjayA9IHBlZXIuY2FsbChkYXRhLmlkLCB1c2VyU3RyZWFtKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjdHIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLm9uKCdzdHJlYW0nLCAodXNlclN0cmVhbSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZWNpZXZlckNhbGxTdHJlYW0gPSB1c2VyU3RyZWFtO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwidGhpcyBpcyBmb3IgdGhlIGF1ZGlvLCBzdHJlYW0gb2YgdGhlIGluaXRpYXRvclwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN0ciA9PSAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKHVzZXJTdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2codXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoID09IDEgJiYgdXNlclN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCA9PSAxKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInVzZXIgc2VudCBhIHZpZGVvXCIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoY2FsbGJhY2sucGVlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgY2FsbGJhY2sucGVlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiY2FsbGVyQmFja1ZpZGVvXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVyRWxlbWVudC5tdXRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkVmlkZW8oY2FsbGVyRWxlbWVudCwgdXNlclN0cmVhbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInVzZXIgc2VudCBhIEFVRElPXCIpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoY2FsbGJhY2sucGVlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiaWRcIiwgY2FsbGJhY2sucGVlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsZXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiY2FsbGJhY2tBdWRpb19tZWRpYVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY29udHJvbHNcIiwgXCJjb250cm9sc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxlckVsZW1lbnQubXV0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEF1ZGlvKGNhbGxlckVsZW1lbnQsIHVzZXJTdHJlYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3RyKys7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5vbignY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudEJ5SUQoZGF0YS5pZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5vbignZXJyb3InLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcGVlckNvbm5lY3Rpb25zW2RhdGEuaWRdID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy9hbGVydChcImF1ZGlvIG9ubHlcIik7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuXHJcbnNvY2tldC5vbigndXNlckRpc2Nvbm5lY3QnLCBpZCA9PiB7XHJcbiAgICAvL2NvbnNvbGUubG9nKFwidXNlckRpc2Nvbm5lY3RlZFwiLCBpZCk7XHJcbiAgICByZW1vdmVFbGVtZW50QnlJRChpZCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHBlZXJDb25uZWN0aW9uc1tpZF0uY2xvc2UoKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJlcnJvciBkaXNjb25uZWN0IDogXCIsIGVycilcclxuICAgIH1cclxufSk7XHJcblxyXG5cclxuZnVuY3Rpb24gY2hlY2tBdWRpb011dGVkKCkge1xyXG4gICAgY29uc3QgbXV0ZUljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmEtdm9sdW1lLW11dGUnKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGUgJ2Rpc3BsYXknIHByb3BlcnR5IGlzIHNldCB0byAnbm9uZSdcclxuICAgIGlmIChtdXRlSWNvbi5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZScpIHsgICAgICAgXHJcbiAgICAgICAgLy8gVGhlIGVsZW1lbnQgd2l0aCBjbGFzcyAnZmEtdm9sdW1lLW11dGUnIGlzIG5vdCBoaWRkZW5cclxuICAgICAgICBjb25zb2xlLmxvZygnZmEtdm9sdW1lLW11dGUgaXMgdmlzaWJsZSwgd2Ugd2lsbCBtdXRlIG1pYycpO1xyXG4gICAgICAgIG11dGVNaWMoKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbXV0ZU1pYygpIHtcclxuICB1c2VySm9pbmVkU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcclxuICB9KTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZU1pYygpIHtcclxuICAgIGlmICh1c2VySm9pbmVkU3RyZWFtICE9IG51bGwpIHtcclxuICAgICAgICB1c2VySm9pbmVkU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgICAgICAgICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRyYWNrKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0cmFjay5lbmFibGVkID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICQoJyN0b2dnbGVBdWRpbyAuZmEtdm9sdW1lLXVwJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUF1ZGlvIC5mYS12b2x1bWUtbXV0ZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJyN0b2dnbGVBdWRpbyAuZmEtdm9sdW1lLXVwJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUF1ZGlvIC5mYS12b2x1bWUtbXV0ZScpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpZiAodXNlckNhbGxTdHJlYW0gIT0gbnVsbCkge1xyXG4gICAgICAgIHVzZXJDYWxsU3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgICAgICAgICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRyYWNrKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0cmFjay5lbmFibGVkID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICQoJyN0b2dnbGVBdWRpbyAuZmEtdm9sdW1lLXVwJykuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUF1ZGlvIC5mYS12b2x1bWUtbXV0ZScpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJyN0b2dnbGVBdWRpbyAuZmEtdm9sdW1lLXVwJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUF1ZGlvIC5mYS12b2x1bWUtbXV0ZScpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGNoZWNrVmlkZW9EaXNhYmxlZCgpIHtcclxuICAgIGNvbnN0IHZpZGVvSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYS12aWRlby1zbGFzaCcpOyAgICBcclxuICAgIGlmICh2aWRlb0ljb24uc3R5bGUuZGlzcGxheSAhPT0gJ25vbmUnKSB7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgY29uc29sZS5sb2coJ3ZpZGVvIHNsYXNoIGlzIHZpc2libGUsIHdlIHdpbGwgZGlzYWJsZSB2aWRlbycpO1xyXG4gICAgICAgIGRpc2FibGVWaWRlbygpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNhYmxlVmlkZW8oKSB7XHJcbiAgICB1c2VySm9pbmVkU3RyZWFtLmdldFZpZGVvVHJhY2tzKCkuZm9yRWFjaCgodHJhY2spID0+IHtcclxuICAgICAgdHJhY2suZW5hYmxlZCA9ICF0cmFjay5lbmFibGVkO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBcclxuZnVuY3Rpb24gdG9nZ2xlQ2FtZXJhKCkge1xyXG4gICAgaWYgKHVzZXJKb2luZWRTdHJlYW0gIT0gbnVsbCkge1xyXG4gICAgICAgIHVzZXJKb2luZWRTdHJlYW0uZ2V0VmlkZW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xyXG4gICAgICAgICAgICB0cmFjay5lbmFibGVkID0gIXRyYWNrLmVuYWJsZWQ7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2codHJhY2spO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYWNrLmVuYWJsZWQgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUNhbWVyYSAuZmEtdmlkZW8nKS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjdG9nZ2xlQ2FtZXJhIC5mYS12aWRlby1zbGFzaCcpLmhpZGUoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoJyN0b2dnbGVDYW1lcmEgLmZhLXZpZGVvJykuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUNhbWVyYSAuZmEtdmlkZW8tc2xhc2gnKS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHVzZXJDYWxsU3RyZWFtICE9IG51bGwpIHtcclxuICAgICAgICB1c2VyQ2FsbFN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XHJcbiAgICAgICAgICAgIHRyYWNrLmVuYWJsZWQgPSAhdHJhY2suZW5hYmxlZDtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0cmFjayk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHJhY2suZW5hYmxlZCA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkKCcjdG9nZ2xlQ2FtZXJhIC5mYS12aWRlbycpLnNob3coKTtcclxuICAgICAgICAgICAgICAgICQoJyN0b2dnbGVDYW1lcmEgLmZhLXZpZGVvLXNsYXNoJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJCgnI3RvZ2dsZUNhbWVyYSAuZmEtdmlkZW8nKS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAkKCcjdG9nZ2xlQ2FtZXJhIC5mYS12aWRlby1zbGFzaCcpLnNob3coKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBzaGFyZVNjcmVlbkJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuU2hhcmVTY3JlZW5cIilcclxuXHJcbmlmIChzaGFyZVNjcmVlbkJ0bikge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5TaGFyZVNjcmVlblwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2hhcmVTY3JlZW4oKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxubGV0IHRvZ2dsZUNhbWVyYUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlQ2FtZXJhXCIpO1xyXG5cclxuaWYgKHRvZ2dsZUNhbWVyYUJ0bikge1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGVDYW1lcmFcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRvZ2dsZUNhbWVyYSgpXHJcbiAgICB9KTtcclxufVxyXG5cclxubGV0IHRvZ2dsZUF1ZGlvQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGVBdWRpb1wiKVxyXG5cclxuaWYgKHRvZ2dsZUF1ZGlvQnRuKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZUF1ZGlvXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB0b2dnbGVNaWMoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKioqKioqKioqKioqVk9MVU1FIENPTlRST0wqKioqKioqKioqKioqKiogKi9cclxuZnVuY3Rpb24gc2V0Vm9sdW1lKHZvbHVtZSkge1xyXG4gICAgbXlWaWRlb1N0cmVhbS5nZXRBdWRpb1RyYWNrcygpLmZvckVhY2godHJhY2sgPT4ge1xyXG4gICAgICAgIHRyYWNrLmFwcGx5Q29uc3RyYWludHMoeyB2b2x1bWU6IHZvbHVtZSB9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IHZvbHVtZUNvbnRyb2wgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndm9sdW1lLWNvbnRyb2wnKTtcclxuaWYgKHZvbHVtZUNvbnRyb2wpIHtcclxuICAgIHZvbHVtZUNvbnRyb2wuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgc2V0Vm9sdW1lKHZvbHVtZUNvbnRyb2wudmFsdWUpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlc3Ryb3lWaWRlb1N0ZWFtKG1lZGlhU3RyZWFtKSB7XHJcbiAgICBtZWRpYVN0cmVhbS5nZXRWaWRlb1RyYWNrcygpLmZvckVhY2goKHRyYWNrKSA9PiB7XHJcbiAgICAgICAgdHJhY2suc3RvcCgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlc3Ryb3lBdWRpb1N0cmVhbShhdWRpb1N0cmVhbSkge1xyXG4gICAgYXVkaW9TdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5mb3JFYWNoKCh0cmFjaykgPT4ge1xyXG4gICAgICAgIHRyYWNrLnN0b3AoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKioqKioqKioqKioqIEVORCBTRVNTSU9OICoqKioqKioqKioqKioqKiAqL1xyXG5mdW5jdGlvbiBkZXN0cm95VXNlck1lZGlhQ29udGFpbmVyKCkge1xyXG4gICAgJCgnLnJpZ2h0LWZpeGVkJykucmVtb3ZlKCk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRlc3Ryb3lVc2VyTWVkaWEoKSB7XHJcbiAgICBPYmplY3Qua2V5cyhwZWVyQ29ubmVjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24ocGVlcklEKSB7XHJcbiAgICAgICAgcGVlckNvbm5lY3Rpb25zW3BlZXJJRF0uY2xvc2UoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChteVZpZGVvU3RyZWFtICE9IG51bGwpIHtcclxuICAgICAgICBkZXN0cm95VmlkZW9TdGVhbShteVZpZGVvU3RyZWFtKTtcclxuICAgICAgICBkZXN0cm95QXVkaW9TdHJlYW0obXlWaWRlb1N0cmVhbSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG15QXVkaW9TdHJlYW0gIT0gbnVsbCkge1xyXG4gICAgICAgIGRlc3Ryb3lWaWRlb1N0ZWFtKG15QXVkaW9TdHJlYW0pO1xyXG4gICAgICAgIGRlc3Ryb3lBdWRpb1N0cmVhbShteUF1ZGlvU3RyZWFtKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXNlckpvaW5lZFN0cmVhbSAhPSBudWxsKSB7XHJcbiAgICAgICAgZGVzdHJveVZpZGVvU3RlYW0odXNlckpvaW5lZFN0cmVhbSk7XHJcbiAgICAgICAgZGVzdHJveUF1ZGlvU3RyZWFtKHVzZXJKb2luZWRTdHJlYW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh1c2VyQ2FsbFN0cmVhbSAhPSBudWxsKSB7XHJcbiAgICAgICAgZGVzdHJveVZpZGVvU3RlYW0odXNlckNhbGxTdHJlYW0pO1xyXG4gICAgICAgIGRlc3Ryb3lBdWRpb1N0cmVhbSh1c2VyQ2FsbFN0cmVhbSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlY2lldmVyQ2FsbFN0cmVhbSAhPSBudWxsKSB7XHJcbiAgICAgICAgZGVzdHJveVZpZGVvU3RlYW0ocmVjaWV2ZXJDYWxsU3RyZWFtKTtcclxuICAgICAgICBkZXN0cm95QXVkaW9TdHJlYW0ocmVjaWV2ZXJDYWxsU3RyZWFtKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95VXNlck1lZGlhQ29udGFpbmVyKCk7XHJcbn1cclxuXHJcbmNvbnN0IGRlc3Ryb3lTZXNzaW9uTWVkaWFCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzdHJveS1zZXNzaW9uLW1lZGlhJyk7XHJcblxyXG5pZiAoZGVzdHJveVNlc3Npb25NZWRpYUJ0bikge1xyXG4gICAgZGVzdHJveVNlc3Npb25NZWRpYUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBkZXN0cm95VXNlck1lZGlhKCk7XHJcbiAgICB9KTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/webRTC.js\n");

/***/ }),

/***/ 6:
/*!**************************************!*\
  !*** multi ./resources/js/webRTC.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\wamp64\www\esi_development\resources\js\webRTC.js */"./resources/js/webRTC.js");


/***/ })

/******/ });